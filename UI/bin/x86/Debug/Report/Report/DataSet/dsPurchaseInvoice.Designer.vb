'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPurchaseInvoice"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPurchaseInvoice
    Inherits Global.System.Data.DataSet
    
    Private tablePurchaseInvoice As PurchaseInvoiceDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PurchaseInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInvoiceDataTable(ds.Tables("PurchaseInvoice")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PurchaseInvoice() As PurchaseInvoiceDataTable
        Get
            Return Me.tablePurchaseInvoice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPurchaseInvoice = CType(MyBase.Clone,dsPurchaseInvoice)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PurchaseInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInvoiceDataTable(ds.Tables("PurchaseInvoice")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePurchaseInvoice = CType(MyBase.Tables("PurchaseInvoice"),PurchaseInvoiceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePurchaseInvoice) Is Nothing) Then
                Me.tablePurchaseInvoice.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPurchaseInvoice"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPurchaseInvoice.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePurchaseInvoice = New PurchaseInvoiceDataTable
        MyBase.Tables.Add(Me.tablePurchaseInvoice)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePurchaseInvoice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPurchaseInvoice = New dsPurchaseInvoice
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PurchaseInvoiceRowChangeEventHandler(ByVal sender As Object, ByVal e As PurchaseInvoiceRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PurchaseInvoiceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPDate As Global.System.Data.DataColumn
        
        Private columnStaff As Global.System.Data.DataColumn
        
        Private columnCustomer As Global.System.Data.DataColumn
        
        Private columnItemCategoryID As Global.System.Data.DataColumn
        
        Private columnItemCategory As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnLength As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnGoldQualityID As Global.System.Data.DataColumn
        
        Private columnGoldQuality As Global.System.Data.DataColumn
        
        Private columnTotalAmount As Global.System.Data.DataColumn
        
        Private columnPaidAmount As Global.System.Data.DataColumn
        
        Private columnLocationID As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnPurchaseRate As Global.System.Data.DataColumn
        
        Private columnGoldPrice As Global.System.Data.DataColumn
        
        Private columnGemsPrice As Global.System.Data.DataColumn
        
        Private columnGoldTK As Global.System.Data.DataColumn
        
        Private columnGemsTK As Global.System.Data.DataColumn
        
        Private columnGoldK As Global.System.Data.DataColumn
        
        Private columnTotalTK As Global.System.Data.DataColumn
        
        Private columnGoldC As Global.System.Data.DataColumn
        
        Private columnGoldY As Global.System.Data.DataColumn
        
        Private columnGoldP As Global.System.Data.DataColumn
        
        Private columnTotalC As Global.System.Data.DataColumn
        
        Private columnTotalY As Global.System.Data.DataColumn
        
        Private columnTotalP As Global.System.Data.DataColumn
        
        Private columnTotalK As Global.System.Data.DataColumn
        
        Private columnGemsC As Global.System.Data.DataColumn
        
        Private columnGemsY As Global.System.Data.DataColumn
        
        Private columnGemsP As Global.System.Data.DataColumn
        
        Private columnGemsK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PurchaseInvoice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StaffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStaff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQualityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQuality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PurchaseInvoiceRow
            Get
                Return CType(Me.Rows(index),PurchaseInvoiceRow)
            End Get
        End Property
        
        Public Event PurchaseInvoiceRowChanging As PurchaseInvoiceRowChangeEventHandler
        
        Public Event PurchaseInvoiceRowChanged As PurchaseInvoiceRowChangeEventHandler
        
        Public Event PurchaseInvoiceRowDeleting As PurchaseInvoiceRowChangeEventHandler
        
        Public Event PurchaseInvoiceRowDeleted As PurchaseInvoiceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPurchaseInvoiceRow(ByVal row As PurchaseInvoiceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPurchaseInvoiceRow( _
                    ByVal PDate As String,  _
                    ByVal Staff As String,  _
                    ByVal Customer As String,  _
                    ByVal ItemCategoryID As String,  _
                    ByVal ItemCategory As String,  _
                    ByVal ItemName As String,  _
                    ByVal Length As String,  _
                    ByVal Qty As String,  _
                    ByVal GoldQualityID As String,  _
                    ByVal GoldQuality As String,  _
                    ByVal TotalAmount As String,  _
                    ByVal PaidAmount As String,  _
                    ByVal LocationID As String,  _
                    ByVal Location As String,  _
                    ByVal Remark As String,  _
                    ByVal PurchaseRate As String,  _
                    ByVal GoldPrice As String,  _
                    ByVal GemsPrice As String,  _
                    ByVal GoldTK As String,  _
                    ByVal GemsTK As String,  _
                    ByVal GoldK As String,  _
                    ByVal TotalTK As String,  _
                    ByVal GoldC As String,  _
                    ByVal GoldY As String,  _
                    ByVal GoldP As String,  _
                    ByVal TotalC As String,  _
                    ByVal TotalY As String,  _
                    ByVal TotalP As String,  _
                    ByVal TotalK As String,  _
                    ByVal GemsC As String,  _
                    ByVal GemsY As String,  _
                    ByVal GemsP As String,  _
                    ByVal GemsK As String) As PurchaseInvoiceRow
            Dim rowPurchaseInvoiceRow As PurchaseInvoiceRow = CType(Me.NewRow,PurchaseInvoiceRow)
            Dim columnValuesArray() As Object = New Object() {PDate, Staff, Customer, ItemCategoryID, ItemCategory, ItemName, Length, Qty, GoldQualityID, GoldQuality, TotalAmount, PaidAmount, LocationID, Location, Remark, PurchaseRate, GoldPrice, GemsPrice, GoldTK, GemsTK, GoldK, TotalTK, GoldC, GoldY, GoldP, TotalC, TotalY, TotalP, TotalK, GemsC, GemsY, GemsP, GemsK}
            rowPurchaseInvoiceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPurchaseInvoiceRow)
            Return rowPurchaseInvoiceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PurchaseInvoiceDataTable = CType(MyBase.Clone,PurchaseInvoiceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PurchaseInvoiceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPDate = MyBase.Columns("PDate")
            Me.columnStaff = MyBase.Columns("Staff")
            Me.columnCustomer = MyBase.Columns("Customer")
            Me.columnItemCategoryID = MyBase.Columns("ItemCategoryID")
            Me.columnItemCategory = MyBase.Columns("ItemCategory")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnLength = MyBase.Columns("Length")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnGoldQualityID = MyBase.Columns("GoldQualityID")
            Me.columnGoldQuality = MyBase.Columns("GoldQuality")
            Me.columnTotalAmount = MyBase.Columns("TotalAmount")
            Me.columnPaidAmount = MyBase.Columns("PaidAmount")
            Me.columnLocationID = MyBase.Columns("LocationID")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnPurchaseRate = MyBase.Columns("PurchaseRate")
            Me.columnGoldPrice = MyBase.Columns("GoldPrice")
            Me.columnGemsPrice = MyBase.Columns("GemsPrice")
            Me.columnGoldTK = MyBase.Columns("GoldTK")
            Me.columnGemsTK = MyBase.Columns("GemsTK")
            Me.columnGoldK = MyBase.Columns("GoldK")
            Me.columnTotalTK = MyBase.Columns("TotalTK")
            Me.columnGoldC = MyBase.Columns("GoldC")
            Me.columnGoldY = MyBase.Columns("GoldY")
            Me.columnGoldP = MyBase.Columns("GoldP")
            Me.columnTotalC = MyBase.Columns("TotalC")
            Me.columnTotalY = MyBase.Columns("TotalY")
            Me.columnTotalP = MyBase.Columns("TotalP")
            Me.columnTotalK = MyBase.Columns("TotalK")
            Me.columnGemsC = MyBase.Columns("GemsC")
            Me.columnGemsY = MyBase.Columns("GemsY")
            Me.columnGemsP = MyBase.Columns("GemsP")
            Me.columnGemsK = MyBase.Columns("GemsK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPDate = New Global.System.Data.DataColumn("PDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDate)
            Me.columnStaff = New Global.System.Data.DataColumn("Staff", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStaff)
            Me.columnCustomer = New Global.System.Data.DataColumn("Customer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer)
            Me.columnItemCategoryID = New Global.System.Data.DataColumn("ItemCategoryID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategoryID)
            Me.columnItemCategory = New Global.System.Data.DataColumn("ItemCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategory)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnLength = New Global.System.Data.DataColumn("Length", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLength)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnGoldQualityID = New Global.System.Data.DataColumn("GoldQualityID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQualityID)
            Me.columnGoldQuality = New Global.System.Data.DataColumn("GoldQuality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQuality)
            Me.columnTotalAmount = New Global.System.Data.DataColumn("TotalAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalAmount)
            Me.columnPaidAmount = New Global.System.Data.DataColumn("PaidAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidAmount)
            Me.columnLocationID = New Global.System.Data.DataColumn("LocationID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationID)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnPurchaseRate = New Global.System.Data.DataColumn("PurchaseRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseRate)
            Me.columnGoldPrice = New Global.System.Data.DataColumn("GoldPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldPrice)
            Me.columnGemsPrice = New Global.System.Data.DataColumn("GemsPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsPrice)
            Me.columnGoldTK = New Global.System.Data.DataColumn("GoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldTK)
            Me.columnGemsTK = New Global.System.Data.DataColumn("GemsTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsTK)
            Me.columnGoldK = New Global.System.Data.DataColumn("GoldK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldK)
            Me.columnTotalTK = New Global.System.Data.DataColumn("TotalTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTK)
            Me.columnGoldC = New Global.System.Data.DataColumn("GoldC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldC)
            Me.columnGoldY = New Global.System.Data.DataColumn("GoldY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldY)
            Me.columnGoldP = New Global.System.Data.DataColumn("GoldP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldP)
            Me.columnTotalC = New Global.System.Data.DataColumn("TotalC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalC)
            Me.columnTotalY = New Global.System.Data.DataColumn("TotalY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalY)
            Me.columnTotalP = New Global.System.Data.DataColumn("TotalP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalP)
            Me.columnTotalK = New Global.System.Data.DataColumn("TotalK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalK)
            Me.columnGemsC = New Global.System.Data.DataColumn("GemsC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsC)
            Me.columnGemsY = New Global.System.Data.DataColumn("GemsY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsY)
            Me.columnGemsP = New Global.System.Data.DataColumn("GemsP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsP)
            Me.columnGemsK = New Global.System.Data.DataColumn("GemsK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsK)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPurchaseInvoiceRow() As PurchaseInvoiceRow
            Return CType(Me.NewRow,PurchaseInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PurchaseInvoiceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PurchaseInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PurchaseInvoiceRowChangedEvent) Is Nothing) Then
                RaiseEvent PurchaseInvoiceRowChanged(Me, New PurchaseInvoiceRowChangeEvent(CType(e.Row,PurchaseInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PurchaseInvoiceRowChangingEvent) Is Nothing) Then
                RaiseEvent PurchaseInvoiceRowChanging(Me, New PurchaseInvoiceRowChangeEvent(CType(e.Row,PurchaseInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PurchaseInvoiceRowDeletedEvent) Is Nothing) Then
                RaiseEvent PurchaseInvoiceRowDeleted(Me, New PurchaseInvoiceRowChangeEvent(CType(e.Row,PurchaseInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PurchaseInvoiceRowDeletingEvent) Is Nothing) Then
                RaiseEvent PurchaseInvoiceRowDeleting(Me, New PurchaseInvoiceRowChangeEvent(CType(e.Row,PurchaseInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePurchaseInvoiceRow(ByVal row As PurchaseInvoiceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPurchaseInvoice = New dsPurchaseInvoice
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PurchaseInvoiceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PurchaseInvoiceRow
        Inherits Global.System.Data.DataRow
        
        Private tablePurchaseInvoice As PurchaseInvoiceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePurchaseInvoice = CType(Me.Table,PurchaseInvoiceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDate() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.PDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PDate' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.PDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Staff() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.StaffColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Staff' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.StaffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.CustomerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.CustomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategoryID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.ItemCategoryIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategoryID' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.ItemCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.ItemCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategory' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.ItemCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Length() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.LengthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Length' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.LengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQualityID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldQualityIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQualityID' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldQualityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQuality() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldQualityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQuality' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldQualityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.TotalAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalAmount' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.TotalAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.PaidAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidAmount' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.PaidAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.LocationIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationID' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.LocationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseRate() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.PurchaseRateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseRate' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.PurchaseRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldPrice() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldPriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldPrice' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsPrice() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GemsPriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsPrice' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GemsPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldTK' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsTK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GemsTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsTK' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GemsTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldK' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.TotalTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalTK' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.TotalTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldC' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldY' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GoldPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldP' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GoldPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.TotalCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalC' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.TotalCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.TotalYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalY' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.TotalYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.TotalPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalP' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.TotalPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.TotalKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalK' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.TotalKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GemsCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsC' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GemsCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GemsYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsY' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GemsYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GemsPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsP' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GemsPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePurchaseInvoice.GemsKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsK' in table 'PurchaseInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePurchaseInvoice.GemsKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDateNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.PDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDateNull()
            Me(Me.tablePurchaseInvoice.PDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStaffNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.StaffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStaffNull()
            Me(Me.tablePurchaseInvoice.StaffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.CustomerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNull()
            Me(Me.tablePurchaseInvoice.CustomerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.ItemCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryIDNull()
            Me(Me.tablePurchaseInvoice.ItemCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.ItemCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryNull()
            Me(Me.tablePurchaseInvoice.ItemCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tablePurchaseInvoice.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLengthNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.LengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLengthNull()
            Me(Me.tablePurchaseInvoice.LengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tablePurchaseInvoice.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityIDNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldQualityIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityIDNull()
            Me(Me.tablePurchaseInvoice.GoldQualityIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldQualityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityNull()
            Me(Me.tablePurchaseInvoice.GoldQualityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalAmountNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.TotalAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalAmountNull()
            Me(Me.tablePurchaseInvoice.TotalAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidAmountNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.PaidAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidAmountNull()
            Me(Me.tablePurchaseInvoice.PaidAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationIDNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.LocationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationIDNull()
            Me(Me.tablePurchaseInvoice.LocationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tablePurchaseInvoice.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tablePurchaseInvoice.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseRateNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.PurchaseRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseRateNull()
            Me(Me.tablePurchaseInvoice.PurchaseRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldPriceNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldPriceNull()
            Me(Me.tablePurchaseInvoice.GoldPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsPriceNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GemsPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsPriceNull()
            Me(Me.tablePurchaseInvoice.GemsPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldTKNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldTKNull()
            Me(Me.tablePurchaseInvoice.GoldTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsTKNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GemsTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsTKNull()
            Me(Me.tablePurchaseInvoice.GemsTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldKNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldKNull()
            Me(Me.tablePurchaseInvoice.GoldKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalTKNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.TotalTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalTKNull()
            Me(Me.tablePurchaseInvoice.TotalTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldCNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldCNull()
            Me(Me.tablePurchaseInvoice.GoldCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldYNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldYNull()
            Me(Me.tablePurchaseInvoice.GoldYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldPNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GoldPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldPNull()
            Me(Me.tablePurchaseInvoice.GoldPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.TotalCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCNull()
            Me(Me.tablePurchaseInvoice.TotalCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalYNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.TotalYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalYNull()
            Me(Me.tablePurchaseInvoice.TotalYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.TotalPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPNull()
            Me(Me.tablePurchaseInvoice.TotalPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalKNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.TotalKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalKNull()
            Me(Me.tablePurchaseInvoice.TotalKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsCNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GemsCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsCNull()
            Me(Me.tablePurchaseInvoice.GemsCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsYNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GemsYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsYNull()
            Me(Me.tablePurchaseInvoice.GemsYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsPNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GemsPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsPNull()
            Me(Me.tablePurchaseInvoice.GemsPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsKNull() As Boolean
            Return Me.IsNull(Me.tablePurchaseInvoice.GemsKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsKNull()
            Me(Me.tablePurchaseInvoice.GemsKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PurchaseInvoiceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PurchaseInvoiceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PurchaseInvoiceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PurchaseInvoiceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
