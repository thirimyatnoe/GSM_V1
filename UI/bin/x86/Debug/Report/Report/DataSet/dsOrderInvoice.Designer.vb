'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsOrderInvoice"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsOrderInvoice
    Inherits Global.System.Data.DataSet
    
    Private tableOrderInvoice As OrderInvoiceDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OrderInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New OrderInvoiceDataTable(ds.Tables("OrderInvoice")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrderInvoice() As OrderInvoiceDataTable
        Get
            Return Me.tableOrderInvoice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsOrderInvoice = CType(MyBase.Clone,dsOrderInvoice)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OrderInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New OrderInvoiceDataTable(ds.Tables("OrderInvoice")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOrderInvoice = CType(MyBase.Tables("OrderInvoice"),OrderInvoiceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrderInvoice) Is Nothing) Then
                Me.tableOrderInvoice.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsOrderInvoice"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsOrderInvoice.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOrderInvoice = New OrderInvoiceDataTable
        MyBase.Tables.Add(Me.tableOrderInvoice)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOrderInvoice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsOrderInvoice = New dsOrderInvoice
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub OrderInvoiceRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderInvoiceRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OrderInvoiceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOrderDate As Global.System.Data.DataColumn
        
        Private columnOrderInvoiceID As Global.System.Data.DataColumn
        
        Private columnStaff As Global.System.Data.DataColumn
        
        Private columnCustomer As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnForSaleID As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnWidthLength As Global.System.Data.DataColumn
        
        Private columnItemCategory As Global.System.Data.DataColumn
        
        Private columnGoldQuality As Global.System.Data.DataColumn
        
        Private columnOrderRate As Global.System.Data.DataColumn
        
        Private columnPayGoldTK As Global.System.Data.DataColumn
        
        Private columnPayGoldK As Global.System.Data.DataColumn
        
        Private columnPayGoldP As Global.System.Data.DataColumn
        
        Private columnPayGoldY As Global.System.Data.DataColumn
        
        Private columnPayGoldC As Global.System.Data.DataColumn
        
        Private columnEstimateGoldTK As Global.System.Data.DataColumn
        
        Private columnEstimateGoldK As Global.System.Data.DataColumn
        
        Private columnEstimateGoldP As Global.System.Data.DataColumn
        
        Private columnEstimateGoldY As Global.System.Data.DataColumn
        
        Private columnEstimateGoldC As Global.System.Data.DataColumn
        
        Private columnWasteGoldTK As Global.System.Data.DataColumn
        
        Private columnWasteK As Global.System.Data.DataColumn
        
        Private columnWasteP As Global.System.Data.DataColumn
        
        Private columnWasteY As Global.System.Data.DataColumn
        
        Private columnWasteC As Global.System.Data.DataColumn
        
        Private columnReturnGoldTK As Global.System.Data.DataColumn
        
        Private columnReturnGoldY As Global.System.Data.DataColumn
        
        Private columnReturnGoldP As Global.System.Data.DataColumn
        
        Private columnReturnGoldK As Global.System.Data.DataColumn
        
        Private columnGemsTK As Global.System.Data.DataColumn
        
        Private columnGemsK As Global.System.Data.DataColumn
        
        Private columnGemsP As Global.System.Data.DataColumn
        
        Private columnGemsY As Global.System.Data.DataColumn
        
        Private columnGemsC As Global.System.Data.DataColumn
        
        Private columnTotalTK As Global.System.Data.DataColumn
        
        Private columnTotalK As Global.System.Data.DataColumn
        
        Private columnTotalP As Global.System.Data.DataColumn
        
        Private columnTotalY As Global.System.Data.DataColumn
        
        Private columnTotalC As Global.System.Data.DataColumn
        
        Private columnGoldPrice As Global.System.Data.DataColumn
        
        Private columnGemsPrice As Global.System.Data.DataColumn
        
        Private columnDesignCharges As Global.System.Data.DataColumn
        
        Private columnTotalAmount As Global.System.Data.DataColumn
        
        Private columnAddOrSub As Global.System.Data.DataColumn
        
        Private columnAdvanceAmount As Global.System.Data.DataColumn
        
        Private columnPaidAmount As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnRemark15 As Global.System.Data.DataColumn
        
        Private columnRemarkDone As Global.System.Data.DataColumn
        
        Private columnLocationID As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnCounterID As Global.System.Data.DataColumn
        
        Private columnCounter As Global.System.Data.DataColumn
        
        Private columnOrderRetrieveDate As Global.System.Data.DataColumn
        
        Private columnDiscountAmount As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteK As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteP As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteY As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteTK As Global.System.Data.DataColumn
        
        Private columnIsRetrieved As Global.System.Data.DataColumn
        
        Private columnItemCategoryID As Global.System.Data.DataColumn
        
        Private columnGoldQualityID As Global.System.Data.DataColumn
        
        Private columnWidth As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OrderInvoice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderInvoiceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderInvoiceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StaffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStaff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ForSaleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForSaleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WidthLengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWidthLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQuality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayGoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayGoldKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayGoldK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayGoldPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayGoldP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayGoldYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayGoldY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayGoldCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayGoldC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstimateGoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstimateGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstimateGoldKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstimateGoldK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstimateGoldPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstimateGoldP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstimateGoldYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstimateGoldY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstimateGoldCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstimateGoldC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteGoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WastePColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnGoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnGoldYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnGoldY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnGoldPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnGoldP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnGoldKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnGoldK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignChargesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignCharges
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddOrSubColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddOrSub
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdvanceAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdvanceAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Remark15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkDoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarkDone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderRetrieveDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderRetrieveDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscountAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWasteKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWastePColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWasteYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWasteTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsRetrievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsRetrieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQualityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WidthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWidth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderInvoiceRow
            Get
                Return CType(Me.Rows(index),OrderInvoiceRow)
            End Get
        End Property
        
        Public Event OrderInvoiceRowChanging As OrderInvoiceRowChangeEventHandler
        
        Public Event OrderInvoiceRowChanged As OrderInvoiceRowChangeEventHandler
        
        Public Event OrderInvoiceRowDeleting As OrderInvoiceRowChangeEventHandler
        
        Public Event OrderInvoiceRowDeleted As OrderInvoiceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOrderInvoiceRow(ByVal row As OrderInvoiceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOrderInvoiceRow( _
                    ByVal OrderDate As String,  _
                    ByVal OrderInvoiceID As String,  _
                    ByVal Staff As String,  _
                    ByVal Customer As String,  _
                    ByVal Address As String,  _
                    ByVal ForSaleID As String,  _
                    ByVal ItemCode As String,  _
                    ByVal ItemName As String,  _
                    ByVal WidthLength As String,  _
                    ByVal ItemCategory As String,  _
                    ByVal GoldQuality As String,  _
                    ByVal OrderRate As String,  _
                    ByVal PayGoldTK As String,  _
                    ByVal PayGoldK As String,  _
                    ByVal PayGoldP As String,  _
                    ByVal PayGoldY As String,  _
                    ByVal PayGoldC As String,  _
                    ByVal EstimateGoldTK As String,  _
                    ByVal EstimateGoldK As String,  _
                    ByVal EstimateGoldP As String,  _
                    ByVal EstimateGoldY As String,  _
                    ByVal EstimateGoldC As String,  _
                    ByVal WasteGoldTK As String,  _
                    ByVal WasteK As String,  _
                    ByVal WasteP As String,  _
                    ByVal WasteY As String,  _
                    ByVal WasteC As String,  _
                    ByVal ReturnGoldTK As String,  _
                    ByVal ReturnGoldY As String,  _
                    ByVal ReturnGoldP As String,  _
                    ByVal ReturnGoldK As String,  _
                    ByVal GemsTK As String,  _
                    ByVal GemsK As String,  _
                    ByVal GemsP As String,  _
                    ByVal GemsY As String,  _
                    ByVal GemsC As String,  _
                    ByVal TotalTK As String,  _
                    ByVal TotalK As String,  _
                    ByVal TotalP As String,  _
                    ByVal TotalY As String,  _
                    ByVal TotalC As String,  _
                    ByVal GoldPrice As String,  _
                    ByVal GemsPrice As String,  _
                    ByVal DesignCharges As String,  _
                    ByVal TotalAmount As String,  _
                    ByVal AddOrSub As String,  _
                    ByVal AdvanceAmount As String,  _
                    ByVal PaidAmount As String,  _
                    ByVal Remark As String,  _
                    ByVal Remark15 As String,  _
                    ByVal RemarkDone As String,  _
                    ByVal LocationID As String,  _
                    ByVal Location As String,  _
                    ByVal CounterID As String,  _
                    ByVal Counter As String,  _
                    ByVal OrderRetrieveDate As String,  _
                    ByVal DiscountAmount As String,  _
                    ByVal TotalNoWasteK As String,  _
                    ByVal TotalNoWasteP As String,  _
                    ByVal TotalNoWasteY As String,  _
                    ByVal TotalNoWasteTK As String,  _
                    ByVal IsRetrieved As String,  _
                    ByVal ItemCategoryID As String,  _
                    ByVal GoldQualityID As String,  _
                    ByVal Width As String) As OrderInvoiceRow
            Dim rowOrderInvoiceRow As OrderInvoiceRow = CType(Me.NewRow,OrderInvoiceRow)
            Dim columnValuesArray() As Object = New Object() {OrderDate, OrderInvoiceID, Staff, Customer, Address, ForSaleID, ItemCode, ItemName, WidthLength, ItemCategory, GoldQuality, OrderRate, PayGoldTK, PayGoldK, PayGoldP, PayGoldY, PayGoldC, EstimateGoldTK, EstimateGoldK, EstimateGoldP, EstimateGoldY, EstimateGoldC, WasteGoldTK, WasteK, WasteP, WasteY, WasteC, ReturnGoldTK, ReturnGoldY, ReturnGoldP, ReturnGoldK, GemsTK, GemsK, GemsP, GemsY, GemsC, TotalTK, TotalK, TotalP, TotalY, TotalC, GoldPrice, GemsPrice, DesignCharges, TotalAmount, AddOrSub, AdvanceAmount, PaidAmount, Remark, Remark15, RemarkDone, LocationID, Location, CounterID, Counter, OrderRetrieveDate, DiscountAmount, TotalNoWasteK, TotalNoWasteP, TotalNoWasteY, TotalNoWasteTK, IsRetrieved, ItemCategoryID, GoldQualityID, Width}
            rowOrderInvoiceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOrderInvoiceRow)
            Return rowOrderInvoiceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OrderInvoiceDataTable = CType(MyBase.Clone,OrderInvoiceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OrderInvoiceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOrderDate = MyBase.Columns("OrderDate")
            Me.columnOrderInvoiceID = MyBase.Columns("OrderInvoiceID")
            Me.columnStaff = MyBase.Columns("Staff")
            Me.columnCustomer = MyBase.Columns("Customer")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnForSaleID = MyBase.Columns("ForSaleID")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnWidthLength = MyBase.Columns("WidthLength")
            Me.columnItemCategory = MyBase.Columns("ItemCategory")
            Me.columnGoldQuality = MyBase.Columns("GoldQuality")
            Me.columnOrderRate = MyBase.Columns("OrderRate")
            Me.columnPayGoldTK = MyBase.Columns("PayGoldTK")
            Me.columnPayGoldK = MyBase.Columns("PayGoldK")
            Me.columnPayGoldP = MyBase.Columns("PayGoldP")
            Me.columnPayGoldY = MyBase.Columns("PayGoldY")
            Me.columnPayGoldC = MyBase.Columns("PayGoldC")
            Me.columnEstimateGoldTK = MyBase.Columns("EstimateGoldTK")
            Me.columnEstimateGoldK = MyBase.Columns("EstimateGoldK")
            Me.columnEstimateGoldP = MyBase.Columns("EstimateGoldP")
            Me.columnEstimateGoldY = MyBase.Columns("EstimateGoldY")
            Me.columnEstimateGoldC = MyBase.Columns("EstimateGoldC")
            Me.columnWasteGoldTK = MyBase.Columns("WasteGoldTK")
            Me.columnWasteK = MyBase.Columns("WasteK")
            Me.columnWasteP = MyBase.Columns("WasteP")
            Me.columnWasteY = MyBase.Columns("WasteY")
            Me.columnWasteC = MyBase.Columns("WasteC")
            Me.columnReturnGoldTK = MyBase.Columns("ReturnGoldTK")
            Me.columnReturnGoldY = MyBase.Columns("ReturnGoldY")
            Me.columnReturnGoldP = MyBase.Columns("ReturnGoldP")
            Me.columnReturnGoldK = MyBase.Columns("ReturnGoldK")
            Me.columnGemsTK = MyBase.Columns("GemsTK")
            Me.columnGemsK = MyBase.Columns("GemsK")
            Me.columnGemsP = MyBase.Columns("GemsP")
            Me.columnGemsY = MyBase.Columns("GemsY")
            Me.columnGemsC = MyBase.Columns("GemsC")
            Me.columnTotalTK = MyBase.Columns("TotalTK")
            Me.columnTotalK = MyBase.Columns("TotalK")
            Me.columnTotalP = MyBase.Columns("TotalP")
            Me.columnTotalY = MyBase.Columns("TotalY")
            Me.columnTotalC = MyBase.Columns("TotalC")
            Me.columnGoldPrice = MyBase.Columns("GoldPrice")
            Me.columnGemsPrice = MyBase.Columns("GemsPrice")
            Me.columnDesignCharges = MyBase.Columns("DesignCharges")
            Me.columnTotalAmount = MyBase.Columns("TotalAmount")
            Me.columnAddOrSub = MyBase.Columns("AddOrSub")
            Me.columnAdvanceAmount = MyBase.Columns("AdvanceAmount")
            Me.columnPaidAmount = MyBase.Columns("PaidAmount")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnRemark15 = MyBase.Columns("Remark15")
            Me.columnRemarkDone = MyBase.Columns("RemarkDone")
            Me.columnLocationID = MyBase.Columns("LocationID")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnCounterID = MyBase.Columns("CounterID")
            Me.columnCounter = MyBase.Columns("Counter")
            Me.columnOrderRetrieveDate = MyBase.Columns("OrderRetrieveDate")
            Me.columnDiscountAmount = MyBase.Columns("DiscountAmount")
            Me.columnTotalNoWasteK = MyBase.Columns("TotalNoWasteK")
            Me.columnTotalNoWasteP = MyBase.Columns("TotalNoWasteP")
            Me.columnTotalNoWasteY = MyBase.Columns("TotalNoWasteY")
            Me.columnTotalNoWasteTK = MyBase.Columns("TotalNoWasteTK")
            Me.columnIsRetrieved = MyBase.Columns("IsRetrieved")
            Me.columnItemCategoryID = MyBase.Columns("ItemCategoryID")
            Me.columnGoldQualityID = MyBase.Columns("GoldQualityID")
            Me.columnWidth = MyBase.Columns("Width")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOrderDate = New Global.System.Data.DataColumn("OrderDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderDate)
            Me.columnOrderInvoiceID = New Global.System.Data.DataColumn("OrderInvoiceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderInvoiceID)
            Me.columnStaff = New Global.System.Data.DataColumn("Staff", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStaff)
            Me.columnCustomer = New Global.System.Data.DataColumn("Customer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnForSaleID = New Global.System.Data.DataColumn("ForSaleID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForSaleID)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnWidthLength = New Global.System.Data.DataColumn("WidthLength", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWidthLength)
            Me.columnItemCategory = New Global.System.Data.DataColumn("ItemCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategory)
            Me.columnGoldQuality = New Global.System.Data.DataColumn("GoldQuality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQuality)
            Me.columnOrderRate = New Global.System.Data.DataColumn("OrderRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderRate)
            Me.columnPayGoldTK = New Global.System.Data.DataColumn("PayGoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayGoldTK)
            Me.columnPayGoldK = New Global.System.Data.DataColumn("PayGoldK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayGoldK)
            Me.columnPayGoldP = New Global.System.Data.DataColumn("PayGoldP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayGoldP)
            Me.columnPayGoldY = New Global.System.Data.DataColumn("PayGoldY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayGoldY)
            Me.columnPayGoldC = New Global.System.Data.DataColumn("PayGoldC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayGoldC)
            Me.columnEstimateGoldTK = New Global.System.Data.DataColumn("EstimateGoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstimateGoldTK)
            Me.columnEstimateGoldK = New Global.System.Data.DataColumn("EstimateGoldK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstimateGoldK)
            Me.columnEstimateGoldP = New Global.System.Data.DataColumn("EstimateGoldP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstimateGoldP)
            Me.columnEstimateGoldY = New Global.System.Data.DataColumn("EstimateGoldY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstimateGoldY)
            Me.columnEstimateGoldC = New Global.System.Data.DataColumn("EstimateGoldC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstimateGoldC)
            Me.columnWasteGoldTK = New Global.System.Data.DataColumn("WasteGoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteGoldTK)
            Me.columnWasteK = New Global.System.Data.DataColumn("WasteK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteK)
            Me.columnWasteP = New Global.System.Data.DataColumn("WasteP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteP)
            Me.columnWasteY = New Global.System.Data.DataColumn("WasteY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteY)
            Me.columnWasteC = New Global.System.Data.DataColumn("WasteC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteC)
            Me.columnReturnGoldTK = New Global.System.Data.DataColumn("ReturnGoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnGoldTK)
            Me.columnReturnGoldY = New Global.System.Data.DataColumn("ReturnGoldY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnGoldY)
            Me.columnReturnGoldP = New Global.System.Data.DataColumn("ReturnGoldP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnGoldP)
            Me.columnReturnGoldK = New Global.System.Data.DataColumn("ReturnGoldK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnGoldK)
            Me.columnGemsTK = New Global.System.Data.DataColumn("GemsTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsTK)
            Me.columnGemsK = New Global.System.Data.DataColumn("GemsK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsK)
            Me.columnGemsP = New Global.System.Data.DataColumn("GemsP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsP)
            Me.columnGemsY = New Global.System.Data.DataColumn("GemsY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsY)
            Me.columnGemsC = New Global.System.Data.DataColumn("GemsC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsC)
            Me.columnTotalTK = New Global.System.Data.DataColumn("TotalTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTK)
            Me.columnTotalK = New Global.System.Data.DataColumn("TotalK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalK)
            Me.columnTotalP = New Global.System.Data.DataColumn("TotalP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalP)
            Me.columnTotalY = New Global.System.Data.DataColumn("TotalY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalY)
            Me.columnTotalC = New Global.System.Data.DataColumn("TotalC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalC)
            Me.columnGoldPrice = New Global.System.Data.DataColumn("GoldPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldPrice)
            Me.columnGemsPrice = New Global.System.Data.DataColumn("GemsPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsPrice)
            Me.columnDesignCharges = New Global.System.Data.DataColumn("DesignCharges", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignCharges)
            Me.columnTotalAmount = New Global.System.Data.DataColumn("TotalAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalAmount)
            Me.columnAddOrSub = New Global.System.Data.DataColumn("AddOrSub", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddOrSub)
            Me.columnAdvanceAmount = New Global.System.Data.DataColumn("AdvanceAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdvanceAmount)
            Me.columnPaidAmount = New Global.System.Data.DataColumn("PaidAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidAmount)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnRemark15 = New Global.System.Data.DataColumn("Remark15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark15)
            Me.columnRemarkDone = New Global.System.Data.DataColumn("RemarkDone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarkDone)
            Me.columnLocationID = New Global.System.Data.DataColumn("LocationID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationID)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnCounterID = New Global.System.Data.DataColumn("CounterID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterID)
            Me.columnCounter = New Global.System.Data.DataColumn("Counter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounter)
            Me.columnOrderRetrieveDate = New Global.System.Data.DataColumn("OrderRetrieveDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderRetrieveDate)
            Me.columnDiscountAmount = New Global.System.Data.DataColumn("DiscountAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscountAmount)
            Me.columnTotalNoWasteK = New Global.System.Data.DataColumn("TotalNoWasteK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteK)
            Me.columnTotalNoWasteP = New Global.System.Data.DataColumn("TotalNoWasteP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteP)
            Me.columnTotalNoWasteY = New Global.System.Data.DataColumn("TotalNoWasteY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteY)
            Me.columnTotalNoWasteTK = New Global.System.Data.DataColumn("TotalNoWasteTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteTK)
            Me.columnIsRetrieved = New Global.System.Data.DataColumn("IsRetrieved", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsRetrieved)
            Me.columnItemCategoryID = New Global.System.Data.DataColumn("ItemCategoryID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategoryID)
            Me.columnGoldQualityID = New Global.System.Data.DataColumn("GoldQualityID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQualityID)
            Me.columnWidth = New Global.System.Data.DataColumn("Width", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWidth)
            Me.columnOrderDate.Caption = "Column1"
            Me.columnOrderInvoiceID.Caption = "Column1"
            Me.columnStaff.Caption = "Column1"
            Me.columnCustomer.Caption = "Column1"
            Me.columnItemName.Caption = "Column1"
            Me.columnWidthLength.Caption = "Column1"
            Me.columnItemCategory.Caption = "Column1"
            Me.columnGoldQuality.Caption = "Column1"
            Me.columnOrderRate.Caption = "Column1"
            Me.columnPayGoldTK.Caption = "Column1"
            Me.columnPayGoldK.Caption = "Column1"
            Me.columnPayGoldP.Caption = "Column1"
            Me.columnPayGoldY.Caption = "Column1"
            Me.columnPayGoldC.Caption = "Column1"
            Me.columnEstimateGoldTK.Caption = "Column1"
            Me.columnEstimateGoldK.Caption = "Column1"
            Me.columnEstimateGoldP.Caption = "Column1"
            Me.columnEstimateGoldY.Caption = "Column1"
            Me.columnEstimateGoldC.Caption = "Column1"
            Me.columnWasteGoldTK.Caption = "Column1"
            Me.columnWasteK.Caption = "Column1"
            Me.columnWasteP.Caption = "Column1"
            Me.columnWasteY.Caption = "Column1"
            Me.columnWasteC.Caption = "Column1"
            Me.columnReturnGoldTK.Caption = "Column1"
            Me.columnReturnGoldY.Caption = "Column1"
            Me.columnReturnGoldP.Caption = "Column1"
            Me.columnReturnGoldK.Caption = "Column1"
            Me.columnGemsTK.Caption = "Column1"
            Me.columnGemsK.Caption = "Column1"
            Me.columnGemsP.Caption = "Column1"
            Me.columnGemsY.Caption = "Column1"
            Me.columnTotalTK.Caption = "Column1"
            Me.columnTotalK.Caption = "Column1"
            Me.columnTotalP.Caption = "Column1"
            Me.columnTotalY.Caption = "Column1"
            Me.columnTotalC.Caption = "Column1"
            Me.columnGoldPrice.Caption = "Column1"
            Me.columnGemsPrice.Caption = "Column1"
            Me.columnDesignCharges.Caption = "Column1"
            Me.columnTotalAmount.Caption = "Column1"
            Me.columnAddOrSub.Caption = "Column1"
            Me.columnRemark.Caption = "PaidAmount"
            Me.columnLocation.Caption = "OrderRetrieveDate"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOrderInvoiceRow() As OrderInvoiceRow
            Return CType(Me.NewRow,OrderInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OrderInvoiceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OrderInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderInvoiceRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderInvoiceRowChanged(Me, New OrderInvoiceRowChangeEvent(CType(e.Row,OrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderInvoiceRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderInvoiceRowChanging(Me, New OrderInvoiceRowChangeEvent(CType(e.Row,OrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderInvoiceRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderInvoiceRowDeleted(Me, New OrderInvoiceRowChangeEvent(CType(e.Row,OrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderInvoiceRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderInvoiceRowDeleting(Me, New OrderInvoiceRowChangeEvent(CType(e.Row,OrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOrderInvoiceRow(ByVal row As OrderInvoiceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrderInvoice = New dsOrderInvoice
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderInvoiceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrderInvoiceRow
        Inherits Global.System.Data.DataRow
        
        Private tableOrderInvoice As OrderInvoiceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrderInvoice = CType(Me.Table,OrderInvoiceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.OrderDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderDate' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.OrderDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderInvoiceID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.OrderInvoiceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderInvoiceID' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.OrderInvoiceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Staff() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.StaffColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Staff' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.StaffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.CustomerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.CustomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ForSaleID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ForSaleIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForSaleID' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ForSaleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WidthLength() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.WidthLengthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WidthLength' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.WidthLengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ItemCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategory' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ItemCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQuality() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GoldQualityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQuality' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GoldQualityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderRate() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.OrderRateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderRate' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.OrderRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayGoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.PayGoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayGoldTK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.PayGoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayGoldK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.PayGoldKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayGoldK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.PayGoldKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayGoldP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.PayGoldPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayGoldP' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.PayGoldPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayGoldY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.PayGoldYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayGoldY' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.PayGoldYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayGoldC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.PayGoldCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayGoldC' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.PayGoldCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstimateGoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.EstimateGoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstimateGoldTK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.EstimateGoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstimateGoldK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.EstimateGoldKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstimateGoldK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.EstimateGoldKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstimateGoldP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.EstimateGoldPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstimateGoldP' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.EstimateGoldPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstimateGoldY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.EstimateGoldYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstimateGoldY' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.EstimateGoldYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstimateGoldC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.EstimateGoldCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstimateGoldC' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.EstimateGoldCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteGoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.WasteGoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteGoldTK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.WasteGoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.WasteKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.WasteKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.WastePColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteP' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.WastePColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.WasteYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteY' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.WasteYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.WasteCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteC' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.WasteCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnGoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ReturnGoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnGoldTK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ReturnGoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnGoldY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ReturnGoldYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnGoldY' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ReturnGoldYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnGoldP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ReturnGoldPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnGoldP' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ReturnGoldPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnGoldK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ReturnGoldKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnGoldK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ReturnGoldKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GemsTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsTK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GemsTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GemsKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GemsKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GemsPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsP' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GemsPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GemsYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsY' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GemsYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GemsCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsC' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GemsCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalTK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalP' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalY' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalC' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldPrice() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GoldPriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldPrice' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GoldPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsPrice() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GemsPriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsPrice' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GemsPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesignCharges() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.DesignChargesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DesignCharges' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.DesignChargesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalAmount' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddOrSub() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.AddOrSubColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddOrSub' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.AddOrSubColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdvanceAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.AdvanceAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdvanceAmount' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.AdvanceAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.PaidAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidAmount' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.PaidAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark15() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.Remark15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark15' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.Remark15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RemarkDone() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.RemarkDoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RemarkDone' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.RemarkDoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.LocationIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationID' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.LocationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.CounterIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterID' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.CounterIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Counter() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.CounterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counter' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.CounterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderRetrieveDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.OrderRetrieveDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderRetrieveDate' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.OrderRetrieveDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscountAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.DiscountAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiscountAmount' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.DiscountAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalNoWasteKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalNoWasteKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalNoWastePColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteP' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalNoWastePColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteY() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalNoWasteYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteY' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalNoWasteYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.TotalNoWasteTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteTK' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.TotalNoWasteTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsRetrieved() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.IsRetrievedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsRetrieved' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.IsRetrievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategoryID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.ItemCategoryIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategoryID' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.ItemCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQualityID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.GoldQualityIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQualityID' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.GoldQualityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Width() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderInvoice.WidthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Width' in table 'OrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderInvoice.WidthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.OrderDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderDateNull()
            Me(Me.tableOrderInvoice.OrderDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderInvoiceIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.OrderInvoiceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderInvoiceIDNull()
            Me(Me.tableOrderInvoice.OrderInvoiceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStaffNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.StaffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStaffNull()
            Me(Me.tableOrderInvoice.StaffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.CustomerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNull()
            Me(Me.tableOrderInvoice.CustomerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableOrderInvoice.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsForSaleIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ForSaleIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetForSaleIDNull()
            Me(Me.tableOrderInvoice.ForSaleIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableOrderInvoice.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableOrderInvoice.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWidthLengthNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.WidthLengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWidthLengthNull()
            Me(Me.tableOrderInvoice.WidthLengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ItemCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryNull()
            Me(Me.tableOrderInvoice.ItemCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GoldQualityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityNull()
            Me(Me.tableOrderInvoice.GoldQualityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderRateNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.OrderRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderRateNull()
            Me(Me.tableOrderInvoice.OrderRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayGoldTKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.PayGoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayGoldTKNull()
            Me(Me.tableOrderInvoice.PayGoldTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayGoldKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.PayGoldKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayGoldKNull()
            Me(Me.tableOrderInvoice.PayGoldKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayGoldPNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.PayGoldPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayGoldPNull()
            Me(Me.tableOrderInvoice.PayGoldPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayGoldYNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.PayGoldYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayGoldYNull()
            Me(Me.tableOrderInvoice.PayGoldYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayGoldCNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.PayGoldCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayGoldCNull()
            Me(Me.tableOrderInvoice.PayGoldCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstimateGoldTKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.EstimateGoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstimateGoldTKNull()
            Me(Me.tableOrderInvoice.EstimateGoldTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstimateGoldKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.EstimateGoldKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstimateGoldKNull()
            Me(Me.tableOrderInvoice.EstimateGoldKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstimateGoldPNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.EstimateGoldPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstimateGoldPNull()
            Me(Me.tableOrderInvoice.EstimateGoldPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstimateGoldYNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.EstimateGoldYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstimateGoldYNull()
            Me(Me.tableOrderInvoice.EstimateGoldYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstimateGoldCNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.EstimateGoldCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstimateGoldCNull()
            Me(Me.tableOrderInvoice.EstimateGoldCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteGoldTKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.WasteGoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteGoldTKNull()
            Me(Me.tableOrderInvoice.WasteGoldTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.WasteKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteKNull()
            Me(Me.tableOrderInvoice.WasteKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWastePNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.WastePColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWastePNull()
            Me(Me.tableOrderInvoice.WastePColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteYNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.WasteYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteYNull()
            Me(Me.tableOrderInvoice.WasteYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteCNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.WasteCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteCNull()
            Me(Me.tableOrderInvoice.WasteCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnGoldTKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ReturnGoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnGoldTKNull()
            Me(Me.tableOrderInvoice.ReturnGoldTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnGoldYNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ReturnGoldYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnGoldYNull()
            Me(Me.tableOrderInvoice.ReturnGoldYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnGoldPNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ReturnGoldPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnGoldPNull()
            Me(Me.tableOrderInvoice.ReturnGoldPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnGoldKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ReturnGoldKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnGoldKNull()
            Me(Me.tableOrderInvoice.ReturnGoldKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsTKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GemsTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsTKNull()
            Me(Me.tableOrderInvoice.GemsTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GemsKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsKNull()
            Me(Me.tableOrderInvoice.GemsKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsPNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GemsPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsPNull()
            Me(Me.tableOrderInvoice.GemsPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsYNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GemsYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsYNull()
            Me(Me.tableOrderInvoice.GemsYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsCNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GemsCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsCNull()
            Me(Me.tableOrderInvoice.GemsCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalTKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalTKNull()
            Me(Me.tableOrderInvoice.TotalTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalKNull()
            Me(Me.tableOrderInvoice.TotalKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPNull()
            Me(Me.tableOrderInvoice.TotalPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalYNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalYNull()
            Me(Me.tableOrderInvoice.TotalYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCNull()
            Me(Me.tableOrderInvoice.TotalCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldPriceNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GoldPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldPriceNull()
            Me(Me.tableOrderInvoice.GoldPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsPriceNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GemsPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsPriceNull()
            Me(Me.tableOrderInvoice.GemsPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesignChargesNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.DesignChargesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesignChargesNull()
            Me(Me.tableOrderInvoice.DesignChargesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalAmountNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalAmountNull()
            Me(Me.tableOrderInvoice.TotalAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddOrSubNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.AddOrSubColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddOrSubNull()
            Me(Me.tableOrderInvoice.AddOrSubColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdvanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.AdvanceAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdvanceAmountNull()
            Me(Me.tableOrderInvoice.AdvanceAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidAmountNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.PaidAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidAmountNull()
            Me(Me.tableOrderInvoice.PaidAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tableOrderInvoice.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemark15Null() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.Remark15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemark15Null()
            Me(Me.tableOrderInvoice.Remark15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkDoneNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.RemarkDoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkDoneNull()
            Me(Me.tableOrderInvoice.RemarkDoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.LocationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationIDNull()
            Me(Me.tableOrderInvoice.LocationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tableOrderInvoice.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.CounterIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterIDNull()
            Me(Me.tableOrderInvoice.CounterIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.CounterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterNull()
            Me(Me.tableOrderInvoice.CounterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderRetrieveDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.OrderRetrieveDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderRetrieveDateNull()
            Me(Me.tableOrderInvoice.OrderRetrieveDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountAmountNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.DiscountAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountAmountNull()
            Me(Me.tableOrderInvoice.DiscountAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWasteKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalNoWasteKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWasteKNull()
            Me(Me.tableOrderInvoice.TotalNoWasteKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWastePNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalNoWastePColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWastePNull()
            Me(Me.tableOrderInvoice.TotalNoWastePColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWasteYNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalNoWasteYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWasteYNull()
            Me(Me.tableOrderInvoice.TotalNoWasteYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWasteTKNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.TotalNoWasteTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWasteTKNull()
            Me(Me.tableOrderInvoice.TotalNoWasteTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsRetrievedNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.IsRetrievedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsRetrievedNull()
            Me(Me.tableOrderInvoice.IsRetrievedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.ItemCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryIDNull()
            Me(Me.tableOrderInvoice.ItemCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.GoldQualityIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityIDNull()
            Me(Me.tableOrderInvoice.GoldQualityIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWidthNull() As Boolean
            Return Me.IsNull(Me.tableOrderInvoice.WidthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWidthNull()
            Me(Me.tableOrderInvoice.WidthColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrderInvoiceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OrderInvoiceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrderInvoiceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrderInvoiceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
