'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsDamage"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsDamage
    Inherits Global.System.Data.DataSet
    
    Private tableDamage As DamageDataTable
    
    Private tableDamageDivide As DamageDivideDataTable
    
    Private tableDamageDivideHeader As DamageDivideHeaderDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Damage")) Is Nothing) Then
                MyBase.Tables.Add(New DamageDataTable(ds.Tables("Damage")))
            End If
            If (Not (ds.Tables("DamageDivide")) Is Nothing) Then
                MyBase.Tables.Add(New DamageDivideDataTable(ds.Tables("DamageDivide")))
            End If
            If (Not (ds.Tables("DamageDivideHeader")) Is Nothing) Then
                MyBase.Tables.Add(New DamageDivideHeaderDataTable(ds.Tables("DamageDivideHeader")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Damage() As DamageDataTable
        Get
            Return Me.tableDamage
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DamageDivide() As DamageDivideDataTable
        Get
            Return Me.tableDamageDivide
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DamageDivideHeader() As DamageDivideHeaderDataTable
        Get
            Return Me.tableDamageDivideHeader
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsDamage = CType(MyBase.Clone,dsDamage)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Damage")) Is Nothing) Then
                MyBase.Tables.Add(New DamageDataTable(ds.Tables("Damage")))
            End If
            If (Not (ds.Tables("DamageDivide")) Is Nothing) Then
                MyBase.Tables.Add(New DamageDivideDataTable(ds.Tables("DamageDivide")))
            End If
            If (Not (ds.Tables("DamageDivideHeader")) Is Nothing) Then
                MyBase.Tables.Add(New DamageDivideHeaderDataTable(ds.Tables("DamageDivideHeader")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDamage = CType(MyBase.Tables("Damage"),DamageDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDamage) Is Nothing) Then
                Me.tableDamage.InitVars
            End If
        End If
        Me.tableDamageDivide = CType(MyBase.Tables("DamageDivide"),DamageDivideDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDamageDivide) Is Nothing) Then
                Me.tableDamageDivide.InitVars
            End If
        End If
        Me.tableDamageDivideHeader = CType(MyBase.Tables("DamageDivideHeader"),DamageDivideHeaderDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDamageDivideHeader) Is Nothing) Then
                Me.tableDamageDivideHeader.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsDamage"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsDamage.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDamage = New DamageDataTable
        MyBase.Tables.Add(Me.tableDamage)
        Me.tableDamageDivide = New DamageDivideDataTable
        MyBase.Tables.Add(Me.tableDamageDivide)
        Me.tableDamageDivideHeader = New DamageDivideHeaderDataTable
        MyBase.Tables.Add(Me.tableDamageDivideHeader)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDamage() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDamageDivide() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDamageDivideHeader() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsDamage = New dsDamage
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DamageRowChangeEventHandler(ByVal sender As Object, ByVal e As DamageRowChangeEvent)
    
    Public Delegate Sub DamageDivideRowChangeEventHandler(ByVal sender As Object, ByVal e As DamageDivideRowChangeEvent)
    
    Public Delegate Sub DamageDivideHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As DamageDivideHeaderRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DamageDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDDate As Global.System.Data.DataColumn
        
        Private columnLocationID As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnCounterID As Global.System.Data.DataColumn
        
        Private columnCounter As Global.System.Data.DataColumn
        
        Private columnGoldQualityID As Global.System.Data.DataColumn
        
        Private columnGoldQuality As Global.System.Data.DataColumn
        
        Private columnItemCategoryID As Global.System.Data.DataColumn
        
        Private columnItemCategory As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnGoldK As Global.System.Data.DataColumn
        
        Private columnGoldP As Global.System.Data.DataColumn
        
        Private columnGoldY As Global.System.Data.DataColumn
        
        Private columnGoldTK As Global.System.Data.DataColumn
        
        Private columnGemsK As Global.System.Data.DataColumn
        
        Private columnGemsP As Global.System.Data.DataColumn
        
        Private columnGemsY As Global.System.Data.DataColumn
        
        Private columnGemsTK As Global.System.Data.DataColumn
        
        Private columnWasteK As Global.System.Data.DataColumn
        
        Private columnWasteP As Global.System.Data.DataColumn
        
        Private columnWasteY As Global.System.Data.DataColumn
        
        Private columnWasteTK As Global.System.Data.DataColumn
        
        Private columnTotalK As Global.System.Data.DataColumn
        
        Private columnTotalP As Global.System.Data.DataColumn
        
        Private columnTotalY As Global.System.Data.DataColumn
        
        Private columnTotalTK As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnLength As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnWidth As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Damage"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQualityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQuality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WastePColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WidthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWidth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DamageRow
            Get
                Return CType(Me.Rows(index),DamageRow)
            End Get
        End Property
        
        Public Event DamageRowChanging As DamageRowChangeEventHandler
        
        Public Event DamageRowChanged As DamageRowChangeEventHandler
        
        Public Event DamageRowDeleting As DamageRowChangeEventHandler
        
        Public Event DamageRowDeleted As DamageRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDamageRow(ByVal row As DamageRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDamageRow( _
                    ByVal DDate As String,  _
                    ByVal LocationID As String,  _
                    ByVal Location As String,  _
                    ByVal CounterID As String,  _
                    ByVal Counter As String,  _
                    ByVal GoldQualityID As String,  _
                    ByVal GoldQuality As String,  _
                    ByVal ItemCategoryID As String,  _
                    ByVal ItemCategory As String,  _
                    ByVal ItemName As String,  _
                    ByVal GoldK As String,  _
                    ByVal GoldP As String,  _
                    ByVal GoldY As String,  _
                    ByVal GoldTK As String,  _
                    ByVal GemsK As String,  _
                    ByVal GemsP As String,  _
                    ByVal GemsY As String,  _
                    ByVal GemsTK As String,  _
                    ByVal WasteK As String,  _
                    ByVal WasteP As String,  _
                    ByVal WasteY As String,  _
                    ByVal WasteTK As String,  _
                    ByVal TotalK As String,  _
                    ByVal TotalP As String,  _
                    ByVal TotalY As String,  _
                    ByVal TotalTK As String,  _
                    ByVal ItemCode As String,  _
                    ByVal Length As String,  _
                    ByVal Remark As String,  _
                    ByVal Width As String) As DamageRow
            Dim rowDamageRow As DamageRow = CType(Me.NewRow,DamageRow)
            Dim columnValuesArray() As Object = New Object() {DDate, LocationID, Location, CounterID, Counter, GoldQualityID, GoldQuality, ItemCategoryID, ItemCategory, ItemName, GoldK, GoldP, GoldY, GoldTK, GemsK, GemsP, GemsY, GemsTK, WasteK, WasteP, WasteY, WasteTK, TotalK, TotalP, TotalY, TotalTK, ItemCode, Length, Remark, Width}
            rowDamageRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDamageRow)
            Return rowDamageRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DamageDataTable = CType(MyBase.Clone,DamageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DamageDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDDate = MyBase.Columns("DDate")
            Me.columnLocationID = MyBase.Columns("LocationID")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnCounterID = MyBase.Columns("CounterID")
            Me.columnCounter = MyBase.Columns("Counter")
            Me.columnGoldQualityID = MyBase.Columns("GoldQualityID")
            Me.columnGoldQuality = MyBase.Columns("GoldQuality")
            Me.columnItemCategoryID = MyBase.Columns("ItemCategoryID")
            Me.columnItemCategory = MyBase.Columns("ItemCategory")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnGoldK = MyBase.Columns("GoldK")
            Me.columnGoldP = MyBase.Columns("GoldP")
            Me.columnGoldY = MyBase.Columns("GoldY")
            Me.columnGoldTK = MyBase.Columns("GoldTK")
            Me.columnGemsK = MyBase.Columns("GemsK")
            Me.columnGemsP = MyBase.Columns("GemsP")
            Me.columnGemsY = MyBase.Columns("GemsY")
            Me.columnGemsTK = MyBase.Columns("GemsTK")
            Me.columnWasteK = MyBase.Columns("WasteK")
            Me.columnWasteP = MyBase.Columns("WasteP")
            Me.columnWasteY = MyBase.Columns("WasteY")
            Me.columnWasteTK = MyBase.Columns("WasteTK")
            Me.columnTotalK = MyBase.Columns("TotalK")
            Me.columnTotalP = MyBase.Columns("TotalP")
            Me.columnTotalY = MyBase.Columns("TotalY")
            Me.columnTotalTK = MyBase.Columns("TotalTK")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnLength = MyBase.Columns("Length")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnWidth = MyBase.Columns("Width")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDDate = New Global.System.Data.DataColumn("DDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDate)
            Me.columnLocationID = New Global.System.Data.DataColumn("LocationID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationID)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnCounterID = New Global.System.Data.DataColumn("CounterID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterID)
            Me.columnCounter = New Global.System.Data.DataColumn("Counter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounter)
            Me.columnGoldQualityID = New Global.System.Data.DataColumn("GoldQualityID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQualityID)
            Me.columnGoldQuality = New Global.System.Data.DataColumn("GoldQuality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQuality)
            Me.columnItemCategoryID = New Global.System.Data.DataColumn("ItemCategoryID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategoryID)
            Me.columnItemCategory = New Global.System.Data.DataColumn("ItemCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategory)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnGoldK = New Global.System.Data.DataColumn("GoldK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldK)
            Me.columnGoldP = New Global.System.Data.DataColumn("GoldP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldP)
            Me.columnGoldY = New Global.System.Data.DataColumn("GoldY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldY)
            Me.columnGoldTK = New Global.System.Data.DataColumn("GoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldTK)
            Me.columnGemsK = New Global.System.Data.DataColumn("GemsK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsK)
            Me.columnGemsP = New Global.System.Data.DataColumn("GemsP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsP)
            Me.columnGemsY = New Global.System.Data.DataColumn("GemsY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsY)
            Me.columnGemsTK = New Global.System.Data.DataColumn("GemsTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsTK)
            Me.columnWasteK = New Global.System.Data.DataColumn("WasteK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteK)
            Me.columnWasteP = New Global.System.Data.DataColumn("WasteP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteP)
            Me.columnWasteY = New Global.System.Data.DataColumn("WasteY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteY)
            Me.columnWasteTK = New Global.System.Data.DataColumn("WasteTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteTK)
            Me.columnTotalK = New Global.System.Data.DataColumn("TotalK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalK)
            Me.columnTotalP = New Global.System.Data.DataColumn("TotalP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalP)
            Me.columnTotalY = New Global.System.Data.DataColumn("TotalY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalY)
            Me.columnTotalTK = New Global.System.Data.DataColumn("TotalTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTK)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnLength = New Global.System.Data.DataColumn("Length", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLength)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnWidth = New Global.System.Data.DataColumn("Width", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWidth)
            Me.columnGoldK.Caption = "TotalK"
            Me.columnGoldP.Caption = "TotalTK"
            Me.columnGoldY.Caption = "TotalC"
            Me.columnGoldTK.Caption = "TotalY"
            Me.columnGemsK.Caption = "TotalP"
            Me.columnGemsP.Caption = "TotalK"
            Me.columnGemsY.Caption = "TotalTK"
            Me.columnGemsTK.Caption = "TotalC"
            Me.columnWasteK.Caption = "TotalY"
            Me.columnWasteP.Caption = "TotalP"
            Me.columnWasteY.Caption = "TotalK"
            Me.columnWasteTK.Caption = "TotalTK"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDamageRow() As DamageRow
            Return CType(Me.NewRow,DamageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DamageRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DamageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DamageRowChangedEvent) Is Nothing) Then
                RaiseEvent DamageRowChanged(Me, New DamageRowChangeEvent(CType(e.Row,DamageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DamageRowChangingEvent) Is Nothing) Then
                RaiseEvent DamageRowChanging(Me, New DamageRowChangeEvent(CType(e.Row,DamageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DamageRowDeletedEvent) Is Nothing) Then
                RaiseEvent DamageRowDeleted(Me, New DamageRowChangeEvent(CType(e.Row,DamageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DamageRowDeletingEvent) Is Nothing) Then
                RaiseEvent DamageRowDeleting(Me, New DamageRowChangeEvent(CType(e.Row,DamageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDamageRow(ByVal row As DamageRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsDamage = New dsDamage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DamageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DamageDivideDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDamageDivideID As Global.System.Data.DataColumn
        
        Private columnDivideDate As Global.System.Data.DataColumn
        
        Private columnDamageDate As Global.System.Data.DataColumn
        
        Private columnGoldQualityID As Global.System.Data.DataColumn
        
        Private columnGoldQuality As Global.System.Data.DataColumn
        
        Private columnItemCategoryID As Global.System.Data.DataColumn
        
        Private columnItemCategory As Global.System.Data.DataColumn
        
        Private columnTotalQTY As Global.System.Data.DataColumn
        
        Private columnTotalTK As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnDivideType As Global.System.Data.DataColumn
        
        Private columnGoldTK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DamageDivide"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DamageDivideIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDamageDivideID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivideDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivideDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DamageDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDamageDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQualityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQuality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivideTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivideType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DamageDivideRow
            Get
                Return CType(Me.Rows(index),DamageDivideRow)
            End Get
        End Property
        
        Public Event DamageDivideRowChanging As DamageDivideRowChangeEventHandler
        
        Public Event DamageDivideRowChanged As DamageDivideRowChangeEventHandler
        
        Public Event DamageDivideRowDeleting As DamageDivideRowChangeEventHandler
        
        Public Event DamageDivideRowDeleted As DamageDivideRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDamageDivideRow(ByVal row As DamageDivideRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDamageDivideRow(ByVal DamageDivideID As String, ByVal DivideDate As String, ByVal DamageDate As String, ByVal GoldQualityID As String, ByVal GoldQuality As String, ByVal ItemCategoryID As String, ByVal ItemCategory As String, ByVal TotalQTY As String, ByVal TotalTK As String, ByVal Qty As String, ByVal DivideType As String, ByVal GoldTK As String) As DamageDivideRow
            Dim rowDamageDivideRow As DamageDivideRow = CType(Me.NewRow,DamageDivideRow)
            Dim columnValuesArray() As Object = New Object() {DamageDivideID, DivideDate, DamageDate, GoldQualityID, GoldQuality, ItemCategoryID, ItemCategory, TotalQTY, TotalTK, Qty, DivideType, GoldTK}
            rowDamageDivideRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDamageDivideRow)
            Return rowDamageDivideRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DamageDivideDataTable = CType(MyBase.Clone,DamageDivideDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DamageDivideDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDamageDivideID = MyBase.Columns("DamageDivideID")
            Me.columnDivideDate = MyBase.Columns("DivideDate")
            Me.columnDamageDate = MyBase.Columns("DamageDate")
            Me.columnGoldQualityID = MyBase.Columns("GoldQualityID")
            Me.columnGoldQuality = MyBase.Columns("GoldQuality")
            Me.columnItemCategoryID = MyBase.Columns("ItemCategoryID")
            Me.columnItemCategory = MyBase.Columns("ItemCategory")
            Me.columnTotalQTY = MyBase.Columns("TotalQTY")
            Me.columnTotalTK = MyBase.Columns("TotalTK")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnDivideType = MyBase.Columns("DivideType")
            Me.columnGoldTK = MyBase.Columns("GoldTK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDamageDivideID = New Global.System.Data.DataColumn("DamageDivideID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDamageDivideID)
            Me.columnDivideDate = New Global.System.Data.DataColumn("DivideDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivideDate)
            Me.columnDamageDate = New Global.System.Data.DataColumn("DamageDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDamageDate)
            Me.columnGoldQualityID = New Global.System.Data.DataColumn("GoldQualityID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQualityID)
            Me.columnGoldQuality = New Global.System.Data.DataColumn("GoldQuality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQuality)
            Me.columnItemCategoryID = New Global.System.Data.DataColumn("ItemCategoryID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategoryID)
            Me.columnItemCategory = New Global.System.Data.DataColumn("ItemCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategory)
            Me.columnTotalQTY = New Global.System.Data.DataColumn("TotalQTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalQTY)
            Me.columnTotalTK = New Global.System.Data.DataColumn("TotalTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTK)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnDivideType = New Global.System.Data.DataColumn("DivideType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivideType)
            Me.columnGoldTK = New Global.System.Data.DataColumn("GoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldTK)
            Me.columnDamageDivideID.Caption = "PurchaseDivideID"
            Me.columnDamageDate.Caption = "PurchaseDate"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDamageDivideRow() As DamageDivideRow
            Return CType(Me.NewRow,DamageDivideRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DamageDivideRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DamageDivideRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DamageDivideRowChangedEvent) Is Nothing) Then
                RaiseEvent DamageDivideRowChanged(Me, New DamageDivideRowChangeEvent(CType(e.Row,DamageDivideRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DamageDivideRowChangingEvent) Is Nothing) Then
                RaiseEvent DamageDivideRowChanging(Me, New DamageDivideRowChangeEvent(CType(e.Row,DamageDivideRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DamageDivideRowDeletedEvent) Is Nothing) Then
                RaiseEvent DamageDivideRowDeleted(Me, New DamageDivideRowChangeEvent(CType(e.Row,DamageDivideRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DamageDivideRowDeletingEvent) Is Nothing) Then
                RaiseEvent DamageDivideRowDeleting(Me, New DamageDivideRowChangeEvent(CType(e.Row,DamageDivideRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDamageDivideRow(ByVal row As DamageDivideRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsDamage = New dsDamage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DamageDivideDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DamageDivideHeaderDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDamageDivideID As Global.System.Data.DataColumn
        
        Private columnDivideDate As Global.System.Data.DataColumn
        
        Private columnDamageDate As Global.System.Data.DataColumn
        
        Private columnGoldQualityID As Global.System.Data.DataColumn
        
        Private columnGoldQuality As Global.System.Data.DataColumn
        
        Private columnItemCategoryID As Global.System.Data.DataColumn
        
        Private columnItemCategory As Global.System.Data.DataColumn
        
        Private columnTotalQTY As Global.System.Data.DataColumn
        
        Private columnTotalTK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DamageDivideHeader"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DamageDivideIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDamageDivideID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivideDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivideDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DamageDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDamageDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQualityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQuality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DamageDivideHeaderRow
            Get
                Return CType(Me.Rows(index),DamageDivideHeaderRow)
            End Get
        End Property
        
        Public Event DamageDivideHeaderRowChanging As DamageDivideHeaderRowChangeEventHandler
        
        Public Event DamageDivideHeaderRowChanged As DamageDivideHeaderRowChangeEventHandler
        
        Public Event DamageDivideHeaderRowDeleting As DamageDivideHeaderRowChangeEventHandler
        
        Public Event DamageDivideHeaderRowDeleted As DamageDivideHeaderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDamageDivideHeaderRow(ByVal row As DamageDivideHeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDamageDivideHeaderRow(ByVal DamageDivideID As String, ByVal DivideDate As String, ByVal DamageDate As String, ByVal GoldQualityID As String, ByVal GoldQuality As String, ByVal ItemCategoryID As String, ByVal ItemCategory As String, ByVal TotalQTY As String, ByVal TotalTK As String) As DamageDivideHeaderRow
            Dim rowDamageDivideHeaderRow As DamageDivideHeaderRow = CType(Me.NewRow,DamageDivideHeaderRow)
            Dim columnValuesArray() As Object = New Object() {DamageDivideID, DivideDate, DamageDate, GoldQualityID, GoldQuality, ItemCategoryID, ItemCategory, TotalQTY, TotalTK}
            rowDamageDivideHeaderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDamageDivideHeaderRow)
            Return rowDamageDivideHeaderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DamageDivideHeaderDataTable = CType(MyBase.Clone,DamageDivideHeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DamageDivideHeaderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDamageDivideID = MyBase.Columns("DamageDivideID")
            Me.columnDivideDate = MyBase.Columns("DivideDate")
            Me.columnDamageDate = MyBase.Columns("DamageDate")
            Me.columnGoldQualityID = MyBase.Columns("GoldQualityID")
            Me.columnGoldQuality = MyBase.Columns("GoldQuality")
            Me.columnItemCategoryID = MyBase.Columns("ItemCategoryID")
            Me.columnItemCategory = MyBase.Columns("ItemCategory")
            Me.columnTotalQTY = MyBase.Columns("TotalQTY")
            Me.columnTotalTK = MyBase.Columns("TotalTK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDamageDivideID = New Global.System.Data.DataColumn("DamageDivideID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDamageDivideID)
            Me.columnDivideDate = New Global.System.Data.DataColumn("DivideDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivideDate)
            Me.columnDamageDate = New Global.System.Data.DataColumn("DamageDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDamageDate)
            Me.columnGoldQualityID = New Global.System.Data.DataColumn("GoldQualityID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQualityID)
            Me.columnGoldQuality = New Global.System.Data.DataColumn("GoldQuality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQuality)
            Me.columnItemCategoryID = New Global.System.Data.DataColumn("ItemCategoryID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategoryID)
            Me.columnItemCategory = New Global.System.Data.DataColumn("ItemCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategory)
            Me.columnTotalQTY = New Global.System.Data.DataColumn("TotalQTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalQTY)
            Me.columnTotalTK = New Global.System.Data.DataColumn("TotalTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTK)
            Me.columnDamageDivideID.Caption = "PurchaseDivideID"
            Me.columnDamageDate.Caption = "PurchaseDate"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDamageDivideHeaderRow() As DamageDivideHeaderRow
            Return CType(Me.NewRow,DamageDivideHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DamageDivideHeaderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DamageDivideHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DamageDivideHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent DamageDivideHeaderRowChanged(Me, New DamageDivideHeaderRowChangeEvent(CType(e.Row,DamageDivideHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DamageDivideHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent DamageDivideHeaderRowChanging(Me, New DamageDivideHeaderRowChangeEvent(CType(e.Row,DamageDivideHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DamageDivideHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent DamageDivideHeaderRowDeleted(Me, New DamageDivideHeaderRowChangeEvent(CType(e.Row,DamageDivideHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DamageDivideHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent DamageDivideHeaderRowDeleting(Me, New DamageDivideHeaderRowChangeEvent(CType(e.Row,DamageDivideHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDamageDivideHeaderRow(ByVal row As DamageDivideHeaderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsDamage = New dsDamage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DamageDivideHeaderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DamageRow
        Inherits Global.System.Data.DataRow
        
        Private tableDamage As DamageDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDamage = CType(Me.Table,DamageDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.DDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DDate' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.DDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.LocationIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationID' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.LocationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.CounterIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterID' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.CounterIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Counter() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.CounterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counter' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.CounterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQualityID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GoldQualityIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQualityID' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GoldQualityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQuality() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GoldQualityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQuality' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GoldQualityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategoryID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.ItemCategoryIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategoryID' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.ItemCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.ItemCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategory' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.ItemCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GoldKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GoldKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldP() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GoldPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldP' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GoldPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GoldYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldY' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GoldYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldTK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GemsKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GemsKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsP() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GemsPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsP' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GemsPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GemsYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsY' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GemsYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.GemsTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsTK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.GemsTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.WasteKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.WasteKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteP() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.WastePColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteP' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.WastePColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.WasteYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteY' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.WasteYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.WasteTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteTK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.WasteTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.TotalKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.TotalKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalP() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.TotalPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalP' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.TotalPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.TotalYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalY' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.TotalYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.TotalTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalTK' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.TotalTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Length() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.LengthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Length' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.LengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Width() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamage.WidthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Width' in table 'Damage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamage.WidthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDDateNull() As Boolean
            Return Me.IsNull(Me.tableDamage.DDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDDateNull()
            Me(Me.tableDamage.DDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationIDNull() As Boolean
            Return Me.IsNull(Me.tableDamage.LocationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationIDNull()
            Me(Me.tableDamage.LocationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tableDamage.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tableDamage.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterIDNull() As Boolean
            Return Me.IsNull(Me.tableDamage.CounterIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterIDNull()
            Me(Me.tableDamage.CounterIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterNull() As Boolean
            Return Me.IsNull(Me.tableDamage.CounterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterNull()
            Me(Me.tableDamage.CounterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityIDNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GoldQualityIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityIDNull()
            Me(Me.tableDamage.GoldQualityIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GoldQualityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityNull()
            Me(Me.tableDamage.GoldQualityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableDamage.ItemCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryIDNull()
            Me(Me.tableDamage.ItemCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tableDamage.ItemCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryNull()
            Me(Me.tableDamage.ItemCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableDamage.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableDamage.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GoldKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldKNull()
            Me(Me.tableDamage.GoldKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldPNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GoldPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldPNull()
            Me(Me.tableDamage.GoldPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldYNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GoldYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldYNull()
            Me(Me.tableDamage.GoldYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldTKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldTKNull()
            Me(Me.tableDamage.GoldTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GemsKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsKNull()
            Me(Me.tableDamage.GemsKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsPNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GemsPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsPNull()
            Me(Me.tableDamage.GemsPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsYNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GemsYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsYNull()
            Me(Me.tableDamage.GemsYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsTKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.GemsTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsTKNull()
            Me(Me.tableDamage.GemsTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.WasteKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteKNull()
            Me(Me.tableDamage.WasteKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWastePNull() As Boolean
            Return Me.IsNull(Me.tableDamage.WastePColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWastePNull()
            Me(Me.tableDamage.WastePColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteYNull() As Boolean
            Return Me.IsNull(Me.tableDamage.WasteYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteYNull()
            Me(Me.tableDamage.WasteYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteTKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.WasteTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteTKNull()
            Me(Me.tableDamage.WasteTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.TotalKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalKNull()
            Me(Me.tableDamage.TotalKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPNull() As Boolean
            Return Me.IsNull(Me.tableDamage.TotalPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPNull()
            Me(Me.tableDamage.TotalPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalYNull() As Boolean
            Return Me.IsNull(Me.tableDamage.TotalYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalYNull()
            Me(Me.tableDamage.TotalYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalTKNull() As Boolean
            Return Me.IsNull(Me.tableDamage.TotalTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalTKNull()
            Me(Me.tableDamage.TotalTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableDamage.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableDamage.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLengthNull() As Boolean
            Return Me.IsNull(Me.tableDamage.LengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLengthNull()
            Me(Me.tableDamage.LengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableDamage.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tableDamage.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWidthNull() As Boolean
            Return Me.IsNull(Me.tableDamage.WidthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWidthNull()
            Me(Me.tableDamage.WidthColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DamageDivideRow
        Inherits Global.System.Data.DataRow
        
        Private tableDamageDivide As DamageDivideDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDamageDivide = CType(Me.Table,DamageDivideDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DamageDivideID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.DamageDivideIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DamageDivideID' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.DamageDivideIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivideDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.DivideDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivideDate' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.DivideDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DamageDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.DamageDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DamageDate' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.DamageDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQualityID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.GoldQualityIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQualityID' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.GoldQualityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQuality() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.GoldQualityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQuality' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.GoldQualityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategoryID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.ItemCategoryIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategoryID' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.ItemCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.ItemCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategory' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.ItemCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalQTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.TotalQTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalQTY' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.TotalQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.TotalTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalTK' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.TotalTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivideType() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.DivideTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivideType' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.DivideTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivide.GoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldTK' in table 'DamageDivide' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivide.GoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDamageDivideIDNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.DamageDivideIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDamageDivideIDNull()
            Me(Me.tableDamageDivide.DamageDivideIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivideDateNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.DivideDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivideDateNull()
            Me(Me.tableDamageDivide.DivideDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDamageDateNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.DamageDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDamageDateNull()
            Me(Me.tableDamageDivide.DamageDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityIDNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.GoldQualityIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityIDNull()
            Me(Me.tableDamageDivide.GoldQualityIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.GoldQualityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityNull()
            Me(Me.tableDamageDivide.GoldQualityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.ItemCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryIDNull()
            Me(Me.tableDamageDivide.ItemCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.ItemCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryNull()
            Me(Me.tableDamageDivide.ItemCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalQTYNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.TotalQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalQTYNull()
            Me(Me.tableDamageDivide.TotalQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalTKNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.TotalTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalTKNull()
            Me(Me.tableDamageDivide.TotalTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableDamageDivide.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivideTypeNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.DivideTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivideTypeNull()
            Me(Me.tableDamageDivide.DivideTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldTKNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivide.GoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldTKNull()
            Me(Me.tableDamageDivide.GoldTKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DamageDivideHeaderRow
        Inherits Global.System.Data.DataRow
        
        Private tableDamageDivideHeader As DamageDivideHeaderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDamageDivideHeader = CType(Me.Table,DamageDivideHeaderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DamageDivideID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.DamageDivideIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DamageDivideID' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.DamageDivideIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DivideDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.DivideDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DivideDate' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.DivideDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DamageDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.DamageDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DamageDate' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.DamageDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQualityID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.GoldQualityIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQualityID' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.GoldQualityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQuality() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.GoldQualityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQuality' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.GoldQualityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategoryID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.ItemCategoryIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategoryID' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.ItemCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.ItemCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategory' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.ItemCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalQTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.TotalQTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalQTY' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.TotalQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDamageDivideHeader.TotalTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalTK' in table 'DamageDivideHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDamageDivideHeader.TotalTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDamageDivideIDNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.DamageDivideIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDamageDivideIDNull()
            Me(Me.tableDamageDivideHeader.DamageDivideIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivideDateNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.DivideDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivideDateNull()
            Me(Me.tableDamageDivideHeader.DivideDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDamageDateNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.DamageDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDamageDateNull()
            Me(Me.tableDamageDivideHeader.DamageDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityIDNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.GoldQualityIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityIDNull()
            Me(Me.tableDamageDivideHeader.GoldQualityIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.GoldQualityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityNull()
            Me(Me.tableDamageDivideHeader.GoldQualityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.ItemCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryIDNull()
            Me(Me.tableDamageDivideHeader.ItemCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.ItemCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryNull()
            Me(Me.tableDamageDivideHeader.ItemCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalQTYNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.TotalQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalQTYNull()
            Me(Me.tableDamageDivideHeader.TotalQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalTKNull() As Boolean
            Return Me.IsNull(Me.tableDamageDivideHeader.TotalTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalTKNull()
            Me(Me.tableDamageDivideHeader.TotalTKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DamageRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DamageRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DamageRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DamageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DamageDivideRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DamageDivideRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DamageDivideRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DamageDivideRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DamageDivideHeaderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DamageDivideHeaderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DamageDivideHeaderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DamageDivideHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
