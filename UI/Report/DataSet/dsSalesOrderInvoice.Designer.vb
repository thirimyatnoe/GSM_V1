'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSalesOrderInvoice"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSalesOrderInvoice
    Inherits Global.System.Data.DataSet
    
    Private tabledtSalesOrderInvoice As dtSalesOrderInvoiceDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtSalesOrderInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New dtSalesOrderInvoiceDataTable(ds.Tables("dtSalesOrderInvoice")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtSalesOrderInvoice() As dtSalesOrderInvoiceDataTable
        Get
            Return Me.tabledtSalesOrderInvoice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSalesOrderInvoice = CType(MyBase.Clone,dsSalesOrderInvoice)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtSalesOrderInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New dtSalesOrderInvoiceDataTable(ds.Tables("dtSalesOrderInvoice")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtSalesOrderInvoice = CType(MyBase.Tables("dtSalesOrderInvoice"),dtSalesOrderInvoiceDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtSalesOrderInvoice) Is Nothing) Then
                Me.tabledtSalesOrderInvoice.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSalesOrderInvoice"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SalesOrderInvoice.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtSalesOrderInvoice = New dtSalesOrderInvoiceDataTable
        MyBase.Tables.Add(Me.tabledtSalesOrderInvoice)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtSalesOrderInvoice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSalesOrderInvoice = New dsSalesOrderInvoice
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtSalesOrderInvoiceRowChangeEventHandler(ByVal sender As Object, ByVal e As dtSalesOrderInvoiceRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSalesOrderInvoiceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSaleOrderID As Global.System.Data.DataColumn
        
        Private columnOrderDate As Global.System.Data.DataColumn
        
        Private columnItemCategoryID As Global.System.Data.DataColumn
        
        Private columnItemCategory As Global.System.Data.DataColumn
        
        Private columnForSaleID As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnIsReturn As Global.System.Data.DataColumn
        
        Private columnIsSalesReturn As Global.System.Data.DataColumn
        
        Private columnCustomer As Global.System.Data.DataColumn
        
        Private columnStaff As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnGoldQuality As Global.System.Data.DataColumn
        
        Private columnGoldQualityID As Global.System.Data.DataColumn
        
        Private columnRemarkDone As Global.System.Data.DataColumn
        
        Private columnRemark15 As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnLocationID As Global.System.Data.DataColumn
        
        Private columnOrderRetrieveDate As Global.System.Data.DataColumn
        
        Private columnSalesRate As Global.System.Data.DataColumn
        
        Private columnGoldPrice As Global.System.Data.DataColumn
        
        Private columnGemsPrice As Global.System.Data.DataColumn
        
        Private columnDesignCharges As Global.System.Data.DataColumn
        
        Private columnTotalPayment As Global.System.Data.DataColumn
        
        Private columnAdvanceAmount As Global.System.Data.DataColumn
        
        Private columnPaidAmount As Global.System.Data.DataColumn
        
        Private columnAddOrSub As Global.System.Data.DataColumn
        
        Private columnBalanceAmount As Global.System.Data.DataColumn
        
        Private columnGoldK As Global.System.Data.DataColumn
        
        Private columnGoldP As Global.System.Data.DataColumn
        
        Private columnGoldY As Global.System.Data.DataColumn
        
        Private columnGoldTK As Global.System.Data.DataColumn
        
        Private columnWasteK As Global.System.Data.DataColumn
        
        Private columnWasteP As Global.System.Data.DataColumn
        
        Private columnWasteY As Global.System.Data.DataColumn
        
        Private columnWasteTK As Global.System.Data.DataColumn
        
        Private columnGemsK As Global.System.Data.DataColumn
        
        Private columnGemsP As Global.System.Data.DataColumn
        
        Private columnGemsY As Global.System.Data.DataColumn
        
        Private columnGemsC As Global.System.Data.DataColumn
        
        Private columnGemsTK As Global.System.Data.DataColumn
        
        Private columnTotalK As Global.System.Data.DataColumn
        
        Private columnTotalP As Global.System.Data.DataColumn
        
        Private columnTotalY As Global.System.Data.DataColumn
        
        Private columnTotalC As Global.System.Data.DataColumn
        
        Private columnTotalTK As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteTK As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteK As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteP As Global.System.Data.DataColumn
        
        Private columnTotalNoWasteY As Global.System.Data.DataColumn
        
        Private columnCounterID As Global.System.Data.DataColumn
        
        Private columnCounter As Global.System.Data.DataColumn
        
        Private columnDiscountAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtSalesOrderInvoice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaleOrderIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaleOrderID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ForSaleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForSaleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsReturnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsReturn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSalesReturnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSalesReturn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StaffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStaff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQuality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldQualityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldQualityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkDoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarkDone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Remark15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderRetrieveDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderRetrieveDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignChargesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignCharges
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdvanceAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdvanceAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddOrSubColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddOrSub
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BalanceAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoldTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoldTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WastePColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasteTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasteTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GemsTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGemsTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWasteTKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteTK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWasteKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWastePColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoWasteYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoWasteY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscountAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSalesOrderInvoiceRow
            Get
                Return CType(Me.Rows(index),dtSalesOrderInvoiceRow)
            End Get
        End Property
        
        Public Event dtSalesOrderInvoiceRowChanging As dtSalesOrderInvoiceRowChangeEventHandler
        
        Public Event dtSalesOrderInvoiceRowChanged As dtSalesOrderInvoiceRowChangeEventHandler
        
        Public Event dtSalesOrderInvoiceRowDeleting As dtSalesOrderInvoiceRowChangeEventHandler
        
        Public Event dtSalesOrderInvoiceRowDeleted As dtSalesOrderInvoiceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSalesOrderInvoiceRow(ByVal row As dtSalesOrderInvoiceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSalesOrderInvoiceRow( _
                    ByVal SaleOrderID As String,  _
                    ByVal OrderDate As String,  _
                    ByVal ItemCategoryID As String,  _
                    ByVal ItemCategory As String,  _
                    ByVal ForSaleID As String,  _
                    ByVal ItemCode As String,  _
                    ByVal ItemName As String,  _
                    ByVal IsReturn As String,  _
                    ByVal IsSalesReturn As String,  _
                    ByVal Customer As String,  _
                    ByVal Staff As String,  _
                    ByVal Address As String,  _
                    ByVal GoldQuality As String,  _
                    ByVal GoldQualityID As String,  _
                    ByVal RemarkDone As String,  _
                    ByVal Remark15 As String,  _
                    ByVal Location As String,  _
                    ByVal LocationID As String,  _
                    ByVal OrderRetrieveDate As String,  _
                    ByVal SalesRate As String,  _
                    ByVal GoldPrice As String,  _
                    ByVal GemsPrice As String,  _
                    ByVal DesignCharges As String,  _
                    ByVal TotalPayment As String,  _
                    ByVal AdvanceAmount As String,  _
                    ByVal PaidAmount As String,  _
                    ByVal AddOrSub As String,  _
                    ByVal BalanceAmount As String,  _
                    ByVal GoldK As String,  _
                    ByVal GoldP As String,  _
                    ByVal GoldY As String,  _
                    ByVal GoldTK As String,  _
                    ByVal WasteK As String,  _
                    ByVal WasteP As String,  _
                    ByVal WasteY As String,  _
                    ByVal WasteTK As String,  _
                    ByVal GemsK As String,  _
                    ByVal GemsP As String,  _
                    ByVal GemsY As String,  _
                    ByVal GemsC As String,  _
                    ByVal GemsTK As String,  _
                    ByVal TotalK As String,  _
                    ByVal TotalP As String,  _
                    ByVal TotalY As String,  _
                    ByVal TotalC As String,  _
                    ByVal TotalTK As String,  _
                    ByVal TotalNoWasteTK As String,  _
                    ByVal TotalNoWasteK As String,  _
                    ByVal TotalNoWasteP As String,  _
                    ByVal TotalNoWasteY As String,  _
                    ByVal CounterID As String,  _
                    ByVal Counter As String,  _
                    ByVal DiscountAmount As String) As dtSalesOrderInvoiceRow
            Dim rowdtSalesOrderInvoiceRow As dtSalesOrderInvoiceRow = CType(Me.NewRow,dtSalesOrderInvoiceRow)
            Dim columnValuesArray() As Object = New Object() {SaleOrderID, OrderDate, ItemCategoryID, ItemCategory, ForSaleID, ItemCode, ItemName, IsReturn, IsSalesReturn, Customer, Staff, Address, GoldQuality, GoldQualityID, RemarkDone, Remark15, Location, LocationID, OrderRetrieveDate, SalesRate, GoldPrice, GemsPrice, DesignCharges, TotalPayment, AdvanceAmount, PaidAmount, AddOrSub, BalanceAmount, GoldK, GoldP, GoldY, GoldTK, WasteK, WasteP, WasteY, WasteTK, GemsK, GemsP, GemsY, GemsC, GemsTK, TotalK, TotalP, TotalY, TotalC, TotalTK, TotalNoWasteTK, TotalNoWasteK, TotalNoWasteP, TotalNoWasteY, CounterID, Counter, DiscountAmount}
            rowdtSalesOrderInvoiceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSalesOrderInvoiceRow)
            Return rowdtSalesOrderInvoiceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSalesOrderInvoiceDataTable = CType(MyBase.Clone,dtSalesOrderInvoiceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSalesOrderInvoiceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSaleOrderID = MyBase.Columns("SaleOrderID")
            Me.columnOrderDate = MyBase.Columns("OrderDate")
            Me.columnItemCategoryID = MyBase.Columns("ItemCategoryID")
            Me.columnItemCategory = MyBase.Columns("ItemCategory")
            Me.columnForSaleID = MyBase.Columns("ForSaleID")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnIsReturn = MyBase.Columns("IsReturn")
            Me.columnIsSalesReturn = MyBase.Columns("IsSalesReturn")
            Me.columnCustomer = MyBase.Columns("Customer")
            Me.columnStaff = MyBase.Columns("Staff")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnGoldQuality = MyBase.Columns("GoldQuality")
            Me.columnGoldQualityID = MyBase.Columns("GoldQualityID")
            Me.columnRemarkDone = MyBase.Columns("RemarkDone")
            Me.columnRemark15 = MyBase.Columns("Remark15")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnLocationID = MyBase.Columns("LocationID")
            Me.columnOrderRetrieveDate = MyBase.Columns("OrderRetrieveDate")
            Me.columnSalesRate = MyBase.Columns("SalesRate")
            Me.columnGoldPrice = MyBase.Columns("GoldPrice")
            Me.columnGemsPrice = MyBase.Columns("GemsPrice")
            Me.columnDesignCharges = MyBase.Columns("DesignCharges")
            Me.columnTotalPayment = MyBase.Columns("TotalPayment")
            Me.columnAdvanceAmount = MyBase.Columns("AdvanceAmount")
            Me.columnPaidAmount = MyBase.Columns("PaidAmount")
            Me.columnAddOrSub = MyBase.Columns("AddOrSub")
            Me.columnBalanceAmount = MyBase.Columns("BalanceAmount")
            Me.columnGoldK = MyBase.Columns("GoldK")
            Me.columnGoldP = MyBase.Columns("GoldP")
            Me.columnGoldY = MyBase.Columns("GoldY")
            Me.columnGoldTK = MyBase.Columns("GoldTK")
            Me.columnWasteK = MyBase.Columns("WasteK")
            Me.columnWasteP = MyBase.Columns("WasteP")
            Me.columnWasteY = MyBase.Columns("WasteY")
            Me.columnWasteTK = MyBase.Columns("WasteTK")
            Me.columnGemsK = MyBase.Columns("GemsK")
            Me.columnGemsP = MyBase.Columns("GemsP")
            Me.columnGemsY = MyBase.Columns("GemsY")
            Me.columnGemsC = MyBase.Columns("GemsC")
            Me.columnGemsTK = MyBase.Columns("GemsTK")
            Me.columnTotalK = MyBase.Columns("TotalK")
            Me.columnTotalP = MyBase.Columns("TotalP")
            Me.columnTotalY = MyBase.Columns("TotalY")
            Me.columnTotalC = MyBase.Columns("TotalC")
            Me.columnTotalTK = MyBase.Columns("TotalTK")
            Me.columnTotalNoWasteTK = MyBase.Columns("TotalNoWasteTK")
            Me.columnTotalNoWasteK = MyBase.Columns("TotalNoWasteK")
            Me.columnTotalNoWasteP = MyBase.Columns("TotalNoWasteP")
            Me.columnTotalNoWasteY = MyBase.Columns("TotalNoWasteY")
            Me.columnCounterID = MyBase.Columns("CounterID")
            Me.columnCounter = MyBase.Columns("Counter")
            Me.columnDiscountAmount = MyBase.Columns("DiscountAmount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSaleOrderID = New Global.System.Data.DataColumn("SaleOrderID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaleOrderID)
            Me.columnOrderDate = New Global.System.Data.DataColumn("OrderDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderDate)
            Me.columnItemCategoryID = New Global.System.Data.DataColumn("ItemCategoryID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategoryID)
            Me.columnItemCategory = New Global.System.Data.DataColumn("ItemCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCategory)
            Me.columnForSaleID = New Global.System.Data.DataColumn("ForSaleID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForSaleID)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnIsReturn = New Global.System.Data.DataColumn("IsReturn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsReturn)
            Me.columnIsSalesReturn = New Global.System.Data.DataColumn("IsSalesReturn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSalesReturn)
            Me.columnCustomer = New Global.System.Data.DataColumn("Customer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer)
            Me.columnStaff = New Global.System.Data.DataColumn("Staff", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStaff)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnGoldQuality = New Global.System.Data.DataColumn("GoldQuality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQuality)
            Me.columnGoldQualityID = New Global.System.Data.DataColumn("GoldQualityID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldQualityID)
            Me.columnRemarkDone = New Global.System.Data.DataColumn("RemarkDone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarkDone)
            Me.columnRemark15 = New Global.System.Data.DataColumn("Remark15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark15)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnLocationID = New Global.System.Data.DataColumn("LocationID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationID)
            Me.columnOrderRetrieveDate = New Global.System.Data.DataColumn("OrderRetrieveDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderRetrieveDate)
            Me.columnSalesRate = New Global.System.Data.DataColumn("SalesRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesRate)
            Me.columnGoldPrice = New Global.System.Data.DataColumn("GoldPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldPrice)
            Me.columnGemsPrice = New Global.System.Data.DataColumn("GemsPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsPrice)
            Me.columnDesignCharges = New Global.System.Data.DataColumn("DesignCharges", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignCharges)
            Me.columnTotalPayment = New Global.System.Data.DataColumn("TotalPayment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPayment)
            Me.columnAdvanceAmount = New Global.System.Data.DataColumn("AdvanceAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdvanceAmount)
            Me.columnPaidAmount = New Global.System.Data.DataColumn("PaidAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidAmount)
            Me.columnAddOrSub = New Global.System.Data.DataColumn("AddOrSub", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddOrSub)
            Me.columnBalanceAmount = New Global.System.Data.DataColumn("BalanceAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalanceAmount)
            Me.columnGoldK = New Global.System.Data.DataColumn("GoldK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldK)
            Me.columnGoldP = New Global.System.Data.DataColumn("GoldP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldP)
            Me.columnGoldY = New Global.System.Data.DataColumn("GoldY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldY)
            Me.columnGoldTK = New Global.System.Data.DataColumn("GoldTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoldTK)
            Me.columnWasteK = New Global.System.Data.DataColumn("WasteK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteK)
            Me.columnWasteP = New Global.System.Data.DataColumn("WasteP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteP)
            Me.columnWasteY = New Global.System.Data.DataColumn("WasteY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteY)
            Me.columnWasteTK = New Global.System.Data.DataColumn("WasteTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasteTK)
            Me.columnGemsK = New Global.System.Data.DataColumn("GemsK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsK)
            Me.columnGemsP = New Global.System.Data.DataColumn("GemsP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsP)
            Me.columnGemsY = New Global.System.Data.DataColumn("GemsY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsY)
            Me.columnGemsC = New Global.System.Data.DataColumn("GemsC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsC)
            Me.columnGemsTK = New Global.System.Data.DataColumn("GemsTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGemsTK)
            Me.columnTotalK = New Global.System.Data.DataColumn("TotalK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalK)
            Me.columnTotalP = New Global.System.Data.DataColumn("TotalP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalP)
            Me.columnTotalY = New Global.System.Data.DataColumn("TotalY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalY)
            Me.columnTotalC = New Global.System.Data.DataColumn("TotalC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalC)
            Me.columnTotalTK = New Global.System.Data.DataColumn("TotalTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTK)
            Me.columnTotalNoWasteTK = New Global.System.Data.DataColumn("TotalNoWasteTK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteTK)
            Me.columnTotalNoWasteK = New Global.System.Data.DataColumn("TotalNoWasteK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteK)
            Me.columnTotalNoWasteP = New Global.System.Data.DataColumn("TotalNoWasteP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteP)
            Me.columnTotalNoWasteY = New Global.System.Data.DataColumn("TotalNoWasteY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoWasteY)
            Me.columnCounterID = New Global.System.Data.DataColumn("CounterID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterID)
            Me.columnCounter = New Global.System.Data.DataColumn("Counter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounter)
            Me.columnDiscountAmount = New Global.System.Data.DataColumn("DiscountAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscountAmount)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSalesOrderInvoiceRow() As dtSalesOrderInvoiceRow
            Return CType(Me.NewRow,dtSalesOrderInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSalesOrderInvoiceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSalesOrderInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSalesOrderInvoiceRowChangedEvent) Is Nothing) Then
                RaiseEvent dtSalesOrderInvoiceRowChanged(Me, New dtSalesOrderInvoiceRowChangeEvent(CType(e.Row,dtSalesOrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSalesOrderInvoiceRowChangingEvent) Is Nothing) Then
                RaiseEvent dtSalesOrderInvoiceRowChanging(Me, New dtSalesOrderInvoiceRowChangeEvent(CType(e.Row,dtSalesOrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSalesOrderInvoiceRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSalesOrderInvoiceRowDeleted(Me, New dtSalesOrderInvoiceRowChangeEvent(CType(e.Row,dtSalesOrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSalesOrderInvoiceRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSalesOrderInvoiceRowDeleting(Me, New dtSalesOrderInvoiceRowChangeEvent(CType(e.Row,dtSalesOrderInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSalesOrderInvoiceRow(ByVal row As dtSalesOrderInvoiceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSalesOrderInvoice = New dsSalesOrderInvoice
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSalesOrderInvoiceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSalesOrderInvoiceRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtSalesOrderInvoice As dtSalesOrderInvoiceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtSalesOrderInvoice = CType(Me.Table,dtSalesOrderInvoiceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaleOrderID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.SaleOrderIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SaleOrderID' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.SaleOrderIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.OrderDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderDate' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.OrderDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategoryID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.ItemCategoryIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategoryID' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.ItemCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.ItemCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCategory' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.ItemCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ForSaleID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.ForSaleIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForSaleID' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.ForSaleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsReturn() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.IsReturnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsReturn' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.IsReturnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSalesReturn() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.IsSalesReturnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsSalesReturn' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.IsSalesReturnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.CustomerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.CustomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Staff() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.StaffColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Staff' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.StaffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQuality() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GoldQualityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQuality' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GoldQualityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldQualityID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GoldQualityIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldQualityID' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GoldQualityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RemarkDone() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.RemarkDoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RemarkDone' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.RemarkDoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark15() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.Remark15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark15' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.Remark15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.LocationIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationID' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.LocationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderRetrieveDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.OrderRetrieveDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderRetrieveDate' in table 'dtSalesOrderInvoice' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.OrderRetrieveDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesRate() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.SalesRateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalesRate' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.SalesRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldPrice() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GoldPriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldPrice' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GoldPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsPrice() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GemsPriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsPrice' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GemsPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesignCharges() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.DesignChargesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DesignCharges' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.DesignChargesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPayment() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalPaymentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPayment' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdvanceAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.AdvanceAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdvanceAmount' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.AdvanceAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.PaidAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidAmount' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.PaidAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddOrSub() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.AddOrSubColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddOrSub' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.AddOrSubColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BalanceAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.BalanceAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BalanceAmount' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.BalanceAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GoldKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GoldKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GoldPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldP' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GoldPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GoldYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldY' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GoldYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoldTK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GoldTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoldTK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GoldTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.WasteKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.WasteKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.WastePColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteP' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.WastePColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.WasteYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteY' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.WasteYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasteTK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.WasteTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasteTK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.WasteTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GemsKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GemsKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GemsPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsP' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GemsPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GemsYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsY' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GemsYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GemsCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsC' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GemsCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GemsTK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.GemsTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GemsTK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.GemsTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalP' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalY' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalC' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalTK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteTK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalNoWasteTKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteTK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalNoWasteTKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalNoWasteKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteK' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalNoWasteKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalNoWastePColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteP' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalNoWastePColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoWasteY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.TotalNoWasteYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoWasteY' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.TotalNoWasteYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.CounterIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterID' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.CounterIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Counter() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.CounterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Counter' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.CounterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscountAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSalesOrderInvoice.DiscountAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiscountAmount' in table 'dtSalesOrderInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSalesOrderInvoice.DiscountAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaleOrderIDNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.SaleOrderIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaleOrderIDNull()
            Me(Me.tabledtSalesOrderInvoice.SaleOrderIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.OrderDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderDateNull()
            Me(Me.tabledtSalesOrderInvoice.OrderDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.ItemCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryIDNull()
            Me(Me.tabledtSalesOrderInvoice.ItemCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.ItemCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCategoryNull()
            Me(Me.tabledtSalesOrderInvoice.ItemCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsForSaleIDNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.ForSaleIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetForSaleIDNull()
            Me(Me.tabledtSalesOrderInvoice.ForSaleIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tabledtSalesOrderInvoice.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tabledtSalesOrderInvoice.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsReturnNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.IsReturnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsReturnNull()
            Me(Me.tabledtSalesOrderInvoice.IsReturnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsSalesReturnNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.IsSalesReturnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsSalesReturnNull()
            Me(Me.tabledtSalesOrderInvoice.IsSalesReturnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.CustomerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNull()
            Me(Me.tabledtSalesOrderInvoice.CustomerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStaffNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.StaffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStaffNull()
            Me(Me.tabledtSalesOrderInvoice.StaffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tabledtSalesOrderInvoice.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GoldQualityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityNull()
            Me(Me.tabledtSalesOrderInvoice.GoldQualityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldQualityIDNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GoldQualityIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldQualityIDNull()
            Me(Me.tabledtSalesOrderInvoice.GoldQualityIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkDoneNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.RemarkDoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkDoneNull()
            Me(Me.tabledtSalesOrderInvoice.RemarkDoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemark15Null() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.Remark15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemark15Null()
            Me(Me.tabledtSalesOrderInvoice.Remark15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tabledtSalesOrderInvoice.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationIDNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.LocationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationIDNull()
            Me(Me.tabledtSalesOrderInvoice.LocationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderRetrieveDateNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.OrderRetrieveDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderRetrieveDateNull()
            Me(Me.tabledtSalesOrderInvoice.OrderRetrieveDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesRateNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.SalesRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesRateNull()
            Me(Me.tabledtSalesOrderInvoice.SalesRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldPriceNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GoldPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldPriceNull()
            Me(Me.tabledtSalesOrderInvoice.GoldPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsPriceNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GemsPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsPriceNull()
            Me(Me.tabledtSalesOrderInvoice.GemsPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesignChargesNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.DesignChargesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesignChargesNull()
            Me(Me.tabledtSalesOrderInvoice.DesignChargesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPaymentNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalPaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPaymentNull()
            Me(Me.tabledtSalesOrderInvoice.TotalPaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdvanceAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.AdvanceAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdvanceAmountNull()
            Me(Me.tabledtSalesOrderInvoice.AdvanceAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.PaidAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidAmountNull()
            Me(Me.tabledtSalesOrderInvoice.PaidAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddOrSubNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.AddOrSubColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddOrSubNull()
            Me(Me.tabledtSalesOrderInvoice.AddOrSubColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.BalanceAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBalanceAmountNull()
            Me(Me.tabledtSalesOrderInvoice.BalanceAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GoldKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldKNull()
            Me(Me.tabledtSalesOrderInvoice.GoldKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldPNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GoldPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldPNull()
            Me(Me.tabledtSalesOrderInvoice.GoldPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldYNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GoldYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldYNull()
            Me(Me.tabledtSalesOrderInvoice.GoldYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoldTKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GoldTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoldTKNull()
            Me(Me.tabledtSalesOrderInvoice.GoldTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.WasteKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteKNull()
            Me(Me.tabledtSalesOrderInvoice.WasteKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWastePNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.WastePColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWastePNull()
            Me(Me.tabledtSalesOrderInvoice.WastePColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteYNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.WasteYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteYNull()
            Me(Me.tabledtSalesOrderInvoice.WasteYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasteTKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.WasteTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasteTKNull()
            Me(Me.tabledtSalesOrderInvoice.WasteTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GemsKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsKNull()
            Me(Me.tabledtSalesOrderInvoice.GemsKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsPNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GemsPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsPNull()
            Me(Me.tabledtSalesOrderInvoice.GemsPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsYNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GemsYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsYNull()
            Me(Me.tabledtSalesOrderInvoice.GemsYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsCNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GemsCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsCNull()
            Me(Me.tabledtSalesOrderInvoice.GemsCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGemsTKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.GemsTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGemsTKNull()
            Me(Me.tabledtSalesOrderInvoice.GemsTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalKNull()
            Me(Me.tabledtSalesOrderInvoice.TotalKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPNull()
            Me(Me.tabledtSalesOrderInvoice.TotalPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalYNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalYNull()
            Me(Me.tabledtSalesOrderInvoice.TotalYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCNull()
            Me(Me.tabledtSalesOrderInvoice.TotalCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalTKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalTKNull()
            Me(Me.tabledtSalesOrderInvoice.TotalTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWasteTKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalNoWasteTKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWasteTKNull()
            Me(Me.tabledtSalesOrderInvoice.TotalNoWasteTKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWasteKNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalNoWasteKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWasteKNull()
            Me(Me.tabledtSalesOrderInvoice.TotalNoWasteKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWastePNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalNoWastePColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWastePNull()
            Me(Me.tabledtSalesOrderInvoice.TotalNoWastePColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoWasteYNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.TotalNoWasteYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoWasteYNull()
            Me(Me.tabledtSalesOrderInvoice.TotalNoWasteYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterIDNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.CounterIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterIDNull()
            Me(Me.tabledtSalesOrderInvoice.CounterIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.CounterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterNull()
            Me(Me.tabledtSalesOrderInvoice.CounterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtSalesOrderInvoice.DiscountAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountAmountNull()
            Me(Me.tabledtSalesOrderInvoice.DiscountAmountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSalesOrderInvoiceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSalesOrderInvoiceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSalesOrderInvoiceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSalesOrderInvoiceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
