'Imports Microsoft.Practices.EnterpriseLibrary.Common
'Imports Microsoft.Practices.EnterpriseLibrary.data
'Imports System.Data
'Imports System.IO
'Imports System.IO.TextReader
'Imports System.Data.OleDb
'Imports System.Data.Common
'Imports ADOX
'Imports System.Text
'Imports Operational
'Imports System.Data.SqlClient

'Imports System.Xml
Imports DataAccess.ItemCategory
'Imports DataAccess.ItemGroup
'Imports DataAccess.ItemColor
'Imports DataAccess.Design
'Imports DataAccess.DiamondDesign
'Imports DataAccess.Designation
Imports DataAccess.GoldQuality
Imports DataAccess.Customer
Imports DataAccess.RepairReturn
Imports DataAccess.Repair
Imports DataAccess.OrderInvoice
Imports DataAccess.Location
Imports DataAccess.SalesItem
Imports Microsoft.Practices.EnterpriseLibrary.Common
Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports System.Data
Imports System.IO
Imports System.IO.TextReader
Imports System.Data.OleDb
Imports System.Data.Common
Imports ADOX
Imports System.Text
Imports Operational
Imports System.Data.SqlClient
Imports System.Xml
Imports Operational.AppConfiguration
Imports DataAccess.GlobalSetting
Imports System.Windows.Forms
Imports System.Net
Imports System.Data.SQLite

Namespace DatabaseExportImport
    Public Class DatabaseExportImportDA
        Implements IDatabaseExportImportDA

        Private _objRepairReturnDA As IRepairReturnDA
        Private _objRepairDA As IRepairDA
        Private _objOrderInvoiceDA As IOrderInvoiceDA
        Private _objSalesItemDA As ISalesItemDA
        Private _objLocation As ILocationDA
        Private _objGlobal As IGlobalSettingDA
        Private DBUser As String = "Admin"
        Private DBPassword As String = "global"
        Dim _MailServer As String = "email-smtp.us-east-1.amazonaws.com"
        Dim _FromEMail As String = "globalwavetechnology@gmail.com"
        Dim _FromName As String = "globalwavetechnology"
        Dim _User As String = "AKIAJMVYEYNX2IVVES5A"
        Dim _PWD As String = "AtWDRouH+MgPFxqYsgq65Kupf+ozLUFeN8xjKBfhLFdV"
        Public _ToEMail As String = ""
        Public _CCMail As String = ""
        Public _CompanyName As String = ""
        Dim _Port As String = "587"

        
        Dim _SMTP As String = "True"
        'Dim _BranchID As String = "04"

    

#Region "Private Members"

        Private DB As Database
        Private appStartup As String = AppDomain.CurrentDomain.BaseDirectory
        Private Shared ReadOnly _instance As IDatabaseExportImportDA = New DatabaseExportImportDA
        Private _objAppConfig As AppConfiguration
      
        'Private CurrentCompanyID As Integer = AppConfiguration.ReadAppSettings("CompanyID")

        Private ScriptExportMaster As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptMasterData.sql"
        Private ScriptExportCurrentPrice As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptCurrentPrice.sql"
        Private ScriptExportExpense_Income As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptExpenseIncome.sql"
        Private ScriptExportCustomer_SalePerson As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptCustomer,SalePerson.sql"
        Private ScriptExportStock As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptStock.sql"
        Private ScriptExportOtherTransaction As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptOtherTransaction.sql"
        Private ScriptExportTransferReturn As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptTransferReturn.sql"

        Private ScriptExportShopItem As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptExportData\AccessScriptShop-Item.sql"
        Private ScriptExportSQLite As String = IIf((appStartup.EndsWith("/") Or appStartup.EndsWith("\")), appStartup, appStartup & "\") & "Script\AccessScriptMobileExportData\AccessScriptSQLite.sql"

        Private eventLog1 As New System.Diagnostics.EventLog()
        Public dtShareStock As New DataTable
        Public dtShareTransfer As New DataTable
        Public dtShareTransferReturn As New DataTable
        Public dtShareSaleInvoice As New DataTable
        Public dtShareStockTR As New DataTable
        Public dtShareStockTRDiamond As New DataTable
        Public dtShareTransferReturnDiamond As New DataTable
        Public GlobalTransferReturn_LocationID As String
        Public GlobalTransferReturnDeleteStatus As Boolean
        Public GlobalWholeSaleReturnDeleteStatus As Boolean
        Public dtShareTransferDiamond As New DataTable
        Public dtShareStockDiamond As New DataTable

#End Region

#Region "Constructors"

        Private Sub New()
            DB = DatabaseFactory.CreateDatabase()
            _objRepairReturnDA = DataAccess.Factory.Instance.CreateRepairReturnDA
            _objRepairDA = DataAccess.Factory.Instance.CreateRepairDA
            _objOrderInvoiceDA = DataAccess.Factory.Instance.CreateOrderInvoiceDA
            _objSalesItemDA = DataAccess.Factory.Instance.CreateSalesItemDA
            _objLocation = DataAccess.Factory.Instance.CreateLocationDA
            eventLog1.Source = "GlobalGold"
            eventLog1.Log = "GDrviceSyncLog"

        End Sub

#End Region

#Region "Public Properties"

        Public Shared ReadOnly Property Instance() As IDatabaseExportImportDA
            Get
                Return _instance
            End Get
        End Property

#End Region
        Public Function CheckAccessDatabase(ByVal FileName As String) As Integer Implements IDatabaseExportImportDA.CheckAccessDatabase
            Dim OledbConn As OleDbConnection = New OleDbConnection(CreateAccessConnectionString(FileName, DBPassword))
            Dim intReturn As Integer
            Dim dtTableList As DataTable
            Dim strRestriction(3) As String
            strRestriction(3) = "Table"
            Try
                OledbConn.Open()
                dtTableList = OledbConn.GetSchema("Tables", strRestriction)
                If dtTableList.Rows.Count = 19 Or dtTableList.Rows.Count = 16 Then   ' Check table count
                    intReturn = 0   ' No Error
                Else
                    intReturn = 3   ' Invalid database structure
                End If

            Catch ex As Exception
                If ex.Message = "Not a valid password." Then
                    intReturn = 2    ' Invalid password
                ElseIf ex.Message.StartsWith("Could not find file") Then
                    intReturn = 1    ' File Not found
                Else
                    intReturn = 3    ' Unexpected Error
                End If
            End Try

            If OledbConn.State = ConnectionState.Open Then
                OledbConn.Close()
            End If

            Return intReturn
        End Function
        Private Function Execute_ScriptForSync(ByVal dbConnectionString As String, ByVal scriptFileName As String) As Boolean

            Dim sr As System.IO.StreamReader = Nothing
            Dim sb As StringBuilder = Nothing
            Dim line As String = ""
            Dim sqlcmd As OleDbCommand
            Dim sqlcn As OleDbConnection
            Dim sqlTrans As OleDbTransaction

            sqlcn = New OleDbConnection(dbConnectionString) 'Online

            'Dim sr As System.IO.StreamReader = Nothing
            'Dim sb As StringBuilder = Nothing
            'Dim line As String = ""
            'Dim sqlcmd As SqlCommand
            'Dim sqlcn As SqlConnection
            'Dim sqlTrans As SqlTransaction
            'sqlcn = New SqlConnection(dbConnectionString) 'Offline

            sqlcn.Open()
            sqlTrans = sqlcn.BeginTransaction
            sqlcmd = sqlcn.CreateCommand

            Try
                sqlcmd.Transaction = sqlTrans
                sqlcmd.CommandType = CommandType.Text

                sr = New System.IO.StreamReader(scriptFileName)

                Do
                    sb = New StringBuilder
                    Do
                        line = sr.ReadLine()
                        If (line Is Nothing) Then
                            Exit Do
                        ElseIf (line = "GO" Or line = "Go") Then
                            Exit Do
                        Else
                        End If
                        sb.Append(ControlChars.CrLf & line)
                    Loop

                    If line Is Nothing Then Exit Do

                    sqlcmd.CommandText = sb.ToString

                    sqlcmd.ExecuteNonQuery()

                Loop Until line Is Nothing

                If Not sqlTrans Is Nothing Then
                    sqlTrans.Commit()
                End If
                Execute_ScriptForSync = True
            Catch ex As Exception
                If Not sqlTrans Is Nothing Then
                    sqlTrans.Rollback()
                End If
                Execute_ScriptForSync = False
                '   MsgBox(ex.Message, MsgBoxStyle.Critical, "Data Base Connection Error")
                WriteEventlogs("Execute_ScriptForSync " & ex.Message)
            Finally
                If IsNothing(sr) Then
                    sr.Close()
                End If
                Reset()
            End Try
        End Function
        Private Function Execute_Script(ByVal scriptFileName As String, ByVal dbConnectionString As String) As Boolean
            'Notice When GDrive Sync in SQL and OLEDB connection
            'Dim sr As System.IO.StreamReader = Nothing
            'Dim sb As StringBuilder = Nothing
            'Dim line As String = ""
            'Dim sqlcmd As OleDbCommand
            'Dim sqlcn As OleDbConnection
            'Dim sqlTrans As OleDbTransaction

            'sqlcn = New OleDbConnection(dbConnectionString)            'Online


            Dim sr As System.IO.StreamReader = Nothing
            Dim sb As StringBuilder = Nothing
            Dim line As String = ""
            Dim sqlcmd As SqlCommand
            Dim sqlcn As SqlConnection
            Dim sqlTrans As SqlTransaction
            sqlcn = New SqlConnection(dbConnectionString) 'Offline

            sqlcn.Open()
            sqlTrans = sqlcn.BeginTransaction
            sqlcmd = sqlcn.CreateCommand

            Try
                sqlcmd.Transaction = sqlTrans
                sqlcmd.CommandType = CommandType.Text

                sr = New System.IO.StreamReader(scriptFileName)

                Do
                    sb = New StringBuilder
                    Do
                        line = sr.ReadLine()

                        If (line = "GO" Or line Is Nothing) Then Exit Do

                        sb.Append(ControlChars.CrLf & line)

                    Loop

                    If line Is Nothing Then Exit Do

                    sqlcmd.CommandText = sb.ToString

                    sqlcmd.ExecuteNonQuery()

                Loop Until line Is Nothing

                If Not sqlTrans Is Nothing Then
                    sqlTrans.Commit()
                End If

                Execute_Script = True
            Catch ex As Exception
                If Not sqlTrans Is Nothing Then
                    sqlTrans.Rollback()
                End If
                Execute_Script = False
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Data Base Connection Error")
            Finally
                If sr IsNot Nothing Then sr.Close()
                Reset()

            End Try

        End Function

        Public Function AccessBackup(ByVal sourceFile As String, ByVal destinationFile As String) As String Implements IDatabaseExportImportDA.AccessBackup
            Try
                If Not My.Computer.FileSystem.FileExists(sourceFile) Then
                    Throw New Exception("File Not Found")
                End If
                If My.Computer.FileSystem.FileExists(destinationFile) Then
                    My.Computer.FileSystem.DeleteFile(destinationFile)
                End If
                My.Computer.FileSystem.CopyFile(sourceFile, destinationFile)
                Return "Done"
            Catch ex As Exception
                Return ex.Message
            End Try
        End Function

        Public Function AccessRestore(ByVal sourceFile As String, ByVal destinationFile As String) As String Implements IDatabaseExportImportDA.AccessRestore
            Return AccessBackup(sourceFile, destinationFile)
        End Function

        Private Function ExportDatabaseForHO(ByVal DatabasePath As String, ByVal ForDate As Date) As Boolean Implements IDatabaseExportImportDA.ExportDatabaseForHO
            Try
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
            Catch ex As Exception
            End Try
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim sqlDS As New DataSet
            ''*****Export Tables List*********
            ''** for insert case == 21

            '' tbl_Customer
            ''tbl_PurchaseGems
            ''tbl_PurchaseGemsItem
            ''tbl_PurchaseInvoice
            ''tbl_PurchaseInvoiceGemsItem
            ''tbl_SaleGems
            ''tbl_SaleGemsItem
            ''tbl_SaleInvoice
            ''tbl_SaleInvoiceGemsItem
            '' ''tbl_SalesOrder
            '' ''tbl_SalesOrderGemsItem
            ''tbl_OrderInvoice
            ''tbl_OrderInvoiceGemsItem
            ''tbl_Damage
            ''tbl_DamageItem
            '' ''tbl_MortgageInvoice
            '' ''tbl_MortgageInvoiceItem
            '' ''tbl_MortgageInterest
            ''tbl_DailyExpense
            ''tbl_DailyExpenseItem
            ''tbl_DailyIncome
            ''tbl_DailyIncomeItem
            ''** for update case :: (IsReturn=True) == 6
            '' ''tbl_SalesOrder
            '' ''tbl_SalesOrderGemsItem
            ''tbl_OrderInvoice
            ''tbl_OrderInvoiceGemsItem
            '' ''tbl_MortgageInvoice
            '' ''tbl_MortgageInvoiceItem
            ''** for update case :: (IsDisable=True) == 2
            '' ''tbl_MortgageInvoice
            '' ''tbl_MortgageInvoiceItem
            ''*****Export Tables List*********
            Try
                'tbl_Customer
                strCommandText = "SELECT * " _
                & " FROM tbl_Customer " _
                & " WHERE LastModifiedDate  between '" & ForDate + " 00:00:00 " & "'  and  '" & DateAdd(DateInterval.Day, 1, ForDate) + "  00:00:00  " & "'  "
                '   & " Where  LastModifiedDate  between  '" & @ForDate & "'" "
                '" where t.transferID='" & TransferID & "'"
                ' DateAdd(Day, 1, @ForDate)
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_Customer")
                'tbl_PurchaseGems
                strCommandText = "SELECT * " _
                & " FROM tbl_PurchaseGems " _
                & " WHERE PDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_PurchaseGems")
                'tbl_PurchaseGemsItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_PurchaseGemsItem I INNER JOIN  tbl_PurchaseGems H ON H.PurchaseGemsID=I.PurchaseGemsID " _
                & " WHERE H.PDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_PurchaseGemsItem")
                ''tbl_PurchaseInvoice
                strCommandText = "SELECT * " _
                & " FROM tbl_PurchaseInvoice " _
                & " WHERE PDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_PurchaseInvoice")
                ''tbl_PurchaseInvoiceGemsItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_PurchaseInvoiceGemsItem I INNER JOIN tbl_PurchaseInvoice H ON I.PurchaseInvoiceID=H.PurchaseInvoiceID " _
                & " WHERE H.PDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_PurchaseInvoiceGemsItem")
                ''tbl_SaleGems
                strCommandText = "SELECT * " _
                & " FROM tbl_SaleGems " _
                & " WHERE SDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_SaleGems")
                ''tbl_SaleGemsItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_SaleGemsItem I INNER JOIN tbl_SaleGems H ON I.SaleGemsID=H.SaleGemsID " _
                & " WHERE H.SDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_SaleGemsItem")
                ''tbl_SaleInvoice
                strCommandText = "SELECT * " _
                & " FROM tbl_SaleInvoice " _
                & " WHERE SDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_SaleInvoice")
                ''tbl_SaleInvoiceGemsItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_SaleInvoiceGemsItem I INNER JOIN tbl_SaleInvoice H ON I.SaleInvoiceID=H.SaleInvoiceID " _
                & " WHERE H.SDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_SaleInvoiceGemsItem")

                '' tbl_OrderInvoice
                strCommandText = "SELECT * " _
                & " FROM tbl_OrderInvoice " _
                & " WHERE OrderDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_OrderInvoice")
                ''tbl_OrderInvoiceGemsItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_OrderInvoiceGemsItem I INNER JOIN tbl_OrderInvoice H ON I.OrderInvoiceID=H.OrderInvoiceID " _
                & " WHERE H.OrderDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_OrderInvoiceGemsItem")
                ''tbl_Damage
                strCommandText = "SELECT * " _
                & " FROM tbl_Damage " _
                & " WHERE DDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_Damage")
                ''tbl_DamageItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_DamageItem I INNER JOIN tbl_Damage H ON I.DamageID=H.DamageID " _
                & " WHERE H.DDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_DamageItem")
                ''tbl_WholeSale
                strCommandText = "SELECT * " _
                & " FROM tbl_WholeSale " _
                & " WHERE WSDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_WholeSale")
                ''tbl_WholeSaleItem
                strCommandText = "SELECT WI.* " _
                & " FROM tbl_WholeSaleItem WI  INNER JOIN tbl_WholeSale W  on WI.WholeSaleID=W.WholeSaleID " _
                & " WHERE W.WSDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_WholeSaleItem")
                ''tbl_Transfer
                strCommandText = "SELECT * " _
                & " FROM tbl_Transfer " _
                & " WHERE TransferDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_Transfer")
                ''tbl_TransferItem
                strCommandText = "SELECT TI.* " _
                & " FROM tbl_TransferItem TI  INNER JOIN tbl_Transfer T  on TI.TransferID=T.TransferID " _
                & " WHERE T.TransferDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_TransferItem")


                ''tbl_DailyExpense
                strCommandText = "SELECT * " _
                & " FROM tbl_DailyExpense " _
                & " WHERE ExpenseDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_DailyExpense")


                ''tbl_CashReceipt
                strCommandText = "SELECT * " _
                & " FROM tbl_CashReceipt " _
                & " WHERE PayDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_CashReceipt")

                ''tbl_DailyExpenseItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_DailyExpenseItem I INNER JOIN tbl_DailyExpense H ON I.DailyExpenseID=H.DailyExpenseID " _
                & " WHERE H.ExpenseDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_DailyExpenseItem")
                ''tbl_DailyIncome
                strCommandText = "SELECT * " _
                & " FROM tbl_DailyIncome " _
                & " WHERE IncomeDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_DailyIncome")
                ''tbl_DailyIncomeItem
                strCommandText = "SELECT I.* " _
                & " FROM tbl_DailyIncomeItem I INNER JOIN tbl_DailyIncome H ON I.DailyIncomeID=H.DailyIncomeID " _
                & " WHERE H.IncomeDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_DailyIncomeItem")
                ''######################################################## UPDATE #########################################
                ''** for update case :: (IsReturn=True) == 6
                ''tbl_SalesOrder to update
                ''strCommandText = "SELECT * " _
                ''& " FROM tbl_SalesOrder " _
                ''& " WHERE IsReturn=1 AND OrderRetrieveDate=@ForDate "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_SalesOrder_Return")
                '' ''tbl_SalesOrderGemsItem to update
                ''strCommandText = "SELECT I.* " _
                ''& " FROM tbl_SalesOrderGemsItem I INNER JOIN tbl_SalesOrder H ON I.SaleOrderID=H.SaleOrderID " _
                ''& " WHERE H.IsReturn=1 AND H.OrderRetrieveDate=@ForDate "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_SalesOrderGemsItem_Return")
                ''tbl_OrderInvoice to update
                strCommandText = "SELECT * " _
                & " FROM tbl_OrderInvoice " _
                & " WHERE OrderRetrieveDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_OrderInvoice_Return")
                ''tbl_OrderInvoiceGemsItem to update
                strCommandText = "SELECT I.* " _
                & " FROM tbl_OrderInvoiceGemsItem I INNER JOIN tbl_OrderInvoice H ON I.OrderInvoiceID=H.OrderInvoiceID " _
                & " WHERE H.OrderRetrieveDate=@ForDate "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_OrderInvoiceGemsItem_Return")
                ''tbl_MortgageInvoice
                ''strCommandText = "SELECT * " _
                ''& " FROM tbl_MortgageInvoice " _
                ''& " WHERE IsReturn=1 AND ReturnDate=@ForDate "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_MortgageInvoice_Return")
                '' ''tbl_MortgageInvoiceItem
                ''strCommandText = "SELECT I.* " _
                ''& " FROM tbl_MortgageInvoiceItem I INNER JOIN tbl_MortgageInvoice H ON I.MortgageInvoiceID=H.MortgageInvoiceID " _
                ''& " WHERE H.IsReturn=1 AND H.ReturnDate=@ForDate "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_MortgageInvoiceItem_Return")
                '' ''** for update case :: (IsDisable=True) == 2
                '' ''tbl_MortgageInvoice
                ''strCommandText = "SELECT * " _
                ''& " FROM tbl_MortgageInvoice " _
                ''& " WHERE IsDisable=1 AND DisableDate=@ForDate "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_MortgageInvoice_Disable")
                '' ''tbl_MortgageInvoiceItem
                ''strCommandText = "SELECT I.* " _
                ''& " FROM tbl_MortgageInvoiceItem I INNER JOIN tbl_MortgageInvoice H ON I.MortgageInvoiceID=H.MortgageInvoiceID " _
                ''& " WHERE H.IsDisable=1 AND H.DisableDate=@ForDate "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@ForDate", DbType.Date, ForDate)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_MortgageInvoiceItem_Disable")

                sqlDS.WriteXml(DatabasePath, XmlWriteMode.WriteSchema)

                Return True
            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
                Return False
            End Try
            Return True
        End Function

        Public Function CreateDataBaseForBranch(ByVal ScriptFile As String, ByVal DatabasePath As String, ByVal BranchID As Integer, ByVal UserIDs As String, ByVal UserLevelIDs As String) As Boolean Implements IDatabaseExportImportDA.CreateDataBaseForBranch

            Dim cat As New ADOX.Catalog

            cat.Create(Me.CreateAccessConnectionString(DatabasePath, ""))
            cat = Nothing

            Dim strCommandText As String
            Dim DBComm As DbCommand

            Try



                Execute_Script(ScriptFile, Me.CreateAccessConnectionString(DatabasePath, ""))

                Return True
            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
                Return False
            End Try
            Return True
        End Function

        Public Function ExportDataBaseForBranch(ByVal DatabasePath As String, ByVal BranchID As Integer, ByVal FromDate As Date, ByVal ToDate As Date) As Boolean Implements IDatabaseExportImportDA.ExportDataBaseForBranch
            Try
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
            Catch ex As Exception
            End Try
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim sqlDS As New DataSet
            ''*****Export Tables List*********
            ''tbl_ForSaleHeader
            ''tbl_ForSale
            ''tbl_ForSaleGemsItem
            ''*****Export Tables List*********
            Try
                ' ''tbl_ForSaleHeader
                ''strCommandText = "SELECT * " _
                ''& " FROM tbl_ForSaleHeader " _
                ''& " WHERE ForSaleHeaderID IN (SELECT ForSaleHeaderID FROM tbl_ForSale WHERE GivenDate BETWEEN '" & FromDate.Date.ToString("yyyyMMdd") & "' AND '" & ToDate.Date.ToString("yyyyMMdd") & "' AND LocationID=" & BranchID & ")"
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_ForSaleHeader")

                'tbl_ForSale
                strCommandText = "SELECT * " _
                & " FROM tbl_ForSale " _
                & " WHERE GivenDate = '" & FromDate.Date.ToString("yyyyMMdd") & "'  AND LocationID=" & BranchID

                '& " WHERE GivenDate BETWEEN '" & FromDate.Date.ToString("yyyyMMdd") & "' AND '" & ToDate.Date.ToString("yyyyMMdd") & "' AND LocationID=" & BranchID
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_ForSale")

                'tbl_ForSaleGemsItem
                strCommandText = "SELECT SG.* " _
                & " FROM tbl_ForSaleGemsItem SG INNER JOIN  tbl_ForSale S ON SG.ForSaleID=S.ForSaleID " _
                & " WHERE GivenDate = '" & FromDate.Date.ToString("yyyyMMdd") & "'  AND LocationID=" & BranchID

                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_ForSaleGemsItem")

                sqlDS.WriteXml(DatabasePath, XmlWriteMode.WriteSchema)

                Return True
            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
                Return False
            End Try
            Return True
        End Function

        Public Function ImportDatabaseFromBranch(ByVal DatabasePath As String) As Boolean Implements IDatabaseExportImportDA.ImportDatabaseFromBranch
            Dim tmpsqlDS As New DataSet

            Dim tmp_Customer As New DataTable
            Dim tmp_PurchaseGems As New DataTable
            Dim tmp_PurchaseGemsItems As New DataTable
            Dim tmp_PurchaseInvoice As New DataTable
            Dim tmp_PurchaseInvoiceGemsItem As New DataTable
            Dim tmp_SaleGems As New DataTable
            Dim tmp_SaleGemsItems As New DataTable
            Dim tmp_SaleInvoice As New DataTable
            Dim tmp_SaleInvoiceGemsItem As New DataTable

            Dim tmp_OrderInvoice As New DataTable
            Dim tmp_OrderInvoiceGemsItem As New DataTable
            Dim tmp_Damage As New DataTable
            Dim tmp_DamageItem As New DataTable

            Dim tmp_WholeSale As New DataTable
            Dim tmp_WholeSaleItem As New DataTable

            Dim tmp_Transfer As New DataTable
            Dim tmp_TransferItem As New DataTable

            Dim tmp_CashReceipt As New DataTable


            Dim tmp_DailyExpense As New DataTable
            Dim tmp_DailyExpenseItem As New DataTable
            Dim tmp_DailyIncome As New DataTable
            Dim tmp_DailyIncomeItem As New DataTable


            Dim tmp_OrderInvoice_Return As New DataTable
            Dim tmp_OrderInvoiceGemsItem_Return As New DataTable


            tmpsqlDS.ReadXml(DatabasePath, XmlReadMode.ReadSchema)
            If tmpsqlDS.Tables.Count > 0 Then

                tmp_Customer = tmpsqlDS.Tables("tbl_Customer")
                tmp_PurchaseGemsItems = tmpsqlDS.Tables("tbl_PurchaseGemsItem")
                tmp_PurchaseInvoice = tmpsqlDS.Tables("tbl_PurchaseInvoice")
                tmp_PurchaseInvoiceGemsItem = tmpsqlDS.Tables("tbl_PurchaseInvoiceGemsItem")
                tmp_SaleGems = tmpsqlDS.Tables("tbl_SaleGems")
                tmp_SaleGemsItems = tmpsqlDS.Tables("tbl_SaleGemsItem")
                tmp_SaleInvoice = tmpsqlDS.Tables("tbl_SaleInvoice")
                tmp_SaleInvoiceGemsItem = tmpsqlDS.Tables("tbl_SaleInvoiceGemsItem")

                tmp_OrderInvoice = tmpsqlDS.Tables("tbl_OrderInvoice")
                tmp_OrderInvoiceGemsItem = tmpsqlDS.Tables("tbl_OrderInvoiceGemsItem")
                tmp_Damage = tmpsqlDS.Tables("tbl_Damage")
                tmp_DamageItem = tmpsqlDS.Tables("tbl_DamageItem")

                tmp_WholeSale = tmpsqlDS.Tables("tbl_WholeSale")
                tmp_WholeSaleItem = tmpsqlDS.Tables("tbl_WholeSaleItem")

                tmp_Transfer = tmpsqlDS.Tables("tbl_Transfer")
                tmp_TransferItem = tmpsqlDS.Tables("tbl_TransferItem")

                tmp_CashReceipt = tmpsqlDS.Tables("tbl_CashReceipt")

                tmp_DailyExpense = tmpsqlDS.Tables("tbl_DailyExpense")
                tmp_DailyExpenseItem = tmpsqlDS.Tables("tbl_DailyExpenseItem")
                tmp_DailyIncome = tmpsqlDS.Tables("tbl_DailyIncome")
                tmp_DailyIncomeItem = tmpsqlDS.Tables("tbl_DailyIncomeItem")


                tmp_OrderInvoice_Return = tmpsqlDS.Tables("tbl_OrderInvoice_Return")
                tmp_OrderInvoiceGemsItem_Return = tmpsqlDS.Tables("tbl_OrderInvoiceGemsItem_Return")

            End If
            ' ''Dim DBcomm As DbCommand
            ' ''Dim strCommandText As String
            ' ''Dim dsUpdate As DataSet
            ' ''Dim tmpdr As DataRow
            Try

                '*************************INSERT CASE By SQL BULK COPY*****************************
                'Execute_Script(ExecuteScriptFile, AppConfiguration.AppConfiguration.ReadConnectionString)
                Dim sqlbk As SqlBulkCopy

                sqlbk = New SqlBulkCopy(AppConfiguration.ReadConnectionString)
                With sqlbk
                    .DestinationTableName = "tbl_Customer"
                    .WriteToServer(tmp_Customer)
                    .DestinationTableName = "tbl_PurchaseGems"
                    .WriteToServer(tmp_PurchaseGems)
                    .DestinationTableName = "tbl_PurchaseGemsItem"
                    .WriteToServer(tmp_PurchaseGemsItems)
                    .DestinationTableName = "tbl_PurchaseInvoice"
                    .WriteToServer(tmp_PurchaseInvoice)
                    .DestinationTableName = "tbl_PurchaseInvoiceGemsItem"
                    .WriteToServer(tmp_PurchaseInvoiceGemsItem)
                    .DestinationTableName = "tbl_SaleGems"
                    .WriteToServer(tmp_SaleGems)
                    .DestinationTableName = "tbl_SaleGemsItem"
                    .WriteToServer(tmp_SaleGemsItems)
                    .DestinationTableName = "tbl_SaleInvoice"
                    .WriteToServer(tmp_SaleInvoice)
                    .DestinationTableName = "tbl_SaleInvoiceGemsItem"
                    .WriteToServer(tmp_SaleInvoiceGemsItem)


                    .DestinationTableName = "tbl_OrderInvoice"
                    .WriteToServer(tmp_OrderInvoice)
                    .DestinationTableName = "tbl_OrderInvoiceGemsItem"
                    .WriteToServer(tmp_OrderInvoiceGemsItem)
                    .DestinationTableName = "tbl_Damage"
                    .WriteToServer(tmp_Damage)
                    .DestinationTableName = "tbl_DamageItem"
                    .WriteToServer(tmp_DamageItem)

                    .DestinationTableName = "tbl_WholeSale"
                    .WriteToServer(tmp_WholeSale)
                    .DestinationTableName = "tbl_WholeSaleItem"
                    .WriteToServer(tmp_WholeSaleItem)

                    .DestinationTableName = "tbl_Transfer"
                    .WriteToServer(tmp_Transfer)
                    .DestinationTableName = "tbl_TransferItem"
                    .WriteToServer(tmp_TransferItem)

                    .DestinationTableName = "tbl_CashReceipt"
                    .WriteToServer(tmp_CashReceipt)

                    .DestinationTableName = "tbl_DailyExpense"
                    .WriteToServer(tmp_DailyExpense)
                    .DestinationTableName = "tbl_DailyExpenseItem"
                    .WriteToServer(tmp_DailyExpenseItem)
                    .DestinationTableName = "tbl_DailyIncome"
                    .WriteToServer(tmp_DailyIncome)
                    .DestinationTableName = "tbl_DailyIncomeItem"
                    .WriteToServer(tmp_DailyIncomeItem)

                End With
                ''#####################################   UPDATE CASE FOR RETURN  #######################################

                ''tbl_OrderInvoice
                Dim objInfoOrder As CommonInfo.OrderInvoiceInfo
                Dim _OrderDA As OrderInvoice.IOrderInvoiceDA = Factory.Instance.CreateOrderInvoiceDA
                For Each dr As DataRow In tmp_OrderInvoice_Return.Rows
                    objInfoOrder = New CommonInfo.OrderInvoiceInfo
                    With objInfoOrder
                        .AddOrSub = dr.Item("AddOrSub")
                        .Address = dr.Item("Address")
                        .AdvanceAmount = dr.Item("AdvanceAmount")
                        .DiscountAmount = dr.Item("DiscountAmount")
                        .DesignCharges = dr.Item("DesignCharges")
                        .ForSaleID = dr.Item("ForSaleID")
                        .GemsPrice = dr.Item("GemsPrice")
                        .GemsTG = dr.Item("GemsTG")
                        .GemsTK = dr.Item("GemsTK")
                        .GoldPrice = dr.Item("GoldPrice")
                        .GoldQualityID = dr.Item("GoldQualityID")
                        .ItemCategoryID = dr.Item("ItemCategoryID")
                        '   .ItemCode = dr.Item("ItemCode")
                        .ItemName = dr.Item("ItemName")
                        .LocationID = dr.Item("LocationID")
                        .OrderDate = dr.Item("OrderDate")
                        .OrderRetrieveDate = dr.Item("OrderRetrieveDate")
                        .PaidAmount = dr.Item("PaidAmount")
                        .Remark = dr.Item("Remark")
                        .StaffID = dr.Item("StaffID")
                        .TotalTG = dr.Item("TotalTG")
                        .TotalTK = dr.Item("TotalTK")
                        .IsRetrieved = dr.Item("IsRetrieved")
                        .OrderInvoiceID = dr.Item("OrderInvoiceID")
                        .OrderRate = dr.Item("OrderRate")
                        .EstimateGoldTG = dr.Item("EstimateGoldTG")
                        .EstimateGoldTK = dr.Item("EstimateGoldTK")
                        .PayGoldTG = dr.Item("PayGoldTG")
                        .PayGoldTK = dr.Item("PayGoldTK")
                        .UserID = dr.Item("UserID")
                        .ReturnGoldTG = IIf(IsDBNull(dr.Item("ReturnGoldTG")) = True, "0", dr.Item("ReturnGoldTG"))
                        .ReturnGoldTK = IIf(IsDBNull(dr.Item("ReturnGoldTK")) = True, "0", dr.Item("ReturnGoldTK"))
                        .TotalAmount = IIf(IsDBNull(dr.Item("TotalAmount")) = True, "0", dr.Item("TotalAmount"))
                        .WasteGoldTG = IIf(IsDBNull(dr.Item("WasteGoldTG")) = True, "0", dr.Item("WasteGoldTG"))
                        .WasteGoldTK = IIf(IsDBNull(dr.Item("WasteGoldTK")) = True, "0", dr.Item("WasteGoldTK"))
                        .WidthLength = IIf(IsDBNull(dr.Item("WidthLength")) = True, "-", dr.Item("WidthLength"))
                    End With
                Next
                ''tbl_OrderInvoiceGemsItem  ***** Gems will not be changed for RETURN UPDATE CASE.

                ''tbl_ForSale Update IsExit and ExitDate From tbl_SaleInvoice
                Dim objInfoForSale As CommonInfo.SalesItemInfo
                Dim _ForSaleDA As SalesItem.ISalesItemDA = Factory.Instance.CreateSalesItemDA
                objInfoForSale = New CommonInfo.SalesItemInfo
                For Each dr As DataRow In tmp_SaleInvoice.Rows
                    With objInfoForSale
                        .ForSaleID = dr.Item("ForSaleID")
                        .IsExit = 1
                        .ExitDate = dr.Item("SDate")
                    End With
                    _ForSaleDA.UpdateSaleItemIsExit(objInfoForSale)
                Next

                ''tbl_OrderInvoice
                For Each dr As DataRow In tmp_OrderInvoice.Rows
                    If (dr.Item("ForSaleID") <> "" And dr.Item("IsRetrieved") = True) Then
                        With objInfoForSale
                            .ForSaleID = dr.Item("ForSaleID")
                            .IsExit = 1
                            .ExitDate = dr.Item("OrderRetrieveDate")
                        End With
                        _ForSaleDA.UpdateSaleItemIsExit(objInfoForSale)
                    End If
                Next
                ''tbl_DamageItem
                Dim tmpdrDamage() As DataRow
                For Each dr As DataRow In tmp_DamageItem.Rows
                    With objInfoForSale
                        .ForSaleID = dr.Item("ForSaleID")
                        .IsExit = 1
                        tmpdrDamage = tmp_Damage.Select("DamageID='" & dr.Item("DamageID") & "'")
                        .ExitDate = tmpdrDamage(0).Item("DDate")
                    End With
                    _ForSaleDA.UpdateSaleItemIsExit(objInfoForSale)
                Next

                Return True

            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Return False
            End Try
        End Function

        Public Function ImportDatabaseFromHO(ByVal DatabasePath As String, ByVal isStock As Boolean, ByVal Status As String, ByVal isDivided As Boolean, ByVal ExecuteScriptFile As String) As Boolean Implements IDatabaseExportImportDA.ImportDatabaseFromHO
            Dim tmpsqlDS As New DataSet
            Dim tmpLocation As New DataTable
            Dim tmpCustomer As New DataTable
            Dim tmpGemsCategory As New DataTable

            Dim tmpGoldQuality As New DataTable
            Dim tmpItemCategory As New DataTable
            Dim tmpItemName As New DataTable

            Dim tmpMeasurement As New DataTable
            Dim tmpStaff As New DataTable
            Dim tmpGenerateFormat As New DataTable

            Dim tmpStandardRate As New DataTable
            Dim tmpForSale As New DataTable
            Dim tmpForSaleGemsItem As New DataTable
            tmpsqlDS.ReadXml(DatabasePath, XmlReadMode.ReadSchema)
            If tmpsqlDS.Tables.Count > 0 Then
                If isStock = True Then
                    tmpForSale = tmpsqlDS.Tables("tbl_ForSale")
                    tmpForSaleGemsItem = tmpsqlDS.Tables("tbl_ForSaleGemsItem")
                ElseIf isDivided = True Then
                    tmpLocation = tmpsqlDS.Tables("tbl_Branch")
                    tmpGemsCategory = tmpsqlDS.Tables("tbl_GemsCategory")
                    tmpGoldQuality = tmpsqlDS.Tables("tbl_GoldQuality")
                    tmpItemCategory = tmpsqlDS.Tables("tbl_ItemCategory")
                    tmpItemName = tmpsqlDS.Tables("tbl_ItemName")
                    tmpMeasurement = tmpsqlDS.Tables("tbl_Measurement")
                    tmpGenerateFormat = tmpsqlDS.Tables("tbl_GenerateFormat")
                    tmpStaff = tmpsqlDS.Tables("tbl_Staff")
                End If
            End If

            Try

                Dim sqlbk As SqlBulkCopy


                If isStock = True Then


                    If Status = "New" Then

                        sqlbk = New SqlBulkCopy(AppConfiguration.ReadConnectionString)
                        With sqlbk
                            Dim dtStock As DataTable
                            For Each dr As DataRow In tmpForSale.Rows
                                dtStock = _objSalesItemDA.GetForSaleDataByForSaleID(dr.Item("ForSaleID")) 'Check Stock Id 
                                If dtStock.Rows.Count > 0 Then
                                    MsgBox("Stock ID Already Exist! Please Import by Update Stock.", MsgBoxStyle.Exclamation, "TMS")
                                    Return False
                                Else
                                    dr.Item("IsExit") = 0
                                    dr.Item("ExitDate") = DBNull.Value
                                    dr.Item("LocationID") = Global_CurrentLocationID
                                End If
                            Next
                            .DestinationTableName = "tbl_ForSale"
                            .WriteToServer(tmpForSale)
                            .DestinationTableName = "tbl_ForSaleGemsItem"
                            .WriteToServer(tmpForSaleGemsItem)
                        End With

                    ElseIf Status = "Update" Then
                        ''#####################################   UPDATE CASE FOR Edit Stock  #######################################
                        '*** tbl_ForSale
                        Dim _ForSaleDA As SalesItem.ISalesItemDA = Factory.Instance.CreateSalesItemDA
                        Dim infoForSale As CommonInfo.SalesItemInfo
                        Dim infoForSaleGems As CommonInfo.SalesItemGemsInfo
                        Dim tmpItem As New DataTable
                        Dim _TransferDA As Transfer.ITransferDA = Factory.Instance.CreateTransferDA
                        For Each dr As DataRow In tmpForSale.Rows
                                infoForSale = New CommonInfo.SalesItemInfo
                                Try
                                    With infoForSale
                                        .ForSaleID = dr.Item("ForSaleID")
                                        .ItemCode = dr.Item("ItemCode")
                                        .ItemNameID = dr.Item("ItemNameID")
                                        .Length = dr.Item("Length")
                                        .GoldQualityID = dr.Item("GoldQualityID")
                                        .ItemCategoryID = dr.Item("ItemCategoryID")
                                        .GivenDate = dr.Item("GivenDate")
                                        .GoldTK = dr.Item("GoldTK")
                                        .GoldTG = dr.Item("GoldTG")
                                        .GemsTK = dr.Item("GemsTK")
                                        .GemsTG = dr.Item("GemsTG")
                                        .WasteTK = dr.Item("WasteTK")
                                        .WasteTG = dr.Item("WasteTG")
                                        .ItemTK = dr.Item("ItemTK")
                                        .ItemTG = dr.Item("ItemTG")
                                        .TotalTK = dr.Item("TotalTK")
                                        .TotalTG = dr.Item("TotalTG")
                                        .IsExit = 0
                                        .LastModifiedLoginUserName = dr.Item("LastModifiedLoginUserName")
                                        .LastModifiedDate = dr.Item("LastModifiedDate")
                                        .Width = dr.Item("Width")
                                        If IIf(IsDBNull(dr.Item("IsFixPrice")), False, dr.Item("IsFixPrice")) = False Then
                                            .IsFixPrice = 0
                                        Else
                                            .IsFixPrice = 1
                                        End If
                                        .FixPrice = IIf(IsDBNull(dr.Item("FixPrice")) = True, 0, dr.Item("FixPrice"))
                                        .DesignCharges = IIf(IsDBNull(dr.Item("DesignCharges")), 0, dr.Item("DesignCharges"))
                                        .PlatingCharges = IIf(IsDBNull(dr.Item("PlatingCharges")), 0, dr.Item("PlatingCharges"))
                                        .MountingCharges = IIf(IsDBNull(dr.Item("MountingCharges")), 0, dr.Item("MountingCharges"))
                                        .WhiteCharges = IIf(IsDBNull(dr.Item("WhiteCharges")), 0, dr.Item("WhiteCharges"))
                                        .IsOriginalFixedPrice = IIf(IsDBNull(dr.Item("IsOriginalFixedPrice")), 0, dr.Item("IsOriginalFixedPrice"))
                                        .OriginalFixedPrice = IIf(IsDBNull(dr.Item("OriginalFixedPrice")), "0", dr.Item("OriginalFixedPrice"))
                                        .IsOriginalPriceGram = IIf(IsDBNull(dr.Item("IsOriginalPriceGram")), "0", dr.Item("IsOriginalPriceGram"))
                                        .OriginalPriceGram = IIf(IsDBNull(dr.Item("OriginalPriceGram")), "0", dr.Item("OriginalPriceGram"))
                                        .OriginalPriceTK = IIf(IsDBNull(dr.Item("OriginalPriceTK")), "0", dr.Item("OriginalPriceTK"))
                                        .OriginalGemsPrice = IIf(IsDBNull(dr.Item("OriginalGemsPrice")), "0", dr.Item("OriginalGemsPrice"))
                                        .OriginalOtherPrice = IIf(IsDBNull(dr.Item("OriginalOtherPrice")), "0", dr.Item("OriginalOtherPrice"))
                                        .Photo = IIf(IsDBNull(dr.Item("Photo")), "0", dr.Item("Photo"))
                                        .SellingPrice = IIf(IsDBNull(dr.Item("SellingPrice")), "0", dr.Item("SellingPrice"))
                                        .LocationID = Global_CurrentLocationID
                                        .IsOrder = IIf(IsDBNull(dr.Item("IsOrder")), 0, dr.Item("IsOrder"))
                                        .IsClosed = IIf(IsDBNull(dr.Item("IsClosed")), 0, dr.Item("IsClosed"))
                                        .OrderReceiveDetailID = dr.Item("OrderReceiveDetailID")
                                        .IsVolume = IIf(IsDBNull(dr.Item("IsVolume")), 0, dr.Item("IsVolume"))
                                        .QTY = IIf(IsDBNull(dr.Item("QTY")), 0, dr.Item("QTY"))
                                        .StaffID = IIf(IsDBNull(dr.Item("StaffID")), 0, dr.Item("StaffID"))
                                        .LossQTY = IIf(IsDBNull(dr.Item("LossQTY")), 0, dr.Item("LossQTY"))
                                        .LossItemTK = dr.Item("LossItemTK")
                                        .LossItemTG = dr.Item("LossItemTG")
                                        .TotalGemPrice = dr.Item("TotalGemPrice")
                                        .PurchaseWasteTK = dr.Item("PurchaseWasteTK")
                                        .PurchaseWasteTG = dr.Item("PurchaseWasteTG")
                                        .GoldSmith = IIf(IsDBNull(dr.Item("GoldSmith")), "", dr.Item("GoldSmith"))
                                        .Remark = IIf(IsDBNull(dr.Item("Remark")), "", dr.Item("Remark"))
                                        .IsDiamond = IIf(IsDBNull(dr.Item("IsDiamond")), "0", dr.Item("IsDiamond"))
                                        .OriginalCode = IIf(IsDBNull(dr.Item("OriginalCode")), "0", dr.Item("OriginalCode"))
                                        .PriceCode = IIf(IsDBNull(dr.Item("PriceCode")), "0", dr.Item("PriceCode"))
                                        .Color = IIf(IsDBNull(dr.Item("Color")), "", dr.Item("Color"))
                                        .SupplierID = IIf(IsDBNull(dr.Item("SupplierID")), "", dr.Item("SupplierID"))
                                        .SupplierVou = IIf(IsDBNull(dr.Item("SupplierVou")), "", dr.Item("SupplierVou"))
                                    .GoldSmithID = IIf(IsDBNull(dr.Item("GoldSmithID")), "", dr.Item("GoldSmithID"))
                                    .WReturnDate = IIf(IsDBNull(dr.Item("WReturnDate")), "1900-01-01", dr.Item("WReturnDate"))
                                    .IsSolidVolume = IIf(IsDBNull(dr.Item("IsSolidVolume")), "0", dr.Item("IsSolidVolume"))
                                    .SellingRate = IIf(IsDBNull(dr.Item("SellingRate")), "0", dr.Item("SellingRate"))
                                    .IsCheck = IIf(IsDBNull(dr.Item("IsCheck")), "0", dr.Item("IsCheck"))
                                    .WSFixPrice = IIf(IsDBNull(dr.Item("WSFixPrice")), "0", dr.Item("WSFixPrice"))
                                    .IsLooseDiamond = IIf(IsDBNull(dr.Item("IsLooseDiamond")), "0", dr.Item("IsLooseDiamond"))
                                    .SDGemsCategoryID = IIf(IsDBNull(dr.Item("SDGemsCategoryID")), "0", dr.Item("SDGemsCategoryID"))
                                    .Shape = IIf(IsDBNull(dr.Item("Shape")), "0", dr.Item("Shape"))
                                    .Clarity = IIf(IsDBNull(dr.Item("Clarity")), "0", dr.Item("Clarity"))
                                    .SDGemsName = IIf(IsDBNull(dr.Item("SDGemsName")), "0", dr.Item("SDGemsName"))
                                    .SDYOrCOrG = IIf(IsDBNull(dr.Item("SDYOrCorG")), "0", dr.Item("SDYOrCorG"))
                                    .OriginalPriceCarat = IIf(IsDBNull(dr.Item("OriginalPriceCarat")), "0", dr.Item("OriginalPriceCarat"))
                                    .IsOriginalPriceCarat = IIf(IsDBNull(dr.Item("IsOriginalPriceCarat")), "0", dr.Item("IsOriginalPriceCarat"))
                                    .SDGemsTW = IIf(IsDBNull(dr.Item("SDGemsTW")), "0", dr.Item("SDGemsTW"))
                                    .TotalCost = IIf(IsDBNull(dr.Item("TotalCost")), "0", dr.Item("TotalCost"))
                                End With
                            Catch ex As Exception
                                'MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                                Return False
                            End Try
                            _ForSaleDA.UpdateForSale(infoForSale)
                            tmpItem = _TransferDA.GetTransferByForSaleID(dr.Item("ForSaleID"))
                            If tmpItem.Rows.Count > 0 Then
                                _TransferDA.UpdateTransferItemReturn(dr)
                            End If
                            Dim tmpdrForSaleGems() As DataRow
                            tmpdrForSaleGems = tmpForSaleGemsItem.Select("ForSaleID='" & dr.Item("ForSaleID") & "'")
                            If tmpdrForSaleGems.Length > 0 Then
                                For k As Integer = 0 To UBound(tmpdrForSaleGems)
                                    infoForSaleGems = New CommonInfo.SalesItemGemsInfo
                                    With infoForSaleGems
                                        .ForSaleID = tmpdrForSaleGems(k).Item("ForSaleID")
                                        .ForSaleGemsItemID = tmpdrForSaleGems(k).Item("ForSaleGemsItemID")
                                        .GemsCategoryID = tmpdrForSaleGems(k).Item("GemsCategoryID")
                                        .GemsName = tmpdrForSaleGems(k).Item("GemsName")
                                        .GemsTK = tmpdrForSaleGems(k).Item("GemsTK")
                                        .GemsTG = tmpdrForSaleGems(k).Item("GemsTG")
                                        .YOrCOrG = tmpdrForSaleGems(k).Item("YOrCOrG")
                                        .GemsTW = tmpdrForSaleGems(k).Item("GemsTW")
                                        .Qty = tmpdrForSaleGems(k).Item("Qty")
                                        .Type = tmpdrForSaleGems(k).Item("Type")
                                        .UnitPrice = tmpdrForSaleGems(k).Item("UnitPrice")
                                        .Amount = tmpdrForSaleGems(k).Item("Amount")
                                        .GemsRemark = tmpdrForSaleGems(k).Item("GemsRemark")
                                        .SaleByDefinePrice = tmpdrForSaleGems(k).Item("SaleByDefinePrice")
                                    End With
                                    _ForSaleDA.UpdateForSaleGems(infoForSaleGems)
                                Next k
                            End If
                        Next
                        'Else
                        '    ''#####################################   UPDATE CASE FOR Return Stock  #######################################
                        '    '*** tbl_ForSale
                        '    Dim _ForSaleDA As SalesItem.ISalesItemDA = Factory.Instance.CreateSalesItemDA
                        '    Dim _TransferDA As Transfer.ITransferDA = Factory.Instance.CreateTransferDA
                        '    Dim infoForSale As CommonInfo.SalesItemInfo
                        '    Dim infoForSaleGems As CommonInfo.SalesItemGemsInfo
                        '    For Each dr As DataRow In tmpForSale.Rows
                        '        infoForSale = New CommonInfo.SalesItemInfo

                        '        With infoForSale
                        '            .ForSaleID = dr.Item("ForSaleID")
                        '            .ItemCode = dr.Item("ItemCode")
                        '            .ItemNameID = dr.Item("ItemNameID")
                        '            .Length = dr.Item("Length")
                        '            .GoldQualityID = dr.Item("GoldQualityID")
                        '            .ItemCategoryID = dr.Item("ItemCategoryID")
                        '            .GivenDate = dr.Item("GivenDate")
                        '            .GoldTK = dr.Item("GoldTK")
                        '            .GoldTG = dr.Item("GoldTG")
                        '            .GemsTK = dr.Item("GemsTK")
                        '            .GemsTG = dr.Item("GemsTG")
                        '            .WasteTK = dr.Item("WasteTK")
                        '            .WasteTG = dr.Item("WasteTG")
                        '            .ItemTK = dr.Item("ItemTK")
                        '            .ItemTG = dr.Item("ItemTG")
                        '            .TotalTK = dr.Item("TotalTK")
                        '            .TotalTG = dr.Item("TotalTG")
                        '            .IsExit = 0
                        '            .LastModifiedLoginUserName = dr.Item("LastModifiedLoginUserName")
                        '            .LastModifiedDate = dr.Item("LastModifiedDate")
                        '            .Width = dr.Item("Width")
                        '            If dr.Item("IsFixPrice") = False Then
                        '                .IsFixPrice = 0
                        '            Else
                        '                .IsFixPrice = 1
                        '            End If
                        '            .FixPrice = IIf(IsDBNull(dr.Item("FixPrice")) = True, "0", dr.Item("FixPrice"))
                        '            .DesignCharges = dr.Item("DesignCharges")
                        '            .PlatingCharges = dr.Item("PlatingCharges")
                        '            .MountingCharges = dr.Item("MountingCharges")
                        '            .WhiteCharges = dr.Item("WhiteCharges")
                        '            .IsOriginalFixedPrice = dr.Item("IsOriginalFixedPrice")
                        '            .OriginalFixedPrice = dr.Item("OriginalFixedPrice")
                        '            .IsOriginalPriceGram = dr.Item("IsOriginalPriceGram")
                        '            .OriginalPriceGram = dr.Item("OriginalPriceGram")
                        '            .OriginalPriceTK = dr.Item("OriginalPriceTK")
                        '            .OriginalGemsPrice = dr.Item("OriginalGemsPrice")
                        '            .OriginalOtherPrice = dr.Item("OriginalOtherPrice")
                        '            .Photo = dr.Item("Photo")
                        '            .SellingPrice = dr.Item("SellingPrice")
                        '            .LocationID = Global_CurrentLocationID
                        '            .IsOrder = dr.Item("IsOrder")
                        '            .IsClosed = dr.Item("IsClosed")
                        '            .OrderReceiveDetailID = dr.Item("OrderReceiveDetailID")
                        '            .IsVolume = dr.Item("IsVolume")
                        '            .QTY = dr.Item("QTY")
                        '            .StaffID = dr.Item("StaffID")
                        '            .LossQTY = dr.Item("LossQTY")
                        '            .LossItemTK = dr.Item("LossItemTK")
                        '            .LossItemTG = dr.Item("LossItemTG")
                        '            .TotalGemPrice = dr.Item("TotalGemPrice")
                        '            .PurchaseWasteTK = dr.Item("PurchaseWasteTK")
                        '            .PurchaseWasteTG = dr.Item("PurchaseWasteTG")
                        '            .GoldSmith = dr.Item("GoldSmith")
                        '            .Remark = dr.Item("Remark")
                        '            .IsDiamond = dr.Item("IsDiamond")
                        '            .OriginalCode = dr.Item("OriginalCode")
                        '            .PriceCode = dr.Item("PriceCode")
                        '        End With
                        '        _ForSaleDA.UpdateForSale(infoForSale)
                        '        _TransferDA.UpdateTransferItemReturn(dr)
                        '        Dim tmpdrForSaleGems() As DataRow
                        '        tmpdrForSaleGems = tmpForSaleGemsItem.Select("ForSaleID='" & dr.Item("ForSaleID") & "'")
                        '        If tmpdrForSaleGems.Length > 0 Then
                        '            For k As Integer = 0 To UBound(tmpdrForSaleGems)
                        '                infoForSaleGems = New CommonInfo.SalesItemGemsInfo
                        '                With infoForSaleGems
                        '                    .ForSaleID = tmpdrForSaleGems(k).Item("ForSaleID")
                        '                    .ForSaleGemsItemID = tmpdrForSaleGems(k).Item("ForSaleGemsItemID")
                        '                    .GemsCategoryID = tmpdrForSaleGems(k).Item("GemsCategoryID")
                        '                    .GemsName = tmpdrForSaleGems(k).Item("GemsName")
                        '                    .GemsTK = tmpdrForSaleGems(k).Item("GemsTK")
                        '                    .GemsTG = tmpdrForSaleGems(k).Item("GemsTG")
                        '                    .YOrCOrG = tmpdrForSaleGems(k).Item("YOrCOrG")
                        '                    .GemsTW = tmpdrForSaleGems(k).Item("GemsTW")
                        '                    .Qty = tmpdrForSaleGems(k).Item("Qty")
                        '                    .Type = tmpdrForSaleGems(k).Item("Type")
                        '                    .UnitPrice = tmpdrForSaleGems(k).Item("UnitPrice")
                        '                    .Amount = tmpdrForSaleGems(k).Item("Amount")
                        '                    .GemsRemark = tmpdrForSaleGems(k).Item("GemsRemark")
                        '                End With
                        '                _ForSaleDA.UpdateForSaleGems(infoForSaleGems)
                        '            Next k
                        '        End If
                        '    Next
                    End If

                ElseIf isDivided = True Then

                    Execute_Script(ExecuteScriptFile, AppConfiguration.ReadConnectionString)
                    sqlbk = New SqlBulkCopy(AppConfiguration.ReadConnectionString)
                    With sqlbk
                        .DestinationTableName = "tbl_Branch"
                        .WriteToServer(tmpLocation)
                        .DestinationTableName = "tbl_GemsCategory"
                        .WriteToServer(tmpGemsCategory)
                        .DestinationTableName = "tbl_GoldQuality"
                        .WriteToServer(tmpGoldQuality)
                        .DestinationTableName = "tbl_ItemCategory"
                        .WriteToServer(tmpItemCategory)
                        .DestinationTableName = "tbl_ItemName"
                        .WriteToServer(tmpItemName)
                        .DestinationTableName = "tbl_Measurement"
                        .WriteToServer(tmpMeasurement)
                        .DestinationTableName = "tbl_GenerateFormat"
                        .WriteToServer(tmpGenerateFormat)
                        .DestinationTableName = "tbl_Staff"
                        .WriteToServer(tmpStaff)
                    End With

                End If
                Return True
            Catch ex As Exception
                'MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Return False
            End Try
        End Function

        Public Function CreateAccessConnectionString(ByVal FileName As String, ByVal PPassword As String) As String Implements IDatabaseExportImportDA.CreateAccessConnectionString
            Dim str As String = ""
            If InStr(FileName, ".mdb", CompareMethod.Text) <= 0 Then
                FileName = FileName & ".mdb"
            End If
            str = String.Format("Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};", FileName)
            If DBPassword <> "" Then
                str = str & String.Format("Jet OLEDB:Database Password={0}", PPassword)
            End If
            Return str
        End Function

        Public Function IsExistsConfiguration() As Boolean Implements IDatabaseExportImportDA.IsExistsConfiguration
            Dim IsReturn As Boolean
            Try
                Dim DB As Microsoft.Practices.EnterpriseLibrary.Data.Database
                DB = DatabaseFactory.CreateDatabase
                DB.CreateConnection().Open()
                IsReturn = True
                DB.CreateConnection.Close()
                Return IsReturn
            Catch ex As Exception
                Return False
            End Try

        End Function

        Public Function UpdateIsUploaded(Optional ByVal dt As String = "") As Boolean Implements IDatabaseExportImportDA.UpdateIsUploaded
            Dim bool As Boolean


            If (dtShareTransferReturn.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareTransferReturn.Rows.Count - 1

                    bool = UpdateUploadbyDatatable("tbl_TransferReturn", "Where TransferReturnID='" & dtShareTransferReturn.Rows(j).Item("TransferReturnID").ToString & "'")
                Next
            End If
            If (dtShareTransferReturnDiamond.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareTransferReturnDiamond.Rows.Count - 1

                    bool = UpdateUploadbyDatatable("tbl_TransferReturnDiamond", "Where TransferReturnID='" & dtShareTransferReturnDiamond.Rows(j).Item("TransferReturnID").ToString & "'")
                Next
            End If
            If (dtShareTransfer.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareTransfer.Rows.Count - 1

                    bool = UpdateSyncbyDatatable("tbl_Transfer", "Where TransferID ='" & dtShareTransfer.Rows(j).Item("TransferID").ToString & "'")
                Next
            End If
            If (dtShareStock.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareStock.Rows.Count - 1

                    bool = UpdateSyncbyDatatable("tbl_ForSale", "Where ForSaleID='" & dtShareStock.Rows(j).Item("ForSaleID").ToString & "'")
                Next
            End If
            If (dtShareStockTR.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareStockTR.Rows.Count - 1

                    bool = UpdateSyncbyDatatable("tbl_ForSale", "Where ForSaleID='" & dtShareStockTR.Rows(j).Item("ForSaleID").ToString & "'")
                Next
            End If
            If (dtShareStockTRDiamond.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareStockTRDiamond.Rows.Count - 1

                    bool = UpdateSyncbyDatatable("tbl_ForSale", "Where ForSaleID='" & dtShareStockTRDiamond.Rows(j).Item("ForSaleID").ToString & "'")
                Next
            End If
            If (dtShareTransferDiamond.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareTransferDiamond.Rows.Count - 1

                    bool = UpdateSyncbyDatatable("tbl_TransferLooseDiamond", "Where TransferID ='" & dtShareTransferDiamond.Rows(j).Item("TransferID").ToString & "'")
                Next
            End If
            If (dtShareStockDiamond.Rows.Count > 0) Then
                For j As Integer = 0 To dtShareStockDiamond.Rows.Count - 1

                    bool = UpdateSyncbyDatatable("tbl_ForSale", "Where ForSaleID='" & dtShareStockDiamond.Rows(j).Item("ForSaleID").ToString & "'")
                Next
            End If

        End Function
        Private Function UpdateUploadbyDatatable(ByVal dt As String, ByVal cri As String) As Boolean
            Dim strCommandText As String
            Dim DBcomm As DbCommand

            Try
                Dim dtsale As New DataTable

                strCommandText = "UPDATE " & dt & " SET  IsUpload=1 " & cri

                DBcomm = DB.GetSqlStringCommand(strCommandText)
                DBcomm.CommandTimeout = 0

                If DB.ExecuteNonQuery(DBcomm) > 0 Then
                    Return True
                Else
                    Return False
                End If
            Catch ex As Exception
                WriteEventlogs("UpdateIsUploaded : " & ex.Message)
                Return False
            End Try
            DBcomm.Connection.Close()
            Return True
        End Function

        Private Function UpdateSyncbyDatatable(ByVal dt As String, ByVal cri As String) As Boolean
            Dim strCommandText As String
            Dim DBcomm As DbCommand

            Try
                Dim dtsale As New DataTable

                strCommandText = "UPDATE " & dt & " SET  IsSync=1 " & cri

                DBcomm = DB.GetSqlStringCommand(strCommandText)
                DBcomm.CommandTimeout = 0

                If DB.ExecuteNonQuery(DBcomm) > 0 Then
                    Return True
                Else
                    Return False
                End If
            Catch ex As Exception
                WriteEventlogs("UpdateSyncbyDatatable : " & ex.Message)
                Return False
            End Try
            DBcomm.Connection.Close()
            Return True
        End Function

        'Public Function UpdateIsExitForHOFromSaleInvoiceBranch(ByVal dtForSale As DataTable)
        '    Dim objInfoForSale As CommonInfo.SalesItemInfo
        '    'Dim _SalesInvoiceDA As SalesInvoice.ISalesInvoiceDA = Factory.Instance.CreateSalesInvoiceDA
        '    Dim _ForSaleDA As SalesItem.ISalesItemDA = Factory.Instance.CreateSalesItemDA
        '    For Each dr As DataRow In dtForSale.Rows
        '        objInfoForSale = New CommonInfo.SalesItemInfo
        '        With objInfoForSale
        '            .ForSaleID = dr.Item("ForSaleID")
        '            .IsExit = dr.Item("IsExit")
        '            .ExitDate = dr.Item("ExitDate")
        '        End With
        '        _ForSaleDA.UpdateSaleItemIsExit(objInfoForSale)
        '    Next
        'End Function

        Public Function CreateDataBaseForTransfer(ByVal ScriptFile As String, ByVal DatabasePath As String, ByVal TransferID As String, ByVal UserIDs As String, ByVal UserLevelIDs As String) As Boolean Implements IDatabaseExportImportDA.CreateDataBaseForTransfer

            Dim cat As New ADOX.Catalog

            cat.Create(Me.CreateAccessConnectionString(DatabasePath, ""))
            cat = Nothing

            Dim strCommandText As String
            Dim DBComm As DbCommand

            Try
                ' ''tb_GE_SystemUser
                ''strCommandText = " SELECT [SysID],[UserID],[UserName],[Password],[UserLevelID],[Remark] " _
                ''& " INTO [" & DatabasePath & "].tb_GE_SystemUser " _
                ''& " FROM tb_GE_SystemUser WHERE SysID IN (" & UserIDs & ")"
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.ExecuteNonQuery(DBComm)

                ' ''tb_GE_UserLevel
                ''strCommandText = " SELECT UL.[SysID],UL.[UserLevel],UL.[Description],UL.[IsAdministrator],UL.[Remark] " _
                ''& " INTO [" & DatabasePath & "].tb_GE_UserLevel " _
                ''& " FROM tb_GE_UserLevel UL INNER JOIN tb_GE_SystemUser SU ON UL.SysID = SU.UserLevelID WHERE SU.SysID IN (" & UserIDs & ");"
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.ExecuteNonQuery(DBComm)

                ' ''tb_GE_UserMenu
                ''strCommandText = " SELECT [MenuID],[MenuName]," & UserLevelIDs _
                ''& " INTO [" & DatabasePath & "].tb_GE_UserMenu " _
                ''& " FROM tb_GE_UserMenu "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.ExecuteNonQuery(DBComm)

                ' ''tbl_Branches
                ''strCommandText = " SELECT [OPID],[OPCode],[Location] " _
                ''& " INTO [" & DatabasePath & "].tbl_Branches " _
                ''& " FROM tbl_Branches WHERE OPID= @OPID"
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@OPID", DbType.Int16, BranchID)
                ''DB.ExecuteNonQuery(DBComm)

                ' ''tbl_CurrentBranch
                ''strCommandText = " SELECT " & BranchID & " AS [CurrentOPID]" _
                ''& " INTO [" & DatabasePath & "].tbl_CurrentOP "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.ExecuteNonQuery(DBComm)

                ' ''tbl_KeywordHeader
                ''strCommandText = "SELECT KeywordID, KeywordName " _
                ''& " INTO [" & DatabasePath & "].tbl_KeywordHeader " _
                ''& " FROM tbl_KeywordHeader "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.ExecuteNonQuery(DBComm)

                ' ''tbl_KeywordItem
                ''strCommandText = "SELECT ItemID,KeywordID,ItemName , Category " _
                ''& " INTO [" & DatabasePath & "].tbl_KeywordItem " _
                ''& " FROM tbl_KeywordItem "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.ExecuteNonQuery(DBComm)

                ' ''tbl_key_generate
                ''strCommandText = "SELECT GenerateKeyType,GenerateFormat,GenerateID " _
                ''& " INTO [" & DatabasePath & "].tbl_key_generate " _
                ''& " FROM tbl_key_generate WHERE GenerateKeyType IN ('KeywordHeader','KeywordItem') "
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.ExecuteNonQuery(DBComm)


                '' ''tbl_IEC
                ' ''strCommandText = " SELECT IECID, IECCode, IECActivity, [Language], [Type], IsInactive " _
                ' ''& " INTO [" & DatabasePath & "].tbl_IEC " _
                ' ''& " FROM tbl_IEC"
                ' ''DBComm = Nothing
                ' ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ' ''DB.ExecuteNonQuery(DBComm)

                ' ''tbl_FieldStaff
                ''strCommandText = " SELECT  StaffID,OPID,StaffCode,StaffName,DOB,NID,Sex,Address,HomeTown, Phone,Edu,[Position],Town,Office,StartDate,IsResign,ResignDate" _
                ''& " INTO [" & DatabasePath & "].tbl_FieldStaff " _
                ''& " FROM tbl_FieldStaff WHERE OPID= @OPID"
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.AddInParameter(DBComm, "@OPID", DbType.Int16, BranchID)
                ''DB.ExecuteNonQuery(DBComm)


                Execute_Script(ScriptFile, Me.CreateAccessConnectionString(DatabasePath, ""))

                Return True
            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
                Return False
            End Try
            Return True
        End Function

        Public Function ImportDatabaseFromTransfer(ByVal DatabasePath As String) As Boolean Implements IDatabaseExportImportDA.ImportDatabaseFromTransfer
            Dim tmpsqlDS As New DataSet
            Dim tmpForSale As New DataTable
            Dim tmpForSaleGemsItem As New DataTable

            tmpsqlDS.ReadXml(DatabasePath, XmlReadMode.ReadSchema)
            If tmpsqlDS.Tables.Count > 0 Then
                tmpForSale = tmpsqlDS.Tables("tbl_ForSale")
                tmpForSaleGemsItem = tmpsqlDS.Tables("tbl_ForSaleGemsItem")
            End If
            Dim DBcomm As DbCommand
            Dim strCommandText As String
            Dim dsUpdate As DataSet
            Dim tmpdr As DataRow
            Try

                ''*** tbl_ForSale
                dsUpdate = New DataSet
                strCommandText = "SELECT * " _
                    & " FROM tbl_ForSale WHERE 1=2 "
                DBcomm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBcomm, dsUpdate, "tbl_ForSale")
                If tmpForSale.Rows.Count > 0 Then
                    For Each dr As DataRow In tmpForSale.Rows
                        tmpdr = dsUpdate.Tables(0).NewRow
                        For i As Integer = 0 To tmpForSale.Columns.Count - 1
                            tmpdr(i) = dr(i)
                        Next
                        dsUpdate.Tables(0).Rows.Add(tmpdr)
                    Next
                End If
                ''**** For DB command
                Dim daForSale As DbDataAdapter = DB.GetDataAdapter()
                With daForSale
                    .DeleteCommand = DB.GetSqlStringCommand("DELETE FROM tbl_ForSale WHERE 1=2")

                    .InsertCommand = DB.GetSqlStringCommand("Insert into tbl_ForSale ( ForSaleID,ItemCode,ItemName,Length,GoldQualityID,ItemCategoryID,LocationID,GivenDate,GoldTK,GoldTG,GemsTK,GemsTG,WasteTK,WasteTG,TotalNoWasteTK,TotalNoWasteTG,TotalTK,TotalTG,IsExit,ExitDate,LastModifiedLoginUserName,LastModifiedDate,Width,IsFixPrice,FixPrice,OriginalPrice,OriginalGemsPrice)" & _
                    " Values (@ForSaleID,@ItemCode,@ItemName,@Length,@GoldQualityID,@ItemCategoryID,@LocationID,@GivenDate,@GoldTK,@GoldTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@TotalNoWasteTK,@TotalNoWasteTG,@TotalTK,@TotalTG,0,null,@LastModifiedLoginUserName,@LastModifiedDate,@Width,@IsFixPrice,@FixPrice,@OriginalPrice,@OriginalGemsPrice)")
                    DB.AddInParameter(.InsertCommand, "@ForSaleID", DbType.String, "ForSaleID", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@ItemCode", DbType.String, "ItemCode", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@ItemName", DbType.String, "ItemName", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@Length", DbType.String, "Length", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GoldQualityID", DbType.String, "GoldQualityID", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@ItemCategoryID", DbType.String, "ItemCategoryID", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@LocationID", DbType.String, "LocationID", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GivenDate", DbType.Date, "GivenDate", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GoldTK", DbType.Decimal, "GoldTK", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GoldTG", DbType.Decimal, "GoldTG", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GemsTK", DbType.Decimal, "GemsTK", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GemsTG", DbType.Decimal, "GemsTG", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@WasteTK", DbType.Decimal, "WasteTK", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@WasteTG", DbType.Decimal, "WasteTG", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@TotalNoWasteTK", DbType.Decimal, "TotalNoWasteTK", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@TotalNoWasteTG", DbType.Decimal, "TotalNoWasteTG", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@TotalTK", DbType.Decimal, "TotalTK", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@TotalTG", DbType.Decimal, "TotalTG", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@LastModifiedLoginUserName", DbType.String, "LastModifiedLoginUserName", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@LastModifiedDate", DbType.Date, "LastModifiedDate", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@Width", DbType.String, "Width", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@IsFixPrice", DbType.Boolean, "IsFixPrice", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@FixPrice", DbType.Int64, "FixPrice", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@OriginalPrice", DbType.Int64, "OriginalPrice", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@OriginalGemsPrice", DbType.Int64, "OriginalGemsPrice", DataRowVersion.Default)

                    .UpdateCommand = DB.GetSqlStringCommand("Update tbl_ForSale set ItemCode=@ItemCode,ItemName= @ItemName , Length= @Length , GoldQualityID= @GoldQualityID , ItemCategoryID= @ItemCategoryID , LocationID= @LocationID ,  GivenDate= @GivenDate , GoldTK= @GoldTK , GoldTG= @GoldTG , GemsTK= @GemsTK , GemsTG= @GemsTG , WasteTK= @WasteTK , WasteTG= @WasteTG , TotalNoWasteTK=@TotalNoWasteTK,TotalNoWasteTG=@TotalNoWasteTG, TotalTK= @TotalTK , TotalTG= @TotalTG , IsExit= @IsExit , ExitDate=@ExitDate, LastModifiedLoginUserName= @LastModifiedLoginUserName , LastModifiedDate=@LastModifiedDate,Width=@Width,IsFixPrice=@IsFixPrice,FixPrice=@FixPrice WHERE 1=2")
                    DB.AddInParameter(.UpdateCommand, "@ForSaleID", DbType.String, "ForSaleID", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@ItemCode", DbType.String, "ItemCode", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@ItemName", DbType.String, "ItemName", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@Length", DbType.String, "Length", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GoldQualityID", DbType.String, "GoldQualityID", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@ItemCategoryID", DbType.String, "ItemCategoryID", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@LocationID", DbType.String, "LocationID", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GivenDate", DbType.Date, "GivenDate", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GoldTK", DbType.Decimal, "GoldTK", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GoldTG", DbType.Decimal, "GoldTG", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GemsTK", DbType.Decimal, "GemsTK", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GemsTG", DbType.Decimal, "GemsTG", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@WasteTK", DbType.Decimal, "WasteTK", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@WasteTG", DbType.Decimal, "WasteTG", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@TotalNoWasteTK", DbType.Decimal, "TotalNoWasteTK", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@TotalNoWasteTG", DbType.Decimal, "TotalNoWasteTG", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@TotalTK", DbType.Decimal, "TotalTK", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@TotalTG", DbType.Decimal, "TotalTG", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@IsExit", DbType.Boolean, "IsExit", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@ExitDate", DbType.Date, "ExitDate", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@LastModifiedLoginUserName", DbType.String, "LastModifiedLoginUserName", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@LastModifiedDate", DbType.Date, "LastModifiedDate", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@Width", DbType.String, "Width", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@IsFixPrice", DbType.Boolean, "IsFixPrice", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@FixPrice", DbType.Int64, "FixPrice", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@OriginalPrice", DbType.Int64, "OriginalPrice", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@OriginalGemsPrice", DbType.Int64, "OriginalGemsPrice", DataRowVersion.Default)
                    ''**** For DB command
                    DB.UpdateDataSet(dsUpdate, "tbl_ForSale", .InsertCommand, .UpdateCommand, .DeleteCommand, UpdateBehavior.Transactional)
                End With

                ''*** tbl_ForSaleGemsItem
                dsUpdate = New DataSet
                strCommandText = "SELECT * " _
                    & " FROM tbl_ForSaleGemsItem WHERE 1=2 "
                DBcomm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBcomm, dsUpdate, "tbl_ForSaleGemsItem")
                If tmpForSaleGemsItem.Rows.Count > 0 Then


                    For Each dr As DataRow In tmpForSaleGemsItem.Rows
                        tmpdr = dsUpdate.Tables(0).NewRow
                        For i As Integer = 0 To tmpForSaleGemsItem.Columns.Count - 1
                            tmpdr(i) = dr(i)
                        Next
                        dsUpdate.Tables(0).Rows.Add(tmpdr)
                    Next
                End If
                ''**** For DB command
                Dim daForSaleGemsItem As DbDataAdapter = DB.GetDataAdapter
                With daForSaleGemsItem
                    .DeleteCommand = DB.GetSqlStringCommand("DELETE FROM tbl_ForSaleGemsItem WHERE 1=2")

                    .InsertCommand = DB.GetSqlStringCommand("Insert into tbl_ForSaleGemsItem ( ForSaleGemsItemID,ForSaleID,GemsCategoryID,GemsName,GemsTK,GemsTG,YOrCOrG,GemsTW,Qty,Type,UnitPrice,Amount) " & _
                    " Values (@ForSaleGemsItemID,@ForSaleID,@GemsCategoryID,@GemsName,@GemsTK,@GemsTG,@YOrCOrG,@GemsTW,@Qty,@Type,@UnitPrice,@Amount)")
                    DB.AddInParameter(.InsertCommand, "@ForSaleGemsItemID", DbType.String, "ForSaleGemsItemID", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@ForSaleID", DbType.String, "ForSaleID", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GemsCategoryID", DbType.String, "GemsCategoryID", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GemsName", DbType.String, "GemsName", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GemsTK", DbType.Decimal, "GemsTK", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GemsTG", DbType.Decimal, "GemsTG", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@YOrCOrG", DbType.String, "YOrCOrG", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@GemsTW", DbType.Decimal, "GemsTW", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@Qty", DbType.Int32, "Qty", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@Type", DbType.String, "Type", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@UnitPrice", DbType.Int64, "UnitPrice", DataRowVersion.Default)
                    DB.AddInParameter(.InsertCommand, "@Amount", DbType.Int64, "Amount", DataRowVersion.Default)

                    daForSaleGemsItem.UpdateCommand = DB.GetSqlStringCommand("Update tbl_ForSaleGemsItem set ForSaleID=@ForSaleID,GemsCategoryID= @GemsCategoryID , GemsName= @GemsName , GemsTK= @GemsTK , GemsTG= @GemsTG , YOrCOrG= @YOrCOrG , GemsTW= @GemsTW, Qty= @Qty , Type= @Type , UnitPrice= @UnitPrice , Amount= @Amount WHERE 1=2")
                    DB.AddInParameter(.UpdateCommand, "@ForSaleGemsItemID", DbType.String, "ForSaleGemsItemID", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@ForSaleID", DbType.String, "ForSaleID", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GemsCategoryID", DbType.String, "GemsCategoryID", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GemsName", DbType.String, "GemsName", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GemsTK", DbType.Decimal, "GemsTK", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GemsTG", DbType.Decimal, "GemsTG", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@YOrCOrG", DbType.String, "YOrCOrG", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@GemsTW", DbType.Decimal, "GemsTW", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@Qty", DbType.Int32, "Qty", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@Type", DbType.String, "Type", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@UnitPrice", DbType.Int64, "UnitPrice", DataRowVersion.Default)
                    DB.AddInParameter(.UpdateCommand, "@Amount", DbType.Int64, "Amount", DataRowVersion.Default)

                    ''**** For DB command
                    DB.UpdateDataSet(dsUpdate, "tbl_ForSaleGemsItem", .InsertCommand, .UpdateCommand, .DeleteCommand, UpdateBehavior.Transactional)
                End With
                Return True
            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Return False
            End Try
        End Function

        Public Function ExportDataBaseForTransfer(ByVal DatabasePath As String, ByVal TransferID As String) As Boolean Implements IDatabaseExportImportDA.ExportDataBaseForTransfer
            Try
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
            Catch ex As Exception
            End Try
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim sqlDS As New DataSet
            ''*****Export Tables List*********
            ''tbl_ForSaleHeader
            ''tbl_ForSale
            ''tbl_ForSaleGemsItem
            ''*****Export Tables List*********
            Try
                ' ''tbl_ForSaleHeader
                ''strCommandText = "SELECT * " _
                ''& " FROM tbl_ForSaleHeader " _
                ''& " WHERE ForSaleHeaderID IN (SELECT ForSaleHeaderID FROM tbl_ForSale WHERE GivenDate BETWEEN '" & FromDate.Date.ToString("yyyyMMdd") & "' AND '" & ToDate.Date.ToString("yyyyMMdd") & "' AND LocationID=" & BranchID & ")"
                ''DBComm = Nothing
                ''DBComm = DB.GetSqlStringCommand(strCommandText)
                ''DB.LoadDataSet(DBComm, sqlDS, "tbl_ForSaleHeader")

                'tbl_ForSale

                'strCommandText = " SELECT F.ForSaleID,F.ItemCode,F.ItemNameID,F.Length,F.GoldQualityID,F.ItemCategoryID,F.GivenDate,F.GoldTK,F.GoldTG,F.GemsTK, F.GemsTG, F.WasteTK, F.WasteTG,F.ItemTK, F.ItemTG, F.TotalTK, F.TotalTG, F.IsExit,F.ExitDate, F.LastModifiedLoginUserName, F.LastModifiedDate, F.Width, F.IsFixPrice, F.DesignCharges,F.PlatingCharges, F.MountingCharges, F.WhiteCharges, F.IsOriginalFixedPrice,F.IsOriginalPriceGram,F.OriginalOtherPrice,F.Photo, F.SellingPrice, F.LocationID, F.IsClosed, F.IsOrder, F.OrderReceiveDetailID, F.IsVolume, F.QTY,F.StaffID, F.LossQTY, F.LossItemTK, F.LossItemTG, F.TotalGemPrice, F.PurchaseWasteTK, F.PurchaseWasteTG, F.GoldSmith, F.Remark, F.IsDiamond, F.OriginalCode, F.Color, F.IsDelete, F.IsSync, F.SupplierID, F.SupplierVou,ti.FixPrice, ti.OriginalFixedPrice, ti.OriginalPriceGram, ti.PriceCode, ti.OriginalPriceTK, ti.OriginalGemsPrice " & _
                '                "FROM tbl_Transfer t left join tbl_TransferItem ti on t.TransferID=ti.TransferID " & _
                '                "left join tbl_ForSale F on ti.ForSaleID=F.ForSaleID   where t.transferID='" & TransferID & "'"
                strCommandText = "SELECT F.ForSaleID,F.ItemCode,F.ItemNameID,F.Length,F.GoldQualityID,F.ItemCategoryID,t.TransferDate as GivenDate,F.GoldTK,F.GoldTG,F.GemsTK, F.GemsTG, F.WasteTK, F.WasteTG,F.ItemTK, F.ItemTG, F.TotalTK, F.TotalTG, F.IsExit,F.ExitDate, F.LastModifiedLoginUserName, F.LastModifiedDate, F.Width, F.IsFixPrice,ti.FixPrice, F.DesignCharges,F.PlatingCharges, F.MountingCharges, F.WhiteCharges, F.IsOriginalFixedPrice, ti.OriginalFixedPrice,F.IsOriginalPriceGram, ti.OriginalPriceGram,ti.OriginalPriceTK, ti.OriginalGemsPrice,F.OriginalOtherPrice,F.Photo, F.SellingPrice, t.LocationID, F.IsClosed, F.IsOrder, F.OrderReceiveDetailID, F.IsVolume, F.QTY,F.StaffID, F.LossQTY, F.LossItemTK, F.LossItemTG, F.TotalGemPrice, F.PurchaseWasteTK, F.PurchaseWasteTG, F.GoldSmith, F.Remark, F.IsDiamond, F.OriginalCode, ti.PriceCode, F.Color, F.IsDelete, F.IsSync, F.SupplierID, F.SupplierVou,F.GoldSmithID,F.WReturnDate,IsSolidVolume,SellingRate,IsCheck,F.WSFixPrice,F.IsLooseDiamond,F.SDGemsCategoryID,F.Shape,F.Clarity,F.SDGemsName,F.SDYOrCOrG,F.OriginalPriceCarat,F.IsOriginalPriceCarat,F.SDGemsTW,F.TotalCost " & _
                                " FROM tbl_Transfer t left join tbl_TransferItem ti on t.TransferID=ti.TransferID left join tbl_ForSale F on ti.ForSaleID=F.ForSaleID   where t.transferID='" & TransferID & "'"
                'strCommandText = " Select F.* from tbl_Transfer t left join tbl_TransferItem ti on t.TransferID=ti.TransferID " _
                '& " left join tbl_ForSale F on ti.ForSaleID=F.ForSaleID   " _
                '& " where t.transferID='" & TransferID & "'"
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_ForSale")

                'tbl_ForSaleGemsItem
                strCommandText = " select FS.*  " _
                & " from tbl_ForSaleGemsItem FS left join tbl_ForSale F on F.ForSaleID=FS.ForSaleID left join tbl_TransferItem ti on F.ForSaleID=ti.ForSaleID  " _
                & " where ti.transferID='" & TransferID & "'"
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_ForSaleGemsItem")

                sqlDS.WriteXml(DatabasePath, XmlWriteMode.WriteSchema)

                Return True
            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
                Return False
            End Try
            Return True
        End Function
        Public Function DivideByLocation(ByVal DatabasePath As String, ByVal BranchID As String) As Object Implements IDatabaseExportImportDA.DivideByLocation
            Try
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
            Catch ex As Exception
            End Try
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim sqlDS As New DataSet
            ''*****Export Tables List*********
            ''  tbl_CashType()
            ''  tbl_GemsCategory()
            ''  tbl_GoldQuality()
            ''  tbl_ItemCategory()
            ''  tbl_ItemName()
            ''  tbl_Measurement()
            ''  tbl_Branch



            ''*****Export Tables List*********
            Try
                'tbl_Branch
                strCommandText = "SELECT * " _
                & " FROM tbl_Branch "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_Branch")

                'tbl_Branch
                strCommandText = "SELECT * " _
                & " FROM tbl_GenerateFormat "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_GenerateFormat")

                'tbl_Staff()
                strCommandText = "SELECT * " _
                & " FROM tbl_Staff "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_Staff")

                'tbl_GemsCategory
                strCommandText = "SELECT * " _
                & " FROM tbl_GemsCategory "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_GemsCategory")

                'tbl_GoldQuality
                strCommandText = "SELECT * " _
                & " FROM tbl_GoldQuality "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_GoldQuality")

                'tbl_ItemCategory
                strCommandText = "SELECT * " _
                & " FROM tbl_ItemCategory "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_ItemCategory")

                'tbl_ItemName
                strCommandText = "SELECT * " _
                & " FROM tbl_ItemName "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_ItemName")

                'tbl_Measurement
                strCommandText = "SELECT * " _
                & " FROM tbl_Measurement "
                DBComm = Nothing
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.LoadDataSet(DBComm, sqlDS, "tbl_Measurement")

                sqlDS.WriteXml(DatabasePath, XmlWriteMode.WriteSchema)
                Return True
            Catch ex As Exception
                MsgBox(ex.Message, MsgBoxStyle.Critical, "Gold Smith Management System")
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Delete()
                End If
                Return False
            End Try
            Return True
        End Function
        Public Sub WriteEventlogsInfo(ByVal msg As String)

            eventLog1.WriteEntry(msg, EventLogEntryType.Information)
        End Sub
        Public Function CreateDatabaseForExportData(ByVal DatabasePath As String, ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal BranchID As String, ByVal Exportdatatypte As String, ByVal FName As String, ByVal bolAll As Boolean, ByVal CurrentCompanyID As String) As Boolean Implements IDatabaseExportImportDA.CreateDatabaseForExportData
            Dim cat As New ADOX.Catalog
            Dim FailIDStr As String = ""
            Dim TransacionType As String = ""
            Dim Command As OleDbCommand
            Dim noupdate As Boolean = False
            Dim sqlDS As New DataSet
            Dim Connstr As New OleDbConnection

            Dim dtGoldQuality As New DataTable
            Dim dtMeasurement As New DataTable
            Dim dtCustomer As New DataTable
            Dim dtSupplier As New DataTable
            Dim dtStaff As New DataTable
            Dim dtCurrentPrice As New DataTable
            Dim dtItemCategory As New DataTable
            Dim dtItemName As New DataTable
            Dim dtGoldSmith As New DataTable
            Dim dtGemsCategory As New DataTable
            Dim dtWaste As New DataTable
            Dim dtwasteItem As New DataTable
            Dim dtLocation As New DataTable
            Dim dtExpense As New DataTable
            Dim dtIncome As New DataTable
            Dim dtTransfer As New DataTable
            Dim dtTransferItem As New DataTable
            Dim dtforsale As New DataTable
            Dim dtSaleInvoice As New DataTable
            Dim dtWholeSaleReturn As New DataTable
            Dim dtWholeSaleInvoice As New DataTable
            Dim dtSaleVolume As New DataTable
            Dim dtSaleGems As New DataTable
            Dim dtReturnadvance As New DataTable
            Dim dtRepairHeader As New DataTable
            Dim dtPurchaseOutItem As New DataTable
            Dim dtPurchaseHeader As New DataTable
            Dim dtPurchaseFromSupplier As New DataTable
            Dim dtOrderInvoice As New DataTable
            Dim dtOrderReturnHeader As New DataTable
            Dim dtMortgageInvoice As New DataTable
            Dim dtMortgageInterest As New DataTable
            Dim dtMortgagePayback As New DataTable
            Dim dtMortgageReturn As New DataTable
            Dim dtConsignmentSale As New DataTable
            Dim dtDailyExpense As New DataTable
            Dim dtDailyIncome As New DataTable
            Dim dtReturnRepairHeader As New DataTable
            Dim dtCashReceipt As New DataTable
            Dim dtTransferReturn As New DataTable
            Dim dtTransferReturnItem As New DataTable
            Dim dtTransaction As New DataTable
            Dim dtKeyGenerate As New DataTable
            Dim dtGenerateFormat As New DataTable
            Dim dtGeneralLedgerByLocation As New DataTable
            Dim dtShopItem As New DataTable
            Dim dtForSaleGemItem As New DataTable
            Dim dtTransferDiamond As New DataTable
            Dim dtTransferDiamondItem As New DataTable
            Dim dtForSaleDiamond As New DataTable
            Dim dtTransferReturnDiamond As New DataTable
            Dim dtTransferReturnDiamondItem As New DataTable
            Dim dtSaleLooseDiamond As New DataTable
            Dim dtDiamondPrice As New DataTable
            Dim objExportDataInfo As New CommonInfo.ExportDataInfo

            Dim dtMortgagePaybackItem As New DataTable
            Global_CurrentLocationID = CurrentCompanyID
            'Get To Mail And CC Mail From Export Data
            objExportDataInfo = GetToMailCCMail(Exportdatatypte)
            With objExportDataInfo
                _ToEMail = .ToMail
                _CCMail = .CCMail
                _CompanyName = .CompanyName
            End With

            Try
                dtKeyGenerate = GetKeyGenerate()
                dtGenerateFormat = GetGenerateFormat()
                dtLocation = GetLocation(posdate, nowdate)

                If Exportdatatypte = "Master" Then

                    dtGoldQuality = GetGoldQuality(posdate, nowdate)
                    WriteEventlogsInfo("GetGoldQuality : " & dtGoldQuality.Rows.Count)

                    'dtMeasurement = GetMeasurement()
                    dtItemCategory = GetItemCategory(posdate, nowdate)
                    WriteEventlogsInfo("GetItemCategory : " & dtItemCategory.Rows.Count)
                    dtItemName = GetItemName(posdate, nowdate)
                    WriteEventlogsInfo("GetItemName : " & dtItemName.Rows.Count)
                    dtGoldSmith = GetGoldSmith(posdate, nowdate)
                    WriteEventlogsInfo("GetGoldSmith : " & dtGoldSmith.Rows.Count)
                    dtGemsCategory = GetGemsCategory(posdate, nowdate)
                    WriteEventlogsInfo("GetGemsCategory : " & dtGemsCategory.Rows.Count)
                    dtWaste = GetWaste(posdate, nowdate)
                    WriteEventlogsInfo("GetWaste : " & dtWaste.Rows.Count)
                    ' dtLocation = GetLocation(posdate, nowdate, BranchID)

                    'For Waste Detail
                    If dtWaste.Rows.Count > 0 Then
                        Dim Strcri As String = ""

                        For i As Integer = 0 To dtWaste.Rows.Count - 1

                            If Strcri = "" Then
                                Strcri = " Where WasteSetupHeaderID in ( '" & dtWaste.Rows(i).Item("WasteSetupHeaderID") & "'"
                            Else
                                Strcri += ",'" & dtWaste.Rows(i).Item("WasteSetupHeaderID") & "'"
                            End If
                        Next
                        Strcri += ")"

                        dtwasteItem = GetWasteItem(Strcri)
                    End If

                    If dtGoldQuality.Rows.Count = 0 And dtMeasurement.Rows.Count = 0 And dtItemCategory.Rows.Count = 0 And dtGoldSmith.Rows.Count = 0 And dtGemsCategory.Rows.Count = 0 And dtWaste.Rows.Count = 0 And dtwasteItem.Rows.Count = 0 And dtLocation.Rows.Count = 0 And dtItemName.Rows.Count = 0 Then
                        Return False
                    End If

                    cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                    cat = Nothing

                    Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                    Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportMaster)

                    If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                    Connstr.Open()

                    'For GoldQuality
                    If dtGoldQuality.Rows.Count > 0 Then
                        InsertGoldQuality(dtGoldQuality, DatabasePath)
                        'UpdateGoldQuality(dtGoldQuality)
                    End If

                    'For Location
                    If dtLocation.Rows.Count > 0 Then
                        InsertLocation(dtLocation, DatabasePath)
                        'UpdateLocation(dtLocation)
                    End If

                    'For Measurement
                    'If dtMeasurement.Rows.Count > 0 Then
                    '    InsertMeasurement(dtMeasurement, DatabasePath)
                    'End If


                    'For ItemCategory
                    If dtItemCategory.Rows.Count > 0 Then
                        InsertItemCategory(dtItemCategory, DatabasePath)
                        'UpdateItemCategory(dtItemCategory)
                    End If

                    'Gold Smith
                    If dtGoldSmith.Rows.Count > 0 Then
                        InsertGoldSmith(dtGoldSmith, DatabasePath)
                        'UpdateGoldSmith(dtGoldSmith)
                    End If

                    'For ItemName
                    If dtItemName.Rows.Count > 0 Then
                        InsertItemName(dtItemName, DatabasePath)
                        'UpdateItemName(dtItemName)
                    End If

                    'For Gems Category
                    If dtGemsCategory.Rows.Count > 0 Then
                        InsertGemsCategory(dtGemsCategory, DatabasePath)
                        'UpdateGemsCategory(dtGemsCategory)
                    End If

                    'For Waste Header
                    If dtWaste.Rows.Count > 0 Then
                        InsertWaste(dtWaste, DatabasePath)
                        'UpdateWaste(dtWaste)
                    End If

                    'For Waste Detail
                    If dtwasteItem.Rows.Count > 0 Then
                        InsertWasteItem(dtwasteItem, DatabasePath)
                    End If

                ElseIf Exportdatatypte = "Customer,Supplier,Sale-Person" Then
                    'dtKeyGenerate = GetKeyGenerate()
                    dtCustomer = GetCustomer(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetCustomer : " & dtCustomer.Rows.Count)

                    dtSupplier = GetSupplier(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetSupplier : " & dtSupplier.Rows.Count)
                    dtStaff = GetStaff(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetStaff : " & dtStaff.Rows.Count)
                    If dtCustomer.Rows.Count = 0 And dtSupplier.Rows.Count = 0 And dtStaff.Rows.Count = 0 Then
                        Return False
                    End If

                    cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                    cat = Nothing

                    Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                    Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportCustomer_SalePerson)

                    If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                    Connstr.Open()
                    'For Customer
                    If dtCustomer.Rows.Count > 0 Then
                        InsertCustomer(dtCustomer, DatabasePath)
                        'UpdateCustomer(dtCustomer)
                    End If

                    'For Supplier
                    If dtSupplier.Rows.Count > 0 Then
                        InsertSupplier(dtSupplier, DatabasePath)
                        'UpdateSupplier(dtSupplier)
                    End If

                    'For Staff
                    If dtStaff.Rows.Count > 0 Then
                        InsertStaff(dtStaff, DatabasePath)
                        'UpdateStaff(dtStaff)
                    End If

                ElseIf Exportdatatypte = "Current-Price" Then
                    'dtKeyGenerate = GetKeyGenerate()
                    dtCurrentPrice = GetCurrentPrice(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetCurrentPrice : " & dtCurrentPrice.Rows.Count)
                    'Diamond Price
                    dtDiamondPrice = GetDiamondPrice(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetDiamondPrice : " & dtDiamondPrice.Rows.Count)
                    If dtCurrentPrice.Rows.Count = 0 And dtDiamondPrice.Rows.Count = 0 Then
                        Return False
                    End If

                    cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                    cat = Nothing

                    Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                    Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportCurrentPrice)

                    If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                    Connstr.Open()
                    'For Current Price
                    If dtCurrentPrice.Rows.Count > 0 Then
                        InsertCurrentPrice(dtCurrentPrice, DatabasePath)
                        'UpdateCurrentPrice(dtCurrentPrice)
                    End If
                    'For Diamond Price
                    If dtDiamondPrice.Rows.Count > 0 Then
                        InsertDiamondPrice(dtDiamondPrice, DatabasePath)
                        'UpdateCurrentPrice(dtCurrentPrice)
                    End If

                ElseIf Exportdatatypte = "Expense-Income" Then
                    dtExpense = GetDailyExpense(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetDailyExpense : " & dtExpense.Rows.Count)
                    dtIncome = GetDailyIncome(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetDailyIncome : " & dtIncome.Rows.Count)
                    cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                    cat = Nothing

                    Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                    Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportExpense_Income)

                    If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                    Connstr.Open()

                    'tbl_DailyExpense
                    If dtExpense.Rows.Count > 0 Then
                        InsertDailyExpense(dtExpense, DatabasePath)
                        'UpdateDailyExpense(dtExpense)
                    End If

                    'tbl_DailyIncome
                    If dtIncome.Rows.Count > 0 Then
                        InsertDailyIncome(dtIncome, DatabasePath)
                        'UpdateDailyIncome(dtIncome)
                    End If

                ElseIf Exportdatatypte = "Stock" Then
                    TransacionType = "Stock"
                    dtTransfer = GetAllTransfer()
                    WriteEventlogsInfo("GetAllTransfer : " & dtTransfer.Rows.Count)


                    If dtTransfer.Rows.Count > 0 Then
                        Dim Strcri As String = ""
                        Dim Strcri1 As String = ""
                        Dim Strcri2 As String = ""

                        For i As Integer = 0 To dtTransfer.Rows.Count - 1

                            If Strcri = "" Then
                                Strcri = " Where TransferID in ( '" & dtTransfer.Rows(i).Item("TransferID") & "'"
                            Else
                                Strcri += ",'" & dtTransfer.Rows(i).Item("TransferID") & "'"
                            End If
                        Next
                        Strcri += ")"

                        dtTransferItem = GetAllTransferItem(Strcri)

                        If dtTransferItem.Rows.Count > 0 Then
                            For j As Integer = 0 To dtTransferItem.Rows.Count - 1
                                If Strcri1 = "" Then
                                    Strcri1 = " and ForSaleID in ( '" & dtTransferItem.Rows(j).Item("ForSaleID") & "'"
                                Else
                                    Strcri1 += ",'" & dtTransferItem.Rows(j).Item("ForSaleID") & "'"
                                End If
                            Next
                            Strcri1 += ")"

                        End If

                        dtforsale = GetForSaleData(Strcri1)

                        Dim StrcriStock As String = ""
                        If dtforsale.Rows.Count > 0 Then
                            For j As Integer = 0 To dtforsale.Rows.Count - 1
                                If StrcriStock = "" Then
                                    StrcriStock = " where ForSaleID in ( '" & dtforsale.Rows(j).Item("ForSaleID") & "'"
                                Else
                                    StrcriStock += ",'" & dtforsale.Rows(j).Item("ForSaleID") & "'"
                                End If
                            Next
                            StrcriStock += ")"

                        End If
                        dtForSaleGemItem = GetForSaleGemsItem(StrcriStock)

                        WriteEventlogsInfo("GetForSaleData : " & dtforsale.Rows.Count)

                    End If

                    ' Transfer Loose Diamond
                    dtTransferDiamond = GetAllTransferDiamond()
                    WriteEventlogsInfo("GetAllTransferDiamond : " & dtTransferDiamond.Rows.Count)

                    If dtTransferDiamond.Rows.Count > 0 Then
                        Dim DStrcri As String = ""
                        Dim DStrcri1 As String = ""
                        Dim DStrcri2 As String = ""

                        For i As Integer = 0 To dtTransferDiamond.Rows.Count - 1

                            If DStrcri = "" Then
                                DStrcri = " Where TransferID in ( '" & dtTransferDiamond.Rows(i).Item("TransferID") & "'"
                            Else
                                DStrcri += ",'" & dtTransferDiamond.Rows(i).Item("TransferID") & "'"
                            End If
                        Next
                        DStrcri += ")"

                        dtTransferDiamondItem = GetAllTransferDiamondItem(DStrcri)

                        If dtTransferDiamondItem.Rows.Count > 0 Then
                            For j As Integer = 0 To dtTransferDiamondItem.Rows.Count - 1
                                If DStrcri1 = "" Then
                                    DStrcri1 = " and ForSaleID in ( '" & dtTransferDiamondItem.Rows(j).Item("ForSaleID") & "'"
                                Else
                                    DStrcri1 += ",'" & dtTransferDiamondItem.Rows(j).Item("ForSaleID") & "'"
                                End If
                            Next
                            DStrcri1 += ")"

                        End If

                        dtForSaleDiamond = GetForSaleData(DStrcri1)

                        WriteEventlogsInfo("GetForSaleDiamondData : " & dtForSaleDiamond.Rows.Count)
                        'End of Diamond
                    End If

                    If dtTransfer.Rows.Count = 0 And dtTransferDiamond.Rows.Count = 0 Then
                        Return False
                    End If

                    cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                    cat = Nothing

                    Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                    Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportStock)

                    If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                    Connstr.Open()

                    If dtTransfer.Rows.Count > 0 Then
                        InsertTransfer(dtTransfer, DatabasePath)
                        'UpdateTransfer(dtTransfer)
                        dtShareTransfer = dtTransfer.Copy()
                    End If

                    If dtforsale.Rows.Count > 0 Then
                        InsertForSale(dtforsale, DatabasePath)
                        'UpdateForSale(dtforsale)
                        dtShareStock = dtforsale.Copy()
                    End If
                    If dtTransferDiamond.Rows.Count > 0 Then
                        InsertTransferDiamond(dtTransferDiamond, DatabasePath)
                        'UpdateTransfer(dtTransfer)
                        dtShareTransferDiamond = dtTransferDiamond.Copy()
                    End If

                    If dtForSaleDiamond.Rows.Count > 0 Then
                        InsertForSale(dtForSaleDiamond, DatabasePath)
                        'UpdateForSale(dtforsale)
                        dtShareStockDiamond = dtForSaleDiamond.Copy()
                    End If
                    If dtForSaleGemItem.Rows.Count > 0 Then
                        InsertForSaleGemsItem(dtForSaleGemItem, DatabasePath)
                    End If
                    ElseIf Exportdatatypte = "Transfer-Return" Then
                        dtTransferReturn = GetAllTransferReturn()
                        WriteEventlogsInfo("GetAllTransferReturn : " & dtTransferReturn.Rows.Count)

                        If dtTransferReturn.Rows.Count > 0 Then
                            Dim Strcri As String = ""
                            Dim Strcri1 As String = ""
                            Dim Strcri2 As String = ""

                            For i As Integer = 0 To dtTransferReturn.Rows.Count - 1

                                If Strcri = "" Then
                                    Strcri = " Where TransferReturnID in ( '" & dtTransferReturn.Rows(i).Item("TransferReturnID") & "'"
                                Else
                                    Strcri += ",'" & dtTransferReturn.Rows(i).Item("TransferReturnID") & "'"
                                End If
                            Next
                            Strcri += ")"

                            dtTransferReturnItem = GetAllTransferReturnItem(Strcri)

                            If dtTransferReturnItem.Rows.Count > 0 Then
                                For j As Integer = 0 To dtTransferReturnItem.Rows.Count - 1
                                    If Strcri1 = "" Then
                                        Strcri1 = " and ForSaleID in ( '" & dtTransferReturnItem.Rows(j).Item("ForSaleID") & "'"
                                    Else
                                        Strcri1 += ",'" & dtTransferReturnItem.Rows(j).Item("ForSaleID") & "'"
                                    End If
                                Next
                                Strcri1 += ")"

                            End If

                            dtforsale = GetForSaleData(Strcri1)
                            WriteEventlogsInfo("GetForSaleData : " & dtforsale.Rows.Count)

                    End If

                    'Transfer Return Diamond
                    dtTransferReturnDiamond = GetAllTransferReturnDiamond()
                    WriteEventlogsInfo("GetAllTransferReturnDiamond : " & dtTransferReturnDiamond.Rows.Count)

                    If dtTransferReturnDiamond.Rows.Count > 0 Then
                        Dim Strcri As String = ""
                        Dim Strcri1 As String = ""
                        Dim Strcri2 As String = ""

                        For i As Integer = 0 To dtTransferReturnDiamond.Rows.Count - 1

                            If Strcri = "" Then
                                Strcri = " Where TransferReturnID in ( '" & dtTransferReturnDiamond.Rows(i).Item("TransferReturnID") & "'"
                            Else
                                Strcri += ",'" & dtTransferReturnDiamond.Rows(i).Item("TransferReturnID") & "'"
                            End If
                        Next
                        Strcri += ")"

                        dtTransferReturnDiamondItem = GetAllTransferReturnDiamondItem(Strcri)

                        If dtTransferReturnDiamondItem.Rows.Count > 0 Then
                            For j As Integer = 0 To dtTransferReturnDiamondItem.Rows.Count - 1
                                If Strcri1 = "" Then
                                    Strcri1 = " and ForSaleID in ( '" & dtTransferReturnDiamondItem.Rows(j).Item("ForSaleID") & "'"
                                Else
                                    Strcri1 += ",'" & dtTransferReturnDiamondItem.Rows(j).Item("ForSaleID") & "'"
                                End If
                            Next
                            Strcri1 += ")"

                        End If

                        dtForSaleDiamond = GetForSaleData(Strcri1)
                        WriteEventlogsInfo("GetForSaleDataDiamond : " & dtForSaleDiamond.Rows.Count)

                    End If

                    If dtTransferReturn.Rows.Count = 0 And dtTransferReturnDiamond.Rows.Count = 0 Then
                        Return False
                    End If

                        cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                        cat = Nothing

                        Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                        Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportTransferReturn)

                        If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                        Connstr.Open()

                        If dtTransferReturn.Rows.Count > 0 Then
                            InsertTransferReturn(dtTransferReturn, DatabasePath)
                            dtShareTransferReturn = dtTransferReturn.Copy()
                            'UpdateTransferReturn(dtTransferReturn)
                        End If

                        If dtforsale.Rows.Count > 0 Then
                            InsertForSale(dtforsale, DatabasePath)
                            'UpdateForSale(dtforsale)
                            dtShareStockTR = dtforsale.Copy()
                    End If
                    If dtTransferReturnDiamond.Rows.Count > 0 Then
                        InsertTransferReturnDiamond(dtTransferReturnDiamond, DatabasePath)
                        dtShareTransferReturnDiamond = dtTransferReturnDiamond.Copy()
                        'UpdateTransferReturn(dtTransferReturn)
                    End If

                    If dtForSaleDiamond.Rows.Count > 0 Then
                        InsertForSale(dtForSaleDiamond, DatabasePath)
                        'UpdateForSale(dtforsale)
                        dtShareStockTRDiamond = dtForSaleDiamond.Copy()
                    End If

                    ElseIf Exportdatatypte = "Shop-Item" Then
                        TransacionType = "Shop-Item"

                        dtShopItem = GetShopItemData(posdate, nowdate, Global_CurrentLocationID)
                        Dim Strcri1 As String = ""
                        If dtShopItem.Rows.Count > 0 Then
                            For j As Integer = 0 To dtShopItem.Rows.Count - 1
                                If Strcri1 = "" Then
                                    Strcri1 = " where ForSaleID in ( '" & dtShopItem.Rows(j).Item("ForSaleID") & "'"
                                Else
                                    Strcri1 += ",'" & dtShopItem.Rows(j).Item("ForSaleID") & "'"
                                End If
                            Next
                            Strcri1 += ")"

                        End If
                        dtForSaleGemItem = GetForSaleGemsItem(Strcri1)

                        WriteEventlogsInfo("GetShopItemData : " & dtShopItem.Rows.Count)

                        If dtShopItem.Rows.Count = 0 Then
                            Return False
                        End If

                        cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                        cat = Nothing

                        Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                        Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportShopItem)

                        If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                        Connstr.Open()


                        If dtShopItem.Rows.Count > 0 Then
                            InsertForSale(dtShopItem, DatabasePath)
                        End If
                        If dtForSaleGemItem.Rows.Count > 0 Then
                            InsertForSaleGemsItem(dtForSaleGemItem, DatabasePath)
                        End If

                    ElseIf Exportdatatypte = "Other-Transaction" Then
                        TransacionType = "Other-Transaction"
                        dtSaleInvoice = GetSaleInvoice(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetSaleInvoice : " & dtSaleInvoice.Rows.Count)
                        dtWholeSaleReturn = GetWholeSaleReturn(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetWholeSaleReturn : " & dtWholeSaleReturn.Rows.Count)
                        dtWholeSaleInvoice = GetWholeSaleInvoice(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetWholeSaleInvoice : " & dtWholeSaleInvoice.Rows.Count)
                        dtSaleVolume = GetSaleVolume(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetSaleVolume : " & dtSaleVolume.Rows.Count)
                        dtSaleGems = GetSaleGems(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetSaleGems : " & dtSaleGems.Rows.Count)
                        dtReturnadvance = GetReturnAdvance(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetReturnAdvance : " & dtReturnadvance.Rows.Count)
                        dtRepairHeader = GetRepairHeader(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetRepairHeader : " & dtRepairHeader.Rows.Count)
                        dtReturnRepairHeader = GetReturnRepairHeader(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetReturnRepairHeader : " & dtReturnRepairHeader.Rows.Count)
                        'dtPurchaseOutItem = GetPurchaseOutItem()
                        dtPurchaseFromSupplier = GetPurchaseFromSupplier(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetPurchaseFromSupplier : " & dtPurchaseFromSupplier.Rows.Count)
                        dtPurchaseHeader = GetPurchaseHeader(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetPurchaseHeader : " & dtPurchaseHeader.Rows.Count)
                        dtOrderInvoice = GetOrderInvoice(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetOrderInvoice : " & dtOrderInvoice.Rows.Count)
                        dtOrderReturnHeader = GetOrderReturnHeader(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetOrderReturnHeader : " & dtOrderReturnHeader.Rows.Count)
                        dtMortgageInvoice = GetMortgageInvoice(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetMortgageInvoice : " & dtMortgageInvoice.Rows.Count)
                        dtMortgageInterest = GetMortgageInterest(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetMortgageInterest : " & dtMortgageInterest.Rows.Count)
                        dtMortgagePayback = GetMortgagePayback(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetMortgagePayback : " & dtMortgagePayback.Rows.Count)
                        dtMortgageReturn = GetMortgageReturn(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetMortgageReturn : " & dtMortgageReturn.Rows.Count)

                        dtConsignmentSale = GetConsignmentSale(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetConsignmentSale : " & dtConsignmentSale.Rows.Count)
                        dtCashReceipt = GetCashReceipt(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetCashReceipt : " & dtCashReceipt.Rows.Count)
                        dtGeneralLedgerByLocation = GetGeneralLedger(posdate, nowdate, BranchID)
                        WriteEventlogsInfo("GetGeneralLedger : " & dtGeneralLedgerByLocation.Rows.Count)
                    dtSaleLooseDiamond = GetSaleLooseDiamond(posdate, nowdate, BranchID)
                    WriteEventlogsInfo("GetSaleLooseDiamond : " & dtSaleLooseDiamond.Rows.Count)

                    If dtSaleInvoice.Rows.Count = 0 And dtWholeSaleReturn.Rows.Count = 0 And dtWholeSaleInvoice.Rows.Count = 0 And dtSaleVolume.Rows.Count = 0 And dtSaleGems.Rows.Count = 0 And dtReturnadvance.Rows.Count = 0 And dtRepairHeader.Rows.Count = 0 And dtReturnRepairHeader.Rows.Count = 0 And dtPurchaseFromSupplier.Rows.Count = 0 And dtPurchaseHeader.Rows.Count = 0 And dtOrderInvoice.Rows.Count = 0 And dtOrderReturnHeader.Rows.Count = 0 And dtMortgageInvoice.Rows.Count = 0 And dtMortgageInterest.Rows.Count = 0 And dtMortgagePayback.Rows.Count = 0 And dtMortgageReturn.Rows.Count = 0 And dtConsignmentSale.Rows.Count = 0 And dtCashReceipt.Rows.Count = 0 And dtGeneralLedgerByLocation.Rows.Count = 0 And dtSaleLooseDiamond.Rows.Count = 0 Then
                        Return False
                    End If

                        cat.Create(Me.CreateAccessConnectionString(DatabasePath, "global"))
                        cat = Nothing

                    Connstr = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

                        Execute_ScriptForSync(Me.CreateAccessConnectionString(DatabasePath, "global"), ScriptExportOtherTransaction)

                    If (Connstr.State = ConnectionState.Open) Then Connstr.Close()

                    Connstr.Open()

                        'SaleInvoice
                        If dtSaleInvoice.Rows.Count > 0 Then
                            InsertSaleInvoice(dtSaleInvoice, DatabasePath)
                            'UpdateSaleInvoice(dtSaleInvoice)

                    End If
                    'Sale LooseDiamond
                    If dtSaleLooseDiamond.Rows.Count > 0 Then
                        InsertSaleLooseDiamond(dtSaleLooseDiamond, DatabasePath)
                        'UpdateSaleInvoice(dtSaleInvoice)

                    End If

                        'Wholesale Return
                        If dtWholeSaleReturn.Rows.Count > 0 Then
                            InsertWholeSaleReturn(dtWholeSaleReturn, DatabasePath)
                            'UpdateWholeSaleReturn(dtWholeSaleReturn)
                        End If

                        'WholeSale Invoice
                        If dtWholeSaleInvoice.Rows.Count > 0 Then
                            InsertWholeSaleInvoice(dtWholeSaleInvoice, DatabasePath)
                            'UpdateWholeSaleInvoice(dtWholeSaleInvoice)
                        End If

                        'Sale Volume
                        If dtSaleVolume.Rows.Count > 0 Then
                            InsertSaleVolume(dtSaleVolume, DatabasePath)
                            'UpdateSaleVolume(dtSaleVolume)
                        End If

                        'Sale Gems
                        If dtSaleGems.Rows.Count > 0 Then
                            InsertSaleGems(dtSaleGems, DatabasePath)
                            'UpdateSaleGems(dtSaleGems)
                        End If

                        'Return Advance
                        If dtReturnadvance.Rows.Count > 0 Then
                            InsertReturnAdvance(dtReturnadvance, DatabasePath)
                            'UpdateReturnAdvance(dtReturnadvance)
                        End If

                        'Repair Header
                        If dtRepairHeader.Rows.Count > 0 Then
                            InsertRepairHeader(dtRepairHeader, DatabasePath)
                            'UpdateRepairHeader(dtRepairHeader)
                        End If

                        'Return Repair Header
                        If dtReturnRepairHeader.Rows.Count > 0 Then
                            InsertReturnRepairHeader(dtReturnRepairHeader, DatabasePath)
                            'UpdateReturnRepairHeader(dtReturnRepairHeader)
                        End If

                        'Purchase Out Item
                        'If dtPurchaseOutItem.Rows.Count > 0 Then
                        '    InsertPurchaseOutItem(dtPurchaseOutItem, DatabasePath)
                        '    UpdatePurchaseOutItem(dtPurchaseOutItem)
                        'End If

                        'Purchase Header
                        If dtPurchaseHeader.Rows.Count > 0 Then
                            InsertPurchaseHeader(dtPurchaseHeader, DatabasePath)
                            'UpdatePurchaseHeader(dtPurchaseHeader)
                        End If

                        'Purchase From Supplier
                        If dtPurchaseFromSupplier.Rows.Count > 0 Then
                            InsertPurchaseFromSupplier(dtPurchaseFromSupplier, DatabasePath)
                            'UpdatePurchaseFromSupplier(dtPurchaseFromSupplier)
                        End If

                        'Order Invoice
                        If dtOrderInvoice.Rows.Count > 0 Then
                            InsertOrderInvoice(dtOrderInvoice, DatabasePath)
                            'UpdateOrderInvoice(dtOrderInvoice)
                        End If

                        'Order Return Header
                        If dtOrderReturnHeader.Rows.Count > 0 Then
                            InsertOrderReturnHeader(dtOrderReturnHeader, DatabasePath)
                            'UpdateOrderReturnHeader(dtOrderReturnHeader)
                        End If

                        'Mortgage Invoice
                        If dtMortgageInvoice.Rows.Count > 0 Then
                            InsertMortgageInvoice(dtMortgageInvoice, DatabasePath)
                            'UpdateMortgageInvoice(dtMortgageInvoice)
                        End If

                        'Mortgage Interest
                        If dtMortgageInterest.Rows.Count > 0 Then
                            InsertMortgageInterest(dtMortgageInterest, DatabasePath)
                        End If

                        'Mortgage Payback
                        If dtMortgagePayback.Rows.Count > 0 Then
                            InsertMortgagePayback(dtMortgagePayback, DatabasePath)
                        End If

                        'Mortgage Return
                        If dtMortgageReturn.Rows.Count > 0 Then
                            InsertMortgageReturn(dtMortgageReturn, DatabasePath)
                        End If

                        'Consignment Sale 
                        If dtConsignmentSale.Rows.Count > 0 Then
                            InsertConsignmentSale(dtConsignmentSale, DatabasePath)
                            'UpdateConsignmentSale(dtConsignmentSale)
                        End If

                        If dtCashReceipt.Rows.Count > 0 Then
                            InsertCashReceipt(dtCashReceipt, DatabasePath)
                            'UpdateCashReceipt(dtCashReceipt)
                        End If

                        'GeneralLedger
                        If dtGeneralLedgerByLocation.Rows.Count > 0 Then
                            InsertGeneralLedger(dtGeneralLedgerByLocation, DatabasePath)
                            'UpdateCashReceipt(dtCashReceipt)
                        End If



                    End If
                    If Exportdatatypte <> "Master" Then
                        If dtTransaction.Columns.Count = 0 Then
                            dtTransaction.Columns.Add("TransactionName")
                            dtTransaction.Columns.Add("FromDate")
                            dtTransaction.Columns.Add("ToDate")
                            dtTransaction.Columns.Add("CompanyID")
                            dtTransaction.Columns.Add("Location")
                        End If

                        Dim tname() As String
                        tname = TransacionType.Split(",")
                        If tname.Length > 0 Then

                            For i As Integer = 0 To tname.Length - 1
                                Dim drview As DataRow
                                drview = dtTransaction.NewRow
                                drview.Item("TransactionName") = tname(i)
                                drview.Item("FromDate") = posdate
                                drview.Item("ToDate") = nowdate
                                drview.Item("CompanyID") = BranchID
                                dtTransaction.Rows.Add(drview)
                            Next
                        End If
                        If dtTransaction.Rows.Count > 0 Then
                            InsertTransaction(dtTransaction, DatabasePath)
                        End If
                    End If





            Catch ex As Exception
                WriteEventlogs("CreateDatabaseForExportData : " & ex.Message)

                'WriteEventlogs(ex.Message)

                Return False
            Finally
                If (Connstr.State = ConnectionState.Open) Then Connstr.Close()
                Command = Nothing
                Connstr = Nothing
                Dim fiFile As New System.IO.FileInfo(DatabasePath)
                If fiFile.Exists = True Then
                    fiFile.Refresh()
                End If

            End Try

            Return True
        End Function
        Private Sub InsertTransaction(ByVal dtTransaction As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
            'Dim Connstr As OleDbConnection = New OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & DatabasePath & ";")

            Dim strCommandText As String
            Dim FailIDStr As String = ""


            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransaction.Rows.Count - 1
                Try
                    strCommandText = "INSERT INTO tbl_Transaction (TransactionName,FromDate,ToDate,CompanyID) "
                    strCommandText += " Values( @TransactionName,@FromDate,@ToDate,@CompanyID) "

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransactionName", OleDbType.VarChar)
                    objParam.Value = dtTransaction.Rows(i).Item("TransactionName")

                    'Dim objParam2 As OleDbParameter = Command.Parameters.Add("@FromDate", OleDbType.Date)
                    'objParam2.Value = dtTransaction.Rows(i).Item("FromDate")

                    'Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ToDate", OleDbType.Date)
                    'objParam3.Value = dtTransaction.Rows(i).Item("ToDate")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@FromDate", OleDbType.VarChar)
                    objParam2.Value = dtTransaction.Rows(i).Item("FromDate")

                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ToDate", OleDbType.VarChar)
                    objParam3.Value = dtTransaction.Rows(i).Item("ToDate")

                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CompanyID", OleDbType.VarChar)
                    objParam4.Value = dtTransaction.Rows(i).Item("CompanyID")

                    'Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Location", OleDbType.VarChar)
                    'objParam5.Value = dtTransaction.Rows(i).Item("Location")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertTransaction : " & ex.Message)
                End Try
            Next
            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Function GetKeyGenerate()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try

                strCommandText = " Select * FROM tbl_key_generate "

                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetKeyGenerate : " & ex.Message)
                Return New DataTable
            End Try
        End Function
        Private Function GetGenerateFormat()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try

                strCommandText = " SELECT * FROM tbl_GenerateFormat "

                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetGenerateFormat : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetGoldQuality(ByVal posdate As DateTime, ByVal nowdate As DateTime)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtGoldQuality As DataTable

            Try

                strCommandText = " Select * FROM tbl_GoldQuality where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtGoldQuality = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtGoldQuality

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetMeasurement()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtMeasurement As DataTable

            Try

                strCommandText = " Select * FROM tbl_Measurement"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtMeasurement = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtMeasurement

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetCustomer(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyId As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtCustomer As DataTable

            Try

                strCommandText = " Select * FROM tbl_Customer where LastModifiedDate Between @posdate and @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtCustomer = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtCustomer

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetSupplier(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtSupplier As DataTable

            Try

                strCommandText = " Select * FROM tbl_Supplier where LastModifiedDate Between @posdate and @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtSupplier = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtSupplier

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetStaff(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal Companyid As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtStaff As DataTable

            Try

                strCommandText = " Select * FROM tbl_Staff where LastModifiedDate Between @posdate and @nowdate"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtStaff = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtStaff

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetCurrentPrice(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtCurrentPrice As DataTable

            Try

                strCommandText = " Select * FROM tbl_StandardRate where LastModifiedDate Between @posdate and @nowdate"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtCurrentPrice = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtCurrentPrice

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetDiamondPrice(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtCurrentPrice As DataTable

            Try

                strCommandText = " Select * FROM tbl_DiamondPriceRate where LastModifiedDate Between @posdate and @nowdate"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtCurrentPrice = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtCurrentPrice

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function

        Private Function GetItemCategory(ByVal posdate As DateTime, ByVal nowdate As DateTime)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtItemCategory As DataTable

            Try

                strCommandText = " Select * FROM tbl_ItemCategory where LastModifiedDate Between @posdate and @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtItemCategory = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtItemCategory

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function

        Private Function GetItemName(ByVal posdate As DateTime, ByVal nowdate As DateTime)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtItemName As DataTable

            Try

                strCommandText = " Select * FROM tbl_ItemName where LastModifiedDate Between @posdate and @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtItemName = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtItemName

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function

        Private Function GetGoldSmith(ByVal posdate As DateTime, ByVal nowdate As DateTime)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtGoldSmith As DataTable

            Try

                strCommandText = " Select * FROM tbl_GoldSmith where LastModifiedDate Between @posdate and @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtGoldSmith = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtGoldSmith

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetGemsCategory(ByVal posdate As DateTime, ByVal nowdate As DateTime)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtGemsCategory As DataTable

            Try

                strCommandText = " Select * FROM tbl_GemsCategory where LastModifiedDate Between @posdate and @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtGemsCategory = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtGemsCategory

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetWaste(ByVal posdate As DateTime, ByVal nowdate As DateTime)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtWaste As DataTable

            Try

                strCommandText = " Select * FROM tbl_WasteSetupHeader where LastModifiedDate Between @posdate and @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtWaste = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtWaste

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetWasteItem(ByVal Bycri As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtWasteItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_WasteSetupDetail " & Bycri

                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtWasteItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtWasteItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetLocation(ByVal posdate As DateTime, ByVal nowdate As DateTime)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtLocation As DataTable

            Try

                strCommandText = " Select * FROM tbl_Location where LastModifiedDate Between @posdate and @nowdate  "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtLocation = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtLocation

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function

        Private Function GetDailyExpense(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompnayId As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtExpense As DataTable

            Try

                'strCommandText = " Select * FROM tbl_DailyExpense where LastModifiedDate Between @posdate and @nowdate And LocationID=" & CurrentCompanyID
                strCommandText = " Select * FROM tbl_DailyExpense where LastModifiedDate Between @posdate and @nowdate And LocationID=" & Global_CurrentLocationID

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtExpense = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtExpense

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function

        Private Function GetDailyExpenseItem(ByVal DailyExpenseID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtExpenseItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_DailyExpenseItem where DailyExpenseID = @DailyExpenseID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@DailyExpenseID", DbType.String, DailyExpenseID)
                dtExpenseItem = DB.ExecuteDataSet(DBComm).Tables(0)

                Return dtExpenseItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetDailyIncome(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal Companyid As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtIncome As DataTable

            Try

                'strCommandText = " Select * FROM tbl_DailyIncome where LastModifiedDate Between @posdate and @nowdate And LocationID=" & CurrentCompanyID

                strCommandText = " Select * FROM tbl_DailyIncome where LastModifiedDate Between @posdate and @nowdate And LocationID=" & Global_CurrentLocationID
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtIncome = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtIncome

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetDailyIncomeItem(ByVal DailyIncomeID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtIncomeItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_DailyIncomeItem where DailyIncomeID = @DailyIncomeID "

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@DailyIncomeID", DbType.String, DailyIncomeID)
                dtIncomeItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtIncomeItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetAllTransfer()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable
            Try
                'strCommandText = "Select * From tbl_Transfer Where IsConfirm=1 and LastModifiedDate BETWEEN @posdate AND @nowdate "
                strCommandText = "Select * From tbl_Transfer Where IsConfirm=1 and  IsSync=0 "

                DBComm = DB.GetSqlStringCommand(strCommandText)
                'DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-1))
                'DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult
            Catch ex As Exception
                WriteEventlogs("GetAllTransfer : " & ex.Message)
                Return New DataTable
            End Try
        End Function
        Private Function GetAllTransferDiamond()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable
            Try
                'strCommandText = "Select * From tbl_Transfer Where IsConfirm=1 and LastModifiedDate BETWEEN @posdate AND @nowdate "
                strCommandText = "Select * From tbl_TransferLooseDiamond Where IsConfirm=1 and  IsSync=0 "

                DBComm = DB.GetSqlStringCommand(strCommandText)
                'DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-1))
                'DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult
            Catch ex As Exception
                WriteEventlogs("GetAllTransferLooseDiamond : " & ex.Message)
                Return New DataTable
            End Try
        End Function
        Private Function GetAllTransferItem(ByVal ByCri As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_TransferItem " & ByCri
                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetAllTransferItem : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetAllTransferDiamondItem(ByVal ByCri As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_TransferLooseDiamondItem " & ByCri
                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetAllTransferDiamondItem : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetAllTransferReturn()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable
            Try
                strCommandText = "Select * From tbl_TransferReturn Where IsUpload=0 and isDelete=0"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult
            Catch ex As Exception
                WriteEventlogs("GetAllTransferReturn : " & ex.Message)
                Return New DataTable
            End Try
        End Function
        Private Function GetAllTransferReturnItem(ByVal ByCri As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_TransferReturnItem " & ByCri
                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetAllTransferReturnItem : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetAllTransferReturnDiamond()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable
            Try
                strCommandText = "Select * From tbl_TransferReturnDiamond Where IsUpload=0 and isDelete=0"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult
            Catch ex As Exception
                WriteEventlogs("GetAllTransferReturnDiamond : " & ex.Message)
                Return New DataTable
            End Try
        End Function
        Private Function GetAllTransferReturnDiamondItem(ByVal ByCri As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_TransferReturnDiamondItem " & ByCri
                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetAllTransferReturnDiamondItem : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetForSaleData(ByVal ByCri As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_ForSale where 1=1 " & ByCri
                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetForSaleData : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetShopItemData(posdate, nowdate, CurrentCompanyID)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_ForSale Where locationID= @CurrentCompanyID and LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                DB.AddInParameter(DBComm, "@CurrentCompanyID", DbType.String, CurrentCompanyID)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetShopItemData : " & ex.Message)
                Return New DataTable
            End Try

        End Function

        Private Function GetForSaleGemsItem(ByVal ByCri As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_ForSaleGemsItem " & ByCri
                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("SalesGemstems : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetSaleInvoice(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT SaleInvoiceHeaderID,SaleDate,CustomerID,StaffID,Case When LEN(REPLACE(REPLACE(LTRIM(RTRIM(Remark)),'  ',''),CHAR(13),''))>255 then '-' else REPLACE(REPLACE(LTRIM(RTRIM(Remark)),'  ',''),CHAR(13),'') End as Remark,TotalAmount,AddOrSub,DiscountAmount,PaidAmount,PromotionDiscount," & _
                                " LocationID,LastModifiedLoginUserName,LastModifiedDate,PurchaseHeaderID,PurchaseAmount,IsAdvance,EntryAdvanceDate,AllAdvanceAmount,IsCancel, " & _
                                " CancelDate,IsOtherCash,OtherCashAmount,IsDelete,IsUpload,IsSync,AllTaxAmt,SRTaxPer,SRTaxAmt,MemberID,MemberCode,MemberName,RedeemID,RedeemPoint,RedeemValue,TopupPoint,TopupValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus from tbl_SaleInvoiceHeader Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("SalesInvoice : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetWholeSaleReturn(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_WholeSaleReturn Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("WholeSaleReturn : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetSaleInvoiceDetail(ByVal SaleInvoiceHeaderID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtSaleInvoiceDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_SaleInvoiceDetail where SaleInvoiceHeaderID = @SaleInvoiceHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SaleInvoiceHeaderID", DbType.String, SaleInvoiceHeaderID)
                dtSaleInvoiceDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtSaleInvoiceDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetSaleLooseDiamondDetail(ByVal SaleLooseDiamondID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtSaleInvoiceDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_SaleLooseDiamondDetail where SaleLooseDiamondID = @SaleLooseDiamondID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SaleLooseDiamondID", DbType.String, SaleLooseDiamondID)
                dtSaleInvoiceDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtSaleInvoiceDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetMortgagePaybackItem(ByVal MortgagePaybackID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtMortgagePaybackItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_MortgagePaybackItem where MortgagePaybackID = @MortgagePaybackID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@MortgagePaybackID", DbType.String, MortgagePaybackID)
                dtMortgagePaybackItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtMortgagePaybackItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function


        Private Function GetSaleInvoiceGemsItem(ByVal SaleInvoiceDetailID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtSaleInvoiceGemsItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_SalesInvoiceGemItem where SaleInvoiceDetailID = @SaleInvoiceDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SaleInvoiceDetailID", DbType.String, SaleInvoiceDetailID)
                dtSaleInvoiceGemsItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtSaleInvoiceGemsItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetWholeSaleReturnItem(ByVal WholeSaleReturnID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtWholeSaleReturnItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_WholeSaleReturnItem where WholeSaleReturnID = @WholeSaleReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@WholeSaleReturnID", DbType.String, WholeSaleReturnID)
                dtWholeSaleReturnItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtWholeSaleReturnItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetWholeSaleInvoice(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_WholeSaleInvoice Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("WholeSalesInvoice : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetWholeSaleInvoiceItem(ByVal WholeSaleInvoiceID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtWholeSaleInvoiceItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_WholesaleInvoiceItem where WholeSaleInvoiceID = @WholeSaleInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@WholeSaleInvoiceID", DbType.String, WholeSaleInvoiceID)
                dtWholeSaleInvoiceItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtWholeSaleInvoiceItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetSaleVolume(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_SalesVolume Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("SaleVolume : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetSaleGems(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_SaleGems Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("SaleGems: " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetSaleVolumeDetail(ByVal SalesVolumeID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtSaleVolumeDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_SalesVolumeDetail where SalesVolumeID = @SalesVolumeID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SalesVolumeID", DbType.String, SalesVolumeID)
                dtSaleVolumeDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtSaleVolumeDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetSaleGemsItem(ByVal SaleGemsID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtSaleGemsItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_SaleGemsItem where SaleGemsID = @SaleGemsID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SaleGemsID", DbType.String, SaleGemsID)
                dtSaleGemsItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtSaleGemsItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetReturnAdvance(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_returnadvance Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("ReturnAdvance : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetReturnRepairHeader(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_returnrepairheader Where LastModifiedDate BETWEEN @posdate AND @nowdate"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("ReturnRepairHeader: " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetReturnAdvanceItem(ByVal ReturnAdvanceID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtReturnAdvanceItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_returnadvanceitem where ReturnAdvanceID = @ReturnAdvanceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ReturnAdvanceID", DbType.String, ReturnAdvanceID)
                dtReturnAdvanceItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtReturnAdvanceItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetReturnRepairDetail(ByVal ReturnRepairID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtReturnRepairDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_ReturnRepairDetail where ReturnRepairID = @ReturnRepairID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ReturnRepairID", DbType.String, ReturnRepairID)
                dtReturnRepairDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtReturnRepairDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetReturnRepairGems(ByVal ReturnRepairDetailID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtReturnRepairGems As DataTable

            Try

                strCommandText = " Select * FROM tbl_ReturnRepairGem where ReturnRepairDetailID = @ReturnRepairDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ReturnRepairDetailID", DbType.String, ReturnRepairDetailID)
                dtReturnRepairGems = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtReturnRepairGems

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetRepairHeader(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_repairheader Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("RepairHeader: " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetRepairDetail(ByVal RepairID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtRepairDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_RepairDetail where RepairID = @RepairID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@RepairID", DbType.String, RepairID)
                dtRepairDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtRepairDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetPurchaseOutItem()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                'strCommandText = " SELECT * from tbl_PurchaseOutItem Where IsSync=0 And LocationID=" & CurrentCompanyID
                strCommandText = " SELECT * from tbl_PurchaseOutItem Where IsSync=0 And LocationID=" & Global_CurrentLocationID

                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("PurchaseOutItem: " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetPurchaseOutItemDetail(ByVal PurchaseOutID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtPurchaseOutItemDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_PurchaseOutItemDetail where PurchaseOutID = @PurchaseOutID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@PurchaseOutID", DbType.String, PurchaseOutID)
                dtPurchaseOutItemDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtPurchaseOutItemDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetPurchaseHeader(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_PurchaseHeader Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("PurchaseHeader: " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetPurchaseDetail(ByVal PurchaseHeaderID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtPurchaseDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_PurchaseDetail where PurchaseHeaderID = @PurchaseHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@PurchaseHeaderID", DbType.String, PurchaseHeaderID)
                dtPurchaseDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtPurchaseDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetPurchaseGems(ByVal PurchaseDetailID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtPurchaseDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_PurchaseGem where PurchaseDetailID = @PurchaseDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@PurchaseDetailID", DbType.String, PurchaseDetailID)
                dtPurchaseDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtPurchaseDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetPurchaseFromSupplier(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_PurchaseFromSupplier Where LastModifiedDate BETWEEN @posdate AND @nowdate"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("PurchaseFromSupplier: " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetPurchaseFromSupplierItem(ByVal PurchaseFromSupplierID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtPurchaseFromSupplier As DataTable

            Try

                strCommandText = " Select * FROM tbl_PurchaseFromSupplierItem where PurchaseFromSupplierID = @PurchaseFromSupplierID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@PurchaseFromSupplierID", DbType.String, PurchaseFromSupplierID)
                dtPurchaseFromSupplier = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtPurchaseFromSupplier

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetOrderInvoice(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_OrderInvoice Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("OrderInvoice : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetOrderReceiveDetail(ByVal OrderInvoiceID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtOrderReceiveDetail As DataTable

            Try

                strCommandText = " Select * FROM tbl_OrderReceiveDetail where OrderInvoiceID = @OrderInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@OrderInvoiceID", DbType.String, OrderInvoiceID)
                dtOrderReceiveDetail = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtOrderReceiveDetail

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetOrderInvoiceGemsItem(ByVal OrderReceiveDetailID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtOrderInvoiceGemsItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_OrderInvoiceGemsItem where OrderReceiveDetailID = @OrderReceiveDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@OrderReceiveDetailID", DbType.String, OrderReceiveDetailID)
                dtOrderInvoiceGemsItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtOrderInvoiceGemsItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetOrderReturnHeader(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_OrderReturnHeader Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("OrderReturnHeader : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetOrderReturnDetail(ByVal OrderReturnHeaderID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtOrderReturnHeader As DataTable

            Try

                strCommandText = " Select * FROM tbl_OrderReturnDetail where OrderReturnHeaderID = @OrderReturnHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@OrderReturnHeaderID", DbType.String, OrderReturnHeaderID)
                dtOrderReturnHeader = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtOrderReturnHeader

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetOrderReturnGemsItem(ByVal OrderInvoiceDetailID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtOrderInvoiceGemsItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_OrderReturnGemsItem where OrderInvoiceDetailID = @OrderInvoiceDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@OrderInvoiceDetailID", DbType.String, OrderInvoiceDetailID)
                dtOrderInvoiceGemsItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtOrderInvoiceGemsItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetMortgageInvoice(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_MortgageInvoice Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("MortgageInvoice : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetMortgageInvoiceItem(ByVal MortgageInvoiceID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtMorgageInvoiceItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_MortgageInvoiceItem where MortgageInvoiceID = @MortgageInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@MortgageInvoiceID", DbType.String, MortgageInvoiceID)
                dtMorgageInvoiceItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtMorgageInvoiceItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetMortgagePayback(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtMortgagePayback As DataTable

            Try

                strCommandText = " Select * FROM tbl_MortgagePayback Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtMortgagePayback = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtMortgagePayback

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetMortgageReturn(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtMortgageReturn As DataTable

            Try

                strCommandText = " Select * FROM tbl_MortgageReturn Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtMortgageReturn = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtMortgageReturn

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetMortgageInterest(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtMortgageInterest As DataTable

            Try

                'strCommandText = " Select * FROM tbl_MortgageInterest where IsUpload=0 And MortgageInvoiceID = @MortgageInvoiceID And LocationID=" & CurrentCompanyID
                strCommandText = " Select * FROM tbl_MortgageInterest  Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtMortgageInterest = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtMortgageInterest

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetConsignmentSale(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_ConsignmentSale Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("ConsignmentSale : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetConsignmentSaleItem(ByVal ConsignmentSaleID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtConsignmentSaleItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_ConsignmentSaleItem where ConsignmentSaleID = @ConsignmentSaleID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ConsignmentSaleID", DbType.String, ConsignmentSaleID)
                dtConsignmentSaleItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtConsignmentSaleItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function
        Private Function GetCashReceipt(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_CashReceipt Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("CashReceipt : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetGeneralLedger(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_generalledgerbylocation Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GeneralLedger : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetSaleLooseDiamond(ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal CompanyID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try
                strCommandText = " SELECT * from tbl_SaleLooseDiamondHeader Where LastModifiedDate BETWEEN @posdate AND @nowdate "
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@posdate", DbType.DateTime, posdate.AddMinutes(-3))
                DB.AddInParameter(DBComm, "@nowdate", DbType.DateTime, nowdate)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("SaleLooseDiamond : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Sub InsertGoldQuality(ByVal dtGoldQuality As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtGoldQuality.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_GoldQuality (GoldQualityID,GoldQuality,Prefix,IsGramRate, MultiplyBy, DividedBy, IsSolidGold,IsDelete,IsUpload,LocationID,LastModifiedDate,BarcodeStatus)"
                    strCommandText += " Values (@GoldQualityID,@GoldQuality,@Prefix,@IsGramRate, @MultiplyBy, @DividedBy, @IsSolidGold,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate,@BarcodeStatus)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam.Value = dtGoldQuality.Rows(i).Item("GoldQualityID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@GoldQuality", OleDbType.VarChar)
                    objParam2.Value = dtGoldQuality.Rows(i).Item("GoldQuality")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Prefix", OleDbType.VarChar)
                    objParam3.Value = dtGoldQuality.Rows(i).Item("Prefix")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@IsGramRate", OleDbType.Boolean)
                    objParam4.Value = dtGoldQuality.Rows(i).Item("IsGramRate")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@MultiplyBy", OleDbType.Decimal)
                    objParam5.Value = dtGoldQuality.Rows(i).Item("MultiplyBy")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@DividedBy", OleDbType.Decimal)
                    objParam6.Value = dtGoldQuality.Rows(i).Item("DividedBy")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@IsSolidGold", OleDbType.Boolean)
                    objParam7.Value = dtGoldQuality.Rows(i).Item("IsSolidGold")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam8.Value = dtGoldQuality.Rows(i).Item("IsDelete")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam9.Value = dtGoldQuality.Rows(i).Item("IsUpload")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam10.Value = dtGoldQuality.Rows(i).Item("LocationID")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam11.Value = dtGoldQuality.Rows(i).Item("LastModifiedDate")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@BarcodeStatus", OleDbType.Integer)
                    objParam12.Value = dtGoldQuality.Rows(i).Item("BarcodeStatus")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertGoldQuality: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertMeasurement(ByVal dtMeasurement As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtMeasurement.Rows.Count - 1
                Try

                    strCommandText = " INSERT INTO tbl_Measurement(FromMeasurement,ToMeasurement,Equivalent) VALUES (@FromMeasurement,@ToMeasurement,@Equivalent)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@FromMeasurement", OleDbType.VarChar)
                    objParam.Value = dtMeasurement.Rows(i).Item("FromMeasurement")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ToMeasurement", OleDbType.VarChar)
                    objParam2.Value = dtMeasurement.Rows(i).Item("ToMeasurement")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Equivalent", OleDbType.Numeric)
                    objParam3.Value = dtMeasurement.Rows(i).Item("Equivalent")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertMeasurement: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertCustomer(ByVal dtCustomer As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtCustomer.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_Customer ( CustomerID,CustomerCode,CustomerName,CustomerAddress,CustomerTel,Remark,IsInactive,IsDelete,LastModifiedDate,IsUpload,DOB,LocationID,NRC,MemberCode)"
                    strCommandText += " Values (@CustomerID,@CustomerCode,@CustomerName,@CustomerAddress,@CustomerTel,@Remark,@IsInactive,@IsDelete,@LastModifiedDate,@IsUpload,@DOB,@LocationID,@NRC,@MemberCode)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam.Value = dtCustomer.Rows(i).Item("CustomerID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@CustomerCode", OleDbType.VarChar)
                    objParam2.Value = dtCustomer.Rows(i).Item("CustomerCode")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@CustomerName", OleDbType.VarChar)
                    objParam3.Value = dtCustomer.Rows(i).Item("CustomerName")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CustomerAddress", OleDbType.VarChar)
                    objParam4.Value = dtCustomer.Rows(i).Item("CustomerAddress")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@CustomerTel", OleDbType.VarChar)
                    objParam5.Value = dtCustomer.Rows(i).Item("CustomerTel")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam6.Value = dtCustomer.Rows(i).Item("Remark")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@IsInactive", OleDbType.Boolean)
                    objParam7.Value = dtCustomer.Rows(i).Item("IsInactive")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam8.Value = dtCustomer.Rows(i).Item("IsDelete")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam9.Value = dtCustomer.Rows(i).Item("LastModifiedDate")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam10.Value = dtCustomer.Rows(i).Item("IsUpload")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@DOB", OleDbType.Date)
                    objParam11.Value = dtCustomer.Rows(i).Item("DOB")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam12.Value = dtCustomer.Rows(i).Item("LocationID")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@NRC", OleDbType.VarChar)
                    objParam13.Value = dtCustomer.Rows(i).Item("NRC")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@MemberCode", OleDbType.VarChar)
                    objParam14.Value = dtCustomer.Rows(i).Item("MemberCode")

                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertCustomer: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertSupplier(ByVal dtSupplier As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSupplier.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_Supplier ( SupplierID, SupplierCode, SupplierName, SupplierAddress, Email, Website, PhoneNo, Remark,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@SupplierID, @SupplierCode, @SupplierName, @SupplierAddress, @Email, @Website, @PhoneNo, @Remark,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SupplierID", OleDbType.VarChar)
                    objParam.Value = dtSupplier.Rows(i).Item("SupplierID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SupplierCode", OleDbType.VarChar)
                    objParam2.Value = dtSupplier.Rows(i).Item("SupplierCode")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@SupplierName", OleDbType.VarChar)
                    objParam3.Value = dtSupplier.Rows(i).Item("SupplierName")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@SupplierAddress", OleDbType.VarChar)
                    objParam4.Value = dtSupplier.Rows(i).Item("SupplierAddress")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Email", OleDbType.VarChar)
                    objParam5.Value = dtSupplier.Rows(i).Item("Email")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Website", OleDbType.VarChar)
                    objParam6.Value = dtSupplier.Rows(i).Item("Website")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@PhoneNo", OleDbType.VarChar)
                    objParam7.Value = dtSupplier.Rows(i).Item("PhoneNo")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam8.Value = dtSupplier.Rows(i).Item("Remark")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam9.Value = dtSupplier.Rows(i).Item("IsDelete")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam10.Value = dtSupplier.Rows(i).Item("IsUpload")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam11.Value = dtSupplier.Rows(i).Item("LocationID")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam12.Value = dtSupplier.Rows(i).Item("LastModifiedDate")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertSupplier: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertStaff(ByVal dtStaff As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtStaff.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_Staff (StaffID,Staff,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@StaffID,@Staff,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam.Value = dtStaff.Rows(i).Item("StaffID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@Staff", OleDbType.VarChar)
                    objParam2.Value = dtStaff.Rows(i).Item("Staff")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam3.Value = dtStaff.Rows(i).Item("IsDelete")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam4.Value = dtStaff.Rows(i).Item("IsUpload")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam5.Value = dtStaff.Rows(i).Item("LocationID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam6.Value = dtStaff.Rows(i).Item("LastModifiedDate")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertStaff: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertCurrentPrice(ByVal dtCurrentPrice As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtCurrentPrice.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_StandardRate ( DefineID,DefineDateTime,GoldQualityID,SalesRate,PurchaseRate,ExchangeRate,Remark,PercentPurchaseRate,PercentExchangeRate,PercentDamageRate,DamageRate,SaleRatePerGram,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@DefineID,@DefineDateTime,@GoldQualityID,@SalesRate,@PurchaseRate,@ExchangeRate,@Remark,@PercentPurchaseRate,@PercentExchangeRate,@PercentDamageRate,@DamageRate,@SaleRatePerGram,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@DefineID", OleDbType.VarChar)
                    objParam.Value = dtCurrentPrice.Rows(i).Item("DefineID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@DefineDateTime", OleDbType.Date)
                    objParam2.Value = dtCurrentPrice.Rows(i).Item("DefineDateTime")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam3.Value = dtCurrentPrice.Rows(i).Item("GoldQualityID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.VarChar)
                    objParam4.Value = dtCurrentPrice.Rows(i).Item("SalesRate")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@PurchaseRate", OleDbType.VarChar)
                    objParam5.Value = dtCurrentPrice.Rows(i).Item("PurchaseRate")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ExchangeRate", OleDbType.VarChar)
                    objParam6.Value = dtCurrentPrice.Rows(i).Item("ExchangeRate")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam7.Value = dtCurrentPrice.Rows(i).Item("Remark")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PercentPurchaseRate", OleDbType.VarChar)
                    objParam8.Value = dtCurrentPrice.Rows(i).Item("PercentPurchaseRate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@PercentExchangeRate", OleDbType.Boolean)
                    objParam9.Value = dtCurrentPrice.Rows(i).Item("PercentExchangeRate")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PercentDamageRate", OleDbType.Boolean)
                    objParam10.Value = dtCurrentPrice.Rows(i).Item("PercentDamageRate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@DamageRate", OleDbType.VarChar)
                    objParam11.Value = dtCurrentPrice.Rows(i).Item("DamageRate")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@SaleRatePerGram", OleDbType.Boolean)
                    objParam12.Value = dtCurrentPrice.Rows(i).Item("SaleRatePerGram")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam13.Value = dtCurrentPrice.Rows(i).Item("IsDelete")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam14.Value = dtCurrentPrice.Rows(i).Item("IsUpload")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam15.Value = dtCurrentPrice.Rows(i).Item("LocationID")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam16.Value = dtCurrentPrice.Rows(i).Item("LastModifiedDate")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertCurrentPrice: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertDiamondPrice(ByVal dtCurrentPrice As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtCurrentPrice.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_DiamondPriceRate (DefineID,DefineDateTime,CaratFrom,CaratTo,PriceRate,WholeSaleRate,PercentDirectChange,PercentReturn,IsDelete,LastModifiedDate,LastModifiedUserName,PurchaseRate)"
                    strCommandText += " Values (@DefineID,@DefineDateTime,@CaratFrom,@CaratTo,@PriceRate,@WholeSaleRate,@PercentDirectChange,@PercentReturn,@IsDelete,@LastModifiedDate,@LastModifiedUserName,@PurchaseRate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@DefineID", OleDbType.VarChar)
                    objParam.Value = dtCurrentPrice.Rows(i).Item("DefineID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@DefineDateTime", OleDbType.Date)
                    objParam2.Value = dtCurrentPrice.Rows(i).Item("DefineDateTime")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@CaratFrom", OleDbType.Decimal)
                    objParam3.Value = dtCurrentPrice.Rows(i).Item("CaratFrom")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CaratTo", OleDbType.Decimal)
                    objParam4.Value = dtCurrentPrice.Rows(i).Item("CaratTo")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@PriceRate", OleDbType.Decimal)
                    objParam5.Value = dtCurrentPrice.Rows(i).Item("PriceRate")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@WholeSaleRate", OleDbType.Decimal)
                    objParam6.Value = dtCurrentPrice.Rows(i).Item("WholeSaleRate")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@PercentDirectChange", OleDbType.Numeric)
                    objParam7.Value = dtCurrentPrice.Rows(i).Item("PercentDirectChange")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PercentReturn", OleDbType.Numeric)
                    objParam8.Value = dtCurrentPrice.Rows(i).Item("PercentReturn")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam9.Value = dtCurrentPrice.Rows(i).Item("IsDelete")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam10.Value = dtCurrentPrice.Rows(i).Item("LastModifiedDate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LastModifiedUserName", OleDbType.VarChar)
                    objParam11.Value = dtCurrentPrice.Rows(i).Item("LastModifiedUserName")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@PurchaseRate", OleDbType.Decimal)
                    objParam12.Value = dtCurrentPrice.Rows(i).Item("PurchaseRate")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertDiamondPrice: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertItemCategory(ByVal dtItemCategory As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtItemCategory.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ItemCategory ( ItemCategoryID,ItemCategory,Prefix,ItemTaxPer,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@ItemCategoryID,@ItemCategory,@Prefix,@ItemTaxPer,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam.Value = dtItemCategory.Rows(i).Item("ItemCategoryID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ItemCategory", OleDbType.VarChar)
                    objParam2.Value = dtItemCategory.Rows(i).Item("ItemCategory")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Prefix", OleDbType.VarChar)
                    objParam3.Value = dtItemCategory.Rows(i).Item("Prefix")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemTaxPer", OleDbType.Decimal)
                    objParam4.Value = dtItemCategory.Rows(i).Item("ItemTaxPer")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam5.Value = dtItemCategory.Rows(i).Item("IsDelete")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam6.Value = dtItemCategory.Rows(i).Item("IsUpload")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam7.Value = dtItemCategory.Rows(i).Item("LocationID")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtItemCategory.Rows(i).Item("LastModifiedDate")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertItemCategory: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertItemName(ByVal dtItemName As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtItemName.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ItemName (ItemNameID,ItemName,ItemCategoryID,ItemPhoto,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@ItemNameID,@ItemName,@ItemCategoryID,@ItemPhoto,@IsDelete,@isUpload,@LocationID,@LastModifiedDate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam.Value = dtItemName.Rows(i).Item("ItemNameID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ItemName", OleDbType.VarChar)
                    objParam2.Value = dtItemName.Rows(i).Item("ItemName")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtItemName.Rows(i).Item("ItemCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemPhoto", OleDbType.VarChar)
                    objParam4.Value = dtItemName.Rows(i).Item("ItemPhoto")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam5.Value = dtItemName.Rows(i).Item("IsDelete")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam6.Value = dtItemName.Rows(i).Item("IsUpload")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam7.Value = dtItemName.Rows(i).Item("LocationID")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtItemName.Rows(i).Item("LastModifiedDate")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertItemName: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertGoldSmith(ByVal dtGoldSmith As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtGoldSmith.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_GoldSmith ( GoldSmithID,GoldSmithCode,Name,Address,Phone,Remark,IsInactive,LastModifiedDate,IsDelete,IsUpload,LocationID)"
                    strCommandText += " Values (@GoldSmithID,@GoldSmithCode,@GoldSmithName,@GoldSmithAddress,@Phone,@Remark,@IsInactive,@LastModifiedDate,@IsDelete,@IsUpload,@LocationID)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@GoldSmithID", OleDbType.VarChar)
                    objParam.Value = dtGoldSmith.Rows(i).Item("GoldSmithID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@GoldSmithCode", OleDbType.VarChar)
                    objParam2.Value = dtGoldSmith.Rows(i).Item("GoldSmithCode")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Name", OleDbType.VarChar)
                    objParam3.Value = dtGoldSmith.Rows(i).Item("Name")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@Address", OleDbType.VarChar)
                    objParam4.Value = dtGoldSmith.Rows(i).Item("Address")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Phone", OleDbType.VarChar)
                    objParam5.Value = dtGoldSmith.Rows(i).Item("Phone")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam6.Value = dtGoldSmith.Rows(i).Item("Remark")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@IsInactive", OleDbType.Boolean)
                    objParam7.Value = dtGoldSmith.Rows(i).Item("IsInactive")

                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtGoldSmith.Rows(i).Item("LastModifiedDate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam9.Value = dtGoldSmith.Rows(i).Item("IsDelete")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam10.Value = dtGoldSmith.Rows(i).Item("IsUpload")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam11.Value = dtGoldSmith.Rows(i).Item("LocationID")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertGoldSmith: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertGemsCategory(ByVal dtGemsCategory As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtGemsCategory.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_GemsCategory (GemsCategoryID,GemsCategory,StoneType,GemTaxPer,IsDelete,IsUpload,LocationID,LastModifiedDate,Prefix)"
                    strCommandText += " Values (@GemsCategoryID,@GemsCategory,@StoneType,@GemTaxPer,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate,@Prefix)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam.Value = dtGemsCategory.Rows(i).Item("GemsCategoryID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@GemsCategory", OleDbType.VarChar)
                    objParam2.Value = dtGemsCategory.Rows(i).Item("GemsCategory")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StoneType", OleDbType.VarChar)
                    objParam3.Value = dtGemsCategory.Rows(i).Item("StoneType")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemTaxPer", OleDbType.Decimal)
                    objParam4.Value = dtGemsCategory.Rows(i).Item("GemTaxPer")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam5.Value = dtGemsCategory.Rows(i).Item("IsDelete")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam6.Value = dtGemsCategory.Rows(i).Item("IsUpload")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam7.Value = dtGemsCategory.Rows(i).Item("LocationID")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtGemsCategory.Rows(i).Item("LastModifiedDate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Prefix", OleDbType.VarChar)
                    objParam9.Value = dtGemsCategory.Rows(i).Item("Prefix")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertGemsCategory: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertWaste(ByVal dtWaste As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtWaste.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_WasteSetupHeader (WasteSetupHeaderID,ItemCategoryID,ItemNameID,IsUpload,IsDelete,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@WasteSetupHeaderID,@ItemCategoryID,@ItemNameID,@IsUpload,@IsDelete,@LocationID,@LastModifiedDate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@WasteSetupHeaderID", OleDbType.VarChar)
                    objParam.Value = dtWaste.Rows(i).Item("WasteSetupHeaderID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam2.Value = dtWaste.Rows(i).Item("ItemCategoryID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam3.Value = dtWaste.Rows(i).Item("ItemNameID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam4.Value = dtWaste.Rows(i).Item("IsUpload")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam5.Value = dtWaste.Rows(i).Item("IsDelete")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam6.Value = dtWaste.Rows(i).Item("LocationID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam7.Value = dtWaste.Rows(i).Item("LastModifiedDate")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertWasteSetupHeader: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertWasteItem(ByVal dtWasteItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtWasteItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_WasteSetupDetail (WasteSetupHeaderID,WasteSetupDetailID,GoldQualityID,MinNetWeightTK,MinNetWeightTG,MaxNetWeightTK,MaxNetWeightTG,MinWeightTKForSale,MinWeightTGForSale )"
                    strCommandText += " Values (@WasteSetupHeaderID,@WasteSetupDetailID,@GoldQualityID,@MinNetWeightTK,@MinNetWeightTG,@MaxNetWeightTK,@MaxNetWeightTG,@MinWeightTKForSale,@MinWeightTGForSale)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@WasteSetupHeaderID", OleDbType.VarChar)
                    objParam.Value = dtWasteItem.Rows(i).Item("WasteSetupHeaderID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@WasteSetupDetailID", OleDbType.VarChar)
                    objParam2.Value = dtWasteItem.Rows(i).Item("WasteSetupDetailID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam3.Value = dtWasteItem.Rows(i).Item("GoldQualityID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@MinNetWeightTK", OleDbType.Decimal)
                    objParam4.Value = dtWasteItem.Rows(i).Item("MinNetWeightTK")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@MinNetWeightTG", OleDbType.Decimal)
                    objParam5.Value = dtWasteItem.Rows(i).Item("MinNetWeightTG")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@MaxNetWeightTK", OleDbType.Decimal)
                    objParam6.Value = dtWasteItem.Rows(i).Item("MaxNetWeightTK")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@MaxNetWeightTG", OleDbType.Decimal)
                    objParam7.Value = dtWasteItem.Rows(i).Item("MaxNetWeightTG")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@MinWeightTKForSale", OleDbType.Decimal)
                    objParam8.Value = dtWasteItem.Rows(i).Item("MinWeightTKForSale")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@MinWeightTGForSale", OleDbType.Decimal)
                    objParam9.Value = dtWasteItem.Rows(i).Item("MinWeightTGForSale")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertWasteSetupDetail: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertLocation(ByVal dtLocation As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtLocation.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_Location(LocationID,Location,Address,Phone,Remark15,RemarkDone,IsDelete,IsUpload,CurrentLocationID,LastModifiedDate,IsHeadOffice)"
                    strCommandText += " Values (@LocationID,@Location,@Address,@Phone,@Remark15,@RemarkDone,@IsDelete,@IsUpload,@CurrentLocationID,@LastModifieDate,@IsHeadOffice)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam.Value = dtLocation.Rows(i).Item("LocationID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@Location", OleDbType.VarChar)
                    objParam2.Value = dtLocation.Rows(i).Item("Location")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Address", OleDbType.VarChar)
                    objParam3.Value = dtLocation.Rows(i).Item("Address")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@Phone", OleDbType.VarChar)
                    objParam4.Value = dtLocation.Rows(i).Item("Phone")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark15", OleDbType.VarChar)
                    objParam5.Value = dtLocation.Rows(i).Item("Remark15")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@RemarkDone", OleDbType.VarChar)
                    objParam6.Value = dtLocation.Rows(i).Item("RemarkDone")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam7.Value = dtLocation.Rows(i).Item("IsDelete")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam8.Value = dtLocation.Rows(i).Item("IsUpload")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@CurrentLocationID", OleDbType.VarChar)
                    objParam9.Value = dtLocation.Rows(i).Item("CurrentLocationID")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam10.Value = dtLocation.Rows(i).Item("LastModifiedDate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@IsHeadOffice", OleDbType.Boolean)
                    objParam11.Value = dtLocation.Rows(i).Item("IsHeadOffice")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertLocation: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

#Region "Insert Expense 27/05/2019 "

        'Private Sub InsertExpense(ByVal dtExpense As DataTable, ByVal DatabasePath As String)
        '    Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

        '    Dim strCommandText As String
        '    Dim FailIDStr As String = ""
        '    Dim dtExpenseItem As New DataTable
        '    Dim Command As OleDbCommand
        '    'Connstr.Close()
        '    Connstr.Open()
        '    For i As Integer = 0 To dtExpense.Rows.Count - 1
        '        Try

        '            strCommandText = " INSERT INTO tbl_DailyExpense "
        '            strCommandText += " (DailyExpenseID, ExpenseDate, Remark, TotalAmount, LocationID,ReturnAmount,LastModifiedLoginUserName, LastModifiedDate,IsDelete,IsSync,IsBank) "
        '            strCommandText += " Values( @DailyExpenseID, @ExpenseDate, @Remark, @TotalAmount, @LocationID,@ReturnAmount,@LastModifiedLoginUserName, getdate(),@IsDelete,@IsSync,@IsBank) "

        '            Command = New OleDbCommand(strCommandText, Connstr)
        '            Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyExpenseID", OleDbType.VarChar)
        '            objParam.Value = dtExpense.Rows(i).Item("DailyExpenseID")

        '            Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ExpenseDate", OleDbType.Date)
        '            objParam2.Value = dtExpense.Rows(i).Item("ExpenseDate")
        '            Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
        '            objParam3.Value = dtExpense.Rows(i).Item("Remark")
        '            Dim objParam4 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
        '            objParam4.Value = dtExpense.Rows(i).Item("TotalAmount")
        '            Dim objParam5 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
        '            objParam5.Value = dtExpense.Rows(i).Item("LocationID")
        '            Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ReturnAmount", OleDbType.Numeric)
        '            objParam6.Value = dtExpense.Rows(i).Item("ReturnAmount")
        '            Dim objParam7 As OleDbParameter = Command.Parameters.Add("@CashPaymentID", OleDbType.VarChar)
        '            objParam7.Value = dtExpense.Rows(i).Item("CashPaymentID")
        '            Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
        '            objParam8.Value = dtExpense.Rows(i).Item("LastModifiedLoginUserName")
        '            Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
        '            objParam9.Value = dtExpense.Rows(i).Item("LastModifiedDate")
        '            Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
        '            objParam10.Value = dtExpense.Rows(i).Item("IsDelete")
        '            Dim objParam11 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
        '            objParam11.Value = dtExpense.Rows(i).Item("IsSync")
        '            Dim objParam12 As OleDbParameter = Command.Parameters.Add("@IsBank", OleDbType.Boolean)
        '            objParam12.Value = dtExpense.Rows(i).Item("IsBank")


        '            Command.ExecuteNonQuery()
        '            dtExpenseItem = GetExpenseItem(dtExpense.Rows(i).Item("DailyExpenseID"))
        '            If dtExpenseItem.Rows.Count > 0 Then
        '                InsertExpenseItem(dtExpenseItem, DatabasePath)
        '            End If
        '        Catch ex As Exception
        '            WriteEventlogs("InsertExpense: " & ex.Message)
        '        End Try
        '    Next

        '    ' Command.Connection.Close()
        '    Connstr.Close()
        'End Sub
        'Private Sub InsertExpenseItem(ByVal dtExpenseItem As DataTable, ByVal DatabasePath As String)
        '    Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

        '    Dim strCommandText As String
        '    Dim FailIDStr As String = ""

        '    Dim Command As OleDbCommand
        '    'Connstr.Close()
        '    Connstr.Open()
        '    For i As Integer = 0 To dtExpenseItem.Rows.Count - 1
        '        Try

        '            strCommandText = "INSERT INTO tbl_DailyExpenseItem "
        '            strCommandText += " (DailyExpenseItemID, DailyExpenseID, Description, QTY, UnitPrice, Amount,Remark,LastModifiedDate,LastModifiedLoginUserName) "
        '            strCommandText += " VALUES ( @DailyExpenseItemID, @DailyExpenseID, @Description, @QTY, @UnitPrice, @Amount,@Remark,@LastModifiedDate,@LastModifiedLoginUserName) "

        '            Command = New OleDbCommand(strCommandText, Connstr)
        '            Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyExpenseItemID", OleDbType.VarChar)
        '            objParam.Value = dtExpenseItem.Rows(i).Item("DailyExpenseItemID")

        '            Dim objParam2 As OleDbParameter = Command.Parameters.Add("@DailyExpenseID", OleDbType.VarChar)
        '            objParam2.Value = dtExpenseItem.Rows(i).Item("DailyExpenseID")
        '            Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Description", OleDbType.VarChar)
        '            objParam3.Value = dtExpenseItem.Rows(i).Item("Description")
        '            Dim objParam4 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.BigInt)
        '            objParam4.Value = dtExpenseItem.Rows(i).Item("QTY")
        '            Dim objParam5 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.BigInt)
        '            objParam5.Value = dtExpenseItem.Rows(i).Item("UnitPrice")
        '            Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.BigInt)
        '            objParam6.Value = dtExpenseItem.Rows(i).Item("Amount")
        '            Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
        '            objParam7.Value = dtExpenseItem.Rows(i).Item("Remark")
        '            Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
        '            objParam8.Value = dtExpenseItem.Rows(i).Item("LastModifiedDate")
        '            Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
        '            objParam9.Value = dtExpenseItem.Rows(i).Item("LastModifiedLoginUserName")
        '            Command.ExecuteNonQuery()


        '        Catch ex As Exception
        '            WriteEventlogs("InsertExpenseItem: " & ex.Message)
        '        End Try
        '    Next

        '    ' Command.Connection.Close()
        '    Connstr.Close()
        'End Sub

        'Private Sub InsertIncome(ByVal dtIncome As DataTable, ByVal DatabasePath As String)
        '    Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

        '    Dim strCommandText As String
        '    Dim FailIDStr As String = ""
        '    Dim dtIncomeItem As New DataTable
        '    Dim Command As OleDbCommand
        '    'Connstr.Close()
        '    Connstr.Open()
        '    For i As Integer = 0 To dtIncome.Rows.Count - 1
        '        Try

        '            strCommandText = " INSERT INTO tbl_DailyIncome "
        '            strCommandText += " (DailyIncomeID, IncomeDate, Remark, TotalAmount,LocationID,LastModifiedDate,LastModifiedLoginUserName,IsDelete,IsSync,IsBank) "
        '            strCommandText += " Values( @DailyIncomeID, @IncomeDate, @Remark, @TotalAmount,@LocationID,@LastModifiedDate,@LastModifiedLoginUserName,@IsDelete,@IsSync,@IsBank) "

        '            Command = New OleDbCommand(strCommandText, Connstr)
        '            Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyIncomeID", OleDbType.VarChar)
        '            objParam.Value = dtIncome.Rows(i).Item("DailyIncomeID")

        '            Dim objParam2 As OleDbParameter = Command.Parameters.Add("@IncomeDate", OleDbType.Date)
        '            objParam2.Value = dtIncome.Rows(i).Item("IncomeDate")
        '            Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
        '            objParam3.Value = dtIncome.Rows(i).Item("Remark")
        '            Dim objParam4 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
        '            objParam4.Value = dtIncome.Rows(i).Item("TotalAmount")
        '            Dim objParam5 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
        '            objParam5.Value = dtIncome.Rows(i).Item("LocationID")
        '            Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
        '            objParam6.Value = dtIncome.Rows(i).Item("LastModifiedDate")
        '            Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
        '            objParam7.Value = dtIncome.Rows(i).Item("LastModifiedLoginUserName")
        '            Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
        '            objParam8.Value = dtIncome.Rows(i).Item("IsDelete")
        '            Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
        '            objParam9.Value = dtIncome.Rows(i).Item("IsSync")
        '            Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsBank", OleDbType.Boolean)
        '            objParam10.Value = dtIncome.Rows(i).Item("IsBank")



        '            Command.ExecuteNonQuery()
        '            dtIncomeItem = GetIncomeItem(dtIncome.Rows(i).Item("DailyIncomeID"))
        '            If dtIncomeItem.Rows.Count > 0 Then
        '                InsertIncomeItem(dtIncomeItem, DatabasePath)

        '            End If

        '        Catch ex As Exception
        '            WriteEventlogs("InsertIncome: " & ex.Message)
        '        End Try
        '    Next

        '    ' Command.Connection.Close()
        '    Connstr.Close()
        'End Sub
        'Private Sub InsertIncomeItem(ByVal dtIncomeItem As DataTable, ByVal DatabasePath As String)
        '    Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

        '    Dim strCommandText As String
        '    Dim FailIDStr As String = ""

        '    Dim Command As OleDbCommand
        '    'Connstr.Close()
        '    Connstr.Open()
        '    For i As Integer = 0 To dtIncomeItem.Rows.Count - 1
        '        Try

        '            strCommandText = "INSERT INTO tbl_DailyIncomeItem "
        '            strCommandText += " (DailyIncomeItemID, DailyIncomeID,Description,QTY,UnitPrice,Amount,Remark,LastModifiedDate,LastModifiedLoginUserName) "
        '            strCommandText += " VALUES ( @DailyIncomeItemID, @DailyIncomeID,@Description, @QTY,@UnitPrice, @Amount,@Remark,@LastModifiedDate,@LastModifiedLoginUserName) "

        '            Command = New OleDbCommand(strCommandText, Connstr)
        '            Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyIncomeItemID", OleDbType.VarChar)
        '            objParam.Value = dtIncomeItem.Rows(i).Item("DailyIncomeItemID")

        '            Dim objParam2 As OleDbParameter = Command.Parameters.Add("@DailyIncomeID", OleDbType.VarChar)
        '            objParam2.Value = dtIncomeItem.Rows(i).Item("DailyIncomeID")
        '            Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Description", OleDbType.VarChar)
        '            objParam3.Value = dtIncomeItem.Rows(i).Item("Description")
        '            Dim objParam4 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.BigInt)
        '            objParam4.Value = dtIncomeItem.Rows(i).Item("QTY")
        '            Dim objParam5 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.BigInt)
        '            objParam5.Value = dtIncomeItem.Rows(i).Item("UnitPrice")
        '            Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.BigInt)
        '            objParam6.Value = dtIncomeItem.Rows(i).Item("Amount")
        '            Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
        '            objParam7.Value = dtIncomeItem.Rows(i).Item("Remark")
        '            Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
        '            objParam8.Value = dtIncomeItem.Rows(i).Item("LastModifiedDate")
        '            Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
        '            objParam9.Value = dtIncomeItem.Rows(i).Item("LastModifiedLoginUserName")

        '            Command.ExecuteNonQuery()


        '        Catch ex As Exception
        '            WriteEventlogs("InsertIncomeItem: " & ex.Message)
        '        End Try
        '    Next

        '    ' Command.Connection.Close()
        '    Connstr.Close()
        'End Sub
#End Region


        Private Sub InsertTransfer(ByVal dtTransfer As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtTransferItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransfer.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_Transfer ( TransferID,TransferDate,LocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync,IsConfirm)"
                    strCommandText += " Values (@TransferID,@TransferDate,@LocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@IsConfirm)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferID", OleDbType.VarChar)
                    objParam.Value = dtTransfer.Rows(i).Item("TransferID")
                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferDate", OleDbType.Date)
                    objParam2.Value = dtTransfer.Rows(i).Item("TransferDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam3.Value = dtTransfer.Rows(i).Item("LocationID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtTransfer.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtTransfer.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam6.Value = dtTransfer.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam7.Value = dtTransfer.Rows(i).Item("LastModifiedDate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam8.Value = dtTransfer.Rows(i).Item("IsDelete")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam9.Value = dtTransfer.Rows(i).Item("IsSync")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsConfirm", OleDbType.Boolean)
                    objParam10.Value = dtTransfer.Rows(i).Item("IsConfirm")

                    Command.ExecuteNonQuery()
                    Dim Strcri As String = ""

                    If Strcri = "" Then
                        Strcri = " Where TransferID in ( '" & dtTransfer.Rows(i).Item("TransferID") & "'" & ")"
                    Else
                        Strcri += ",'" & dtTransfer.Rows(i).Item("TransferID") & "'" & ")"
                    End If

                    dtTransferItem = GetAllTransferItem(Strcri)
                    If dtTransferItem.Rows.Count > 0 Then
                        InsertTransferItem(dtTransferItem, DatabasePath)

                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertTransfer: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertTransferItem(ByVal dtTransferItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransferItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_TransferItem ( TransferItemID,TransferID,ForSaleID,OriginalFixedPrice,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,PriceCode,FixPrice,IsReturn)"
                    strCommandText += " Values (@TransferItemID,@TransferID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@PriceCode,@FixPrice,@IsReturn)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferItemID", OleDbType.VarChar)
                    objParam.Value = dtTransferItem.Rows(i).Item("TransferItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferID", OleDbType.VarChar)
                    objParam2.Value = dtTransferItem.Rows(i).Item("TransferID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtTransferItem.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam4.Value = dtTransferItem.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@OriginalPriceGram", OleDbType.Numeric)
                    objParam5.Value = dtTransferItem.Rows(i).Item("OriginalPriceGram")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@OriginalPriceTK", OleDbType.Numeric)
                    objParam6.Value = dtTransferItem.Rows(i).Item("OriginalPriceTK")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@OriginalGemsPrice", OleDbType.Numeric)
                    objParam7.Value = dtTransferItem.Rows(i).Item("OriginalGemsPrice")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PriceCode", OleDbType.VarChar)
                    objParam8.Value = dtTransferItem.Rows(i).Item("PriceCode")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam9.Value = dtTransferItem.Rows(i).Item("FixPrice")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam10.Value = dtTransferItem.Rows(i).Item("IsReturn")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertTransferItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertTransferDiamond(ByVal dtTransfer As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtTransferItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransfer.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_TransferLooseDiamond ( TransferID,TransferDate,LocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync,IsConfirm)"
                    strCommandText += " Values (@TransferID,@TransferDate,@LocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@IsConfirm)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferID", OleDbType.VarChar)
                    objParam.Value = dtTransfer.Rows(i).Item("TransferID")
                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferDate", OleDbType.Date)
                    objParam2.Value = dtTransfer.Rows(i).Item("TransferDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam3.Value = dtTransfer.Rows(i).Item("LocationID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtTransfer.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtTransfer.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam6.Value = dtTransfer.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam7.Value = dtTransfer.Rows(i).Item("LastModifiedDate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam8.Value = dtTransfer.Rows(i).Item("IsDelete")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam9.Value = dtTransfer.Rows(i).Item("IsSync")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsConfirm", OleDbType.Boolean)
                    objParam10.Value = dtTransfer.Rows(i).Item("IsConfirm")

                    Command.ExecuteNonQuery()
                    Dim Strcri As String = ""

                    If Strcri = "" Then
                        Strcri = " Where TransferID in ( '" & dtTransfer.Rows(i).Item("TransferID") & "'" & ")"
                    Else
                        Strcri += ",'" & dtTransfer.Rows(i).Item("TransferID") & "'" & ")"
                    End If

                    dtTransferItem = GetAllTransferDiamondItem(Strcri)
                    If dtTransferItem.Rows.Count > 0 Then
                        InsertTransferDiamondItem(dtTransferItem, DatabasePath)

                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertTransferDiamond: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertTransferDiamondItem(ByVal dtTransferItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransferItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_TransferLooseDiamondItem ( TransferItemID,TransferID,ForSaleID,OriginalFixedPrice,OriginalPriceCarat,PriceCode,FixPrice,IsReturn)"
                    strCommandText += " Values (@TransferItemID,@TransferID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceCarat,@PriceCode,@FixPrice,@IsReturn)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferItemID", OleDbType.VarChar)
                    objParam.Value = dtTransferItem.Rows(i).Item("TransferItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferID", OleDbType.VarChar)
                    objParam2.Value = dtTransferItem.Rows(i).Item("TransferID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtTransferItem.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam4.Value = dtTransferItem.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@OriginalPriceGram", OleDbType.Numeric)
                    objParam5.Value = dtTransferItem.Rows(i).Item("OriginalPriceCarat")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PriceCode", OleDbType.VarChar)
                    objParam8.Value = dtTransferItem.Rows(i).Item("PriceCode")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam9.Value = dtTransferItem.Rows(i).Item("FixPrice")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam10.Value = dtTransferItem.Rows(i).Item("IsReturn")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertTransferDiamondItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertTransferReturn(ByVal dtTransferReturn As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtTransferReturnItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransferReturn.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_TransferReturn ( TransferReturnID,TransferReturnDate,CurrentLocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsUpload)"
                    strCommandText += " Values (@TransferReturnID,@TransferReturnDate,@CurrentLocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsUpload)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferReturnID", OleDbType.VarChar)
                    objParam.Value = dtTransferReturn.Rows(i).Item("TransferReturnID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferReturnDate", OleDbType.Date)
                    objParam2.Value = dtTransferReturn.Rows(i).Item("TransferReturnDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@CurrentLocationID", OleDbType.VarChar)
                    objParam3.Value = dtTransferReturn.Rows(i).Item("CurrentLocationID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtTransferReturn.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtTransferReturn.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam6.Value = dtTransferReturn.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam7.Value = dtTransferReturn.Rows(i).Item("LastModifiedDate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam8.Value = dtTransferReturn.Rows(i).Item("IsDelete")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam9.Value = dtTransferReturn.Rows(i).Item("IsUpload")

                    Command.ExecuteNonQuery()
                    Dim Strcri As String = ""

                    If Strcri = "" Then
                        Strcri = " Where TransferReturnID in ( '" & dtTransferReturn.Rows(i).Item("TransferReturnID") & "'" & ")"
                    Else
                        Strcri += ",'" & dtTransferReturn.Rows(i).Item("TransferReturnID") & "'" & ")"
                    End If

                    dtTransferReturnItem = GetAllTransferReturnItem(Strcri)
                    If dtTransferReturnItem.Rows.Count > 0 Then
                        InsertTransferReturnItem(dtTransferReturnItem, DatabasePath)

                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertTransferReturn: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertTransferReturnItem(ByVal dtTransferReturnItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransferReturnItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_TransferReturnItem ( TransferReturnItemID,TransferReturnID,ForSaleID,OriginalFixedPrice,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,PriceCode,FixPrice)"
                    strCommandText += " Values (@TransferReturnItemID,@TransferReturnID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@PriceCode,@FixPrice)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferReturnItemID", OleDbType.VarChar)
                    objParam.Value = dtTransferReturnItem.Rows(i).Item("TransferReturnItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferReturnID", OleDbType.VarChar)
                    objParam2.Value = dtTransferReturnItem.Rows(i).Item("TransferReturnID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtTransferReturnItem.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam4.Value = dtTransferReturnItem.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@OriginalPriceGram", OleDbType.Numeric)
                    objParam5.Value = dtTransferReturnItem.Rows(i).Item("OriginalPriceGram")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@OriginalPriceTK", OleDbType.Numeric)
                    objParam6.Value = dtTransferReturnItem.Rows(i).Item("OriginalPriceTK")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@OriginalGemsPrice", OleDbType.Numeric)
                    objParam7.Value = dtTransferReturnItem.Rows(i).Item("OriginalGemsPrice")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PriceCode", OleDbType.VarChar)
                    objParam8.Value = dtTransferReturnItem.Rows(i).Item("PriceCode")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam9.Value = dtTransferReturnItem.Rows(i).Item("FixPrice")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertTransferReturnItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertTransferReturnDiamond(ByVal dtTransferReturn As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtTransferReturnItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransferReturn.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_TransferReturnDiamond ( TransferReturnID,TransferReturnDate,CurrentLocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsUpload)"
                    strCommandText += " Values (@TransferReturnID,@TransferReturnDate,@CurrentLocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsUpload)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferReturnID", OleDbType.VarChar)
                    objParam.Value = dtTransferReturn.Rows(i).Item("TransferReturnID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferReturnDate", OleDbType.Date)
                    objParam2.Value = dtTransferReturn.Rows(i).Item("TransferReturnDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@CurrentLocationID", OleDbType.VarChar)
                    objParam3.Value = dtTransferReturn.Rows(i).Item("CurrentLocationID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtTransferReturn.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtTransferReturn.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam6.Value = dtTransferReturn.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam7.Value = dtTransferReturn.Rows(i).Item("LastModifiedDate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam8.Value = dtTransferReturn.Rows(i).Item("IsDelete")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam9.Value = dtTransferReturn.Rows(i).Item("IsUpload")

                    Command.ExecuteNonQuery()
                    Dim Strcri As String = ""

                    If Strcri = "" Then
                        Strcri = " Where TransferReturnID in ( '" & dtTransferReturn.Rows(i).Item("TransferReturnID") & "'" & ")"
                    Else
                        Strcri += ",'" & dtTransferReturn.Rows(i).Item("TransferReturnID") & "'" & ")"
                    End If

                    dtTransferReturnItem = GetAllTransferReturnDiamondItem(Strcri)
                    If dtTransferReturnItem.Rows.Count > 0 Then
                        InsertTransferReturnDiamondItem(dtTransferReturnItem, DatabasePath)

                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertTransferReturnDiamond: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertTransferReturnDiamondItem(ByVal dtTransferReturnItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtTransferReturnItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_TransferReturnDiamondItem ( TransferReturnItemID,TransferReturnID,ForSaleID,OriginalFixedPrice,OriginalPriceCarat,PriceCode,FixPrice)"
                    strCommandText += " Values (@TransferReturnItemID,@TransferReturnID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceCarat,@PriceCode,@FixPrice)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@TransferReturnItemID", OleDbType.VarChar)
                    objParam.Value = dtTransferReturnItem.Rows(i).Item("TransferReturnItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@TransferReturnID", OleDbType.VarChar)
                    objParam2.Value = dtTransferReturnItem.Rows(i).Item("TransferReturnID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtTransferReturnItem.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam4.Value = dtTransferReturnItem.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@OriginalPriceCarat", OleDbType.Numeric)
                    objParam5.Value = dtTransferReturnItem.Rows(i).Item("OriginalPriceCarat")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PriceCode", OleDbType.VarChar)
                    objParam8.Value = dtTransferReturnItem.Rows(i).Item("PriceCode")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam9.Value = dtTransferReturnItem.Rows(i).Item("FixPrice")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertTransferReturnDiamondItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertForSale(ByVal dtForSale As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtForSaleGemsItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtForSale.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ForSale (ForSaleID,ItemCode,ItemNameID,Length,GoldQualityID,ItemCategoryID,GivenDate,GoldTK,GoldTG,GemsTK,GemsTG,WasteTK,WasteTG,ItemTK,ItemTG,TotalTK,TotalTG,IsExit,LastModifiedLoginUserName,LastModifiedDate,Width,IsFixPrice,FixPrice,DesignCharges,PlatingCharges,MountingCharges,WhiteCharges,IsOriginalFixedPrice,OriginalFixedPrice,IsOriginalPriceGram,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,OriginalOtherPrice,Photo,SellingPrice,LocationID, IsClosed, IsOrder, IsVolume, QTY, StaffID, LossQTY, LossItemTK, LossItemTG,TotalGemPrice, PurchaseWasteTK, PurchaseWasteTG,OrderReceiveDetailID, GoldSmith, Remark,IsDiamond,OriginalCode,PriceCode,Color,IsDelete,IsSync,SupplierID,SupplierVou,GoldSmithID,ExitDate,WReturnDate,IsSolidVolume,SellingRate,IsCheck,WSFixPrice,Shape,Clarity,OriginalPriceCarat,SDYOrCOrG,IsOriginalPriceCarat,SDGemsTW,IsLooseDiamond,SDGemsCategoryID,SDGemsName,TotalCost)"
                    strCommandText += " Values (@ForSaleID,@ItemCode,@ItemNameID,@Length,@GoldQualityID,@ItemCategoryID,@GivenDate,@GoldTK,@GoldTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@ItemTK,@ItemTG,@TotalTK,@TotalTG,@IsExit,@LastModifiedLoginUserName,@LastModifiedDate,@Width,@IsFixPrice,@FixPrice,@DesignCharges,@PlatingCharges,@MountingCharges,@WhiteCharges,@IsOriginalFixedPrice,@OriginalFixedPrice,@IsOriginalPriceGram,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@OriginalOtherPrice,@Photo,@SellingPrice, @LocationID, @IsClosed, @IsOrder, @IsVolume, @QTY, @StaffID, @LossQTY, @LossItemTK, @LossItemTG,@TotalGemPrice, @PurchaseWasteTK, @PurchaseWasteTG, @OrderReceiveDetailID, @GoldSmith, @Remark,@IsDiamond,@OriginalCode,@PriceCode,@Color,@IsDelete,@IsSync,@SupplierID,@SupplierVou,@GoldSmithID,@ExitDate,@WReturnDate,@IsSolidVolume,@SellingRate,@IsCheck,@WSFixPrice,@Shape,@Clarity,@OriginalPriceCarat,@SDYOrCOrG,@IsOriginalPriceCarat,@SDGemsTW,@IsLooseDiamond,@SDGemsCategoryID,@SDGemsName,@TotalCost)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam.Value = dtForSale.Rows(i).Item("ForSaleID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam2.Value = dtForSale.Rows(i).Item("ItemCode")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam3.Value = dtForSale.Rows(i).Item("ItemNameID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@Length", OleDbType.VarChar)
                    objParam4.Value = dtForSale.Rows(i).Item("Length")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam5.Value = dtForSale.Rows(i).Item("GoldQualityID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam6.Value = dtForSale.Rows(i).Item("ItemCategoryID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@GivenDate", OleDbType.Date)
                    objParam7.Value = dtForSale.Rows(i).Item("GivenDate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam8.Value = dtForSale.Rows(i).Item("GoldTK")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam9.Value = dtForSale.Rows(i).Item("GoldTG")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam10.Value = dtForSale.Rows(i).Item("GemsTK")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam11.Value = dtForSale.Rows(i).Item("GemsTG")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam12.Value = dtForSale.Rows(i).Item("WasteTK")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam13.Value = dtForSale.Rows(i).Item("WasteTG")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam14.Value = dtForSale.Rows(i).Item("ItemTK")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam15.Value = dtForSale.Rows(i).Item("ItemTG")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@TotalTK", OleDbType.Decimal)
                    objParam16.Value = dtForSale.Rows(i).Item("TotalTK")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@TotalTG", OleDbType.Decimal)
                    objParam17.Value = dtForSale.Rows(i).Item("TotalTG")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@IsExit", OleDbType.Boolean)
                    objParam18.Value = dtForSale.Rows(i).Item("IsExit")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam19.Value = dtForSale.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam20.Value = dtForSale.Rows(i).Item("LastModifiedDate")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@Width", OleDbType.VarChar)
                    objParam21.Value = dtForSale.Rows(i).Item("Width")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@IsFixPrice", OleDbType.Boolean)
                    objParam22.Value = dtForSale.Rows(i).Item("IsFixPrice")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam23.Value = dtForSale.Rows(i).Item("FixPrice")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                    objParam24.Value = dtForSale.Rows(i).Item("DesignCharges")
                    Dim objParam25 As OleDbParameter = Command.Parameters.Add("@PlatingCharges", OleDbType.Numeric)
                    objParam25.Value = dtForSale.Rows(i).Item("PlatingCharges")
                    Dim objParam26 As OleDbParameter = Command.Parameters.Add("@MountingCharges", OleDbType.Numeric)
                    objParam26.Value = dtForSale.Rows(i).Item("MountingCharges")
                    Dim objParam27 As OleDbParameter = Command.Parameters.Add("@WhiteCharges", OleDbType.Numeric)
                    objParam27.Value = dtForSale.Rows(i).Item("WhiteCharges")
                    Dim objParam28 As OleDbParameter = Command.Parameters.Add("@IsOriginalFixedPrice", OleDbType.Boolean)
                    objParam28.Value = dtForSale.Rows(i).Item("IsOriginalFixedPrice")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam29.Value = dtForSale.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@IsOriginalPriceGram", OleDbType.Boolean)
                    objParam30.Value = dtForSale.Rows(i).Item("IsOriginalPriceGram")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@OriginalPriceGram", OleDbType.Numeric)
                    objParam31.Value = dtForSale.Rows(i).Item("OriginalPriceGram")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@OriginalPriceTK", OleDbType.Numeric)
                    objParam32.Value = dtForSale.Rows(i).Item("OriginalPriceTK")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@OriginalGemsPrice", OleDbType.Numeric)
                    objParam33.Value = dtForSale.Rows(i).Item("OriginalGemsPrice")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@OriginalOtherPrice", OleDbType.Numeric)
                    objParam34.Value = dtForSale.Rows(i).Item("OriginalOtherPrice")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@Photo", OleDbType.VarChar)
                    objParam35.Value = dtForSale.Rows(i).Item("Photo")
                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@SellingPrice", OleDbType.VarChar)
                    objParam36.Value = dtForSale.Rows(i).Item("SellingPrice")
                    Dim objParam37 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam37.Value = dtForSale.Rows(i).Item("LocationID")
                    Dim objParam38 As OleDbParameter = Command.Parameters.Add("@IsClosed", OleDbType.Boolean)
                    objParam38.Value = dtForSale.Rows(i).Item("IsClosed")
                    Dim objParam39 As OleDbParameter = Command.Parameters.Add("@IsOrder", OleDbType.Boolean)
                    objParam39.Value = dtForSale.Rows(i).Item("IsOrder")
                    Dim objParam40 As OleDbParameter = Command.Parameters.Add("@IsVolume", OleDbType.Boolean)
                    objParam40.Value = dtForSale.Rows(i).Item("IsVolume")
                    Dim objParam41 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam41.Value = dtForSale.Rows(i).Item("QTY")
                    Dim objParam42 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam42.Value = dtForSale.Rows(i).Item("StaffID")
                    Dim objParam43 As OleDbParameter = Command.Parameters.Add("@LossQTY", OleDbType.Numeric)
                    objParam43.Value = dtForSale.Rows(i).Item("LossQTY")
                    Dim objParam44 As OleDbParameter = Command.Parameters.Add("@LossItemTK", OleDbType.Decimal)
                    objParam44.Value = dtForSale.Rows(i).Item("LossItemTK")
                    Dim objParam45 As OleDbParameter = Command.Parameters.Add("@LossItemTG", OleDbType.Decimal)
                    objParam45.Value = dtForSale.Rows(i).Item("LossItemTG")
                    Dim objParam46 As OleDbParameter = Command.Parameters.Add("@TotalGemPrice", OleDbType.Numeric)
                    objParam46.Value = dtForSale.Rows(i).Item("TotalGemPrice")
                    Dim objParam47 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTK", OleDbType.Decimal)
                    objParam47.Value = dtForSale.Rows(i).Item("PurchaseWasteTK")
                    Dim objParam48 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTG", OleDbType.Decimal)
                    objParam48.Value = dtForSale.Rows(i).Item("PurchaseWasteTG")
                    Dim objParam49 As OleDbParameter = Command.Parameters.Add("@OrderReceiveDetailID", OleDbType.VarChar)
                    objParam49.Value = dtForSale.Rows(i).Item("OrderReceiveDetailID")
                    Dim objParam50 As OleDbParameter = Command.Parameters.Add("@GoldSmith", OleDbType.VarChar)
                    objParam50.Value = dtForSale.Rows(i).Item("GoldSmith")
                    Dim objParam51 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam51.Value = dtForSale.Rows(i).Item("Remark")
                    Dim objParam52 As OleDbParameter = Command.Parameters.Add("@IsDiamond", OleDbType.Boolean)
                    objParam52.Value = dtForSale.Rows(i).Item("IsDiamond")
                    Dim objParam53 As OleDbParameter = Command.Parameters.Add("@OriginalCode", OleDbType.VarChar)
                    objParam53.Value = dtForSale.Rows(i).Item("OriginalCode")
                    Dim objParam54 As OleDbParameter = Command.Parameters.Add("@PriceCode", OleDbType.VarChar)
                    objParam54.Value = dtForSale.Rows(i).Item("PriceCode")
                    Dim objParam55 As OleDbParameter = Command.Parameters.Add("@Color", OleDbType.VarChar)
                    objParam55.Value = dtForSale.Rows(i).Item("Color")
                    Dim objParam56 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam56.Value = dtForSale.Rows(i).Item("IsDelete")
                    Dim objParam57 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam57.Value = dtForSale.Rows(i).Item("IsSync")
                    Dim objParam58 As OleDbParameter = Command.Parameters.Add("@SupplierID", OleDbType.VarChar)
                    objParam58.Value = dtForSale.Rows(i).Item("SupplierID")
                    Dim objParam59 As OleDbParameter = Command.Parameters.Add("@SupplierVou", OleDbType.VarChar)
                    objParam59.Value = dtForSale.Rows(i).Item("SupplierVou")
                    Dim objParam60 As OleDbParameter = Command.Parameters.Add("@GoldSmithID", OleDbType.VarChar)
                    objParam60.Value = dtForSale.Rows(i).Item("GoldSmithID")
                    Dim objParam61 As OleDbParameter = Command.Parameters.Add("@ExitDate", OleDbType.Date)
                    objParam61.Value = dtForSale.Rows(i).Item("ExitDate")
                    Dim objParam62 As OleDbParameter = Command.Parameters.Add("@WReturnDate", OleDbType.Date)
                    objParam62.Value = dtForSale.Rows(i).Item("WReturnDate")
                    Dim objParam63 As OleDbParameter = Command.Parameters.Add("@IsSolidVolume", OleDbType.Boolean)
                    objParam63.Value = dtForSale.Rows(i).Item("IsSolidVolume")
                    Dim objParam64 As OleDbParameter = Command.Parameters.Add("@SellingRate", OleDbType.Numeric)
                    objParam64.Value = dtForSale.Rows(i).Item("SellingRate")
                    Dim objParam130 As OleDbParameter = Command.Parameters.Add("@IsCheck", OleDbType.Boolean)
                    objParam130.Value = dtForSale.Rows(i).Item("IsCheck")
                    Dim objParam131 As OleDbParameter = Command.Parameters.Add("@WSFixPrice", OleDbType.Numeric)
                    objParam131.Value = dtForSale.Rows(i).Item("WSFixPrice")
                    Dim objParam132 As OleDbParameter = Command.Parameters.Add("@Shape", OleDbType.VarChar)
                    objParam132.Value = dtForSale.Rows(i).Item("Shape")
                    Dim objParam133 As OleDbParameter = Command.Parameters.Add("@Clarity", OleDbType.VarChar)
                    objParam133.Value = dtForSale.Rows(i).Item("Clarity")
                    Dim objParam134 As OleDbParameter = Command.Parameters.Add("@OriginalPriceCarat", OleDbType.Numeric)
                    objParam134.Value = dtForSale.Rows(i).Item("OriginalPriceCarat")
                    Dim objParam135 As OleDbParameter = Command.Parameters.Add("@SDYOrCOrG", OleDbType.VarChar)
                    objParam135.Value = dtForSale.Rows(i).Item("SDYOrCOrG")
                    Dim objParam136 As OleDbParameter = Command.Parameters.Add("@IsOriginalPriceCarat", OleDbType.Boolean)
                    objParam136.Value = dtForSale.Rows(i).Item("IsOriginalPriceCarat")
                    Dim objParam137 As OleDbParameter = Command.Parameters.Add("@SDGemsTW", OleDbType.Decimal)
                    objParam137.Value = dtForSale.Rows(i).Item("SDGemsTW")
                    Dim objParam138 As OleDbParameter = Command.Parameters.Add("@IsLooseDiamond", OleDbType.Boolean)
                    objParam138.Value = dtForSale.Rows(i).Item("IsLooseDiamond")
                    Dim objParam139 As OleDbParameter = Command.Parameters.Add("@SDGemsCategoryID", OleDbType.VarChar)
                    objParam139.Value = dtForSale.Rows(i).Item("SDGemsCategoryID")
                    Dim objParam140 As OleDbParameter = Command.Parameters.Add("@SDGemsName", OleDbType.VarChar)
                    objParam140.Value = dtForSale.Rows(i).Item("SDGemsName")
                    Dim objParam141 As OleDbParameter = Command.Parameters.Add("@TotalCost", OleDbType.Numeric)
                    objParam141.Value = dtForSale.Rows(i).Item("TotalCost")
                    Command.ExecuteNonQuery()

                    'ischeck
                    'For j As Integer = 0 To dtForSale.Rows.Count - 1
                    '    Dim Strcri As String = ""

                    '    If Strcri = "" Then
                    '        Strcri = " Where ForSaleID in ( '" & dtForSale.Rows(i).Item("ForSaleID") & "'" & ")"
                    '    Else
                    '        Strcri += ",'" & dtForSale.Rows(i).Item("ForSaleID") & "'" & ")"
                    '    End If
                    '    dtForSaleGemsItem = GetForSaleGemsItem(Strcri)
                    'Next

                    'If dtForSaleGemsItem.Rows.Count > 0 Then

                    '    InsertForSaleGemsItem(dtForSaleGemsItem, DatabasePath)
                    'End If

                    If i = dtForSale.Rows.Count - 1 Then
                        i = dtForSale.Rows.Count - 1

                        strCommandText = "Insert into tbl_ForSale (ForSaleID,ItemCode,ItemNameID,Length,GoldQualityID,ItemCategoryID,GivenDate,GoldTK,GoldTG,GemsTK,GemsTG,WasteTK,WasteTG,ItemTK,ItemTG,TotalTK,TotalTG,IsExit,LastModifiedLoginUserName,LastModifiedDate,Width,IsFixPrice,FixPrice,DesignCharges,PlatingCharges,MountingCharges,WhiteCharges,IsOriginalFixedPrice,OriginalFixedPrice,IsOriginalPriceGram,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,OriginalOtherPrice,Photo,SellingPrice,LocationID, IsClosed, IsOrder, IsVolume, QTY, StaffID, LossQTY, LossItemTK, LossItemTG,TotalGemPrice, PurchaseWasteTK, PurchaseWasteTG,OrderReceiveDetailID, GoldSmith, Remark,IsDiamond,OriginalCode,PriceCode,Color,IsDelete,IsSync,SupplierID,SupplierVou,GoldSmithID,ExitDate,WReturnDate,IsSolidVolume,SellingRate,IsCheck,WSFixPrice,Shape,Clarity,OriginalPriceCarat,SDYOrCOrG,IsOriginalPriceCarat,SDGemsTW,IsLooseDiamond,SDGemsCategoryID,SDGemsName,TotalCost)"
                        strCommandText += " Values (@ForSaleID,@ItemCode,@ItemNameID,@Length,@GoldQualityID,@ItemCategoryID,@GivenDate,@GoldTK,@GoldTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@ItemTK,@ItemTG,@TotalTK,@TotalTG,@IsExit,@LastModifiedLoginUserName,@LastModifiedDate,@Width,@IsFixPrice,@FixPrice,@DesignCharges,@PlatingCharges,@MountingCharges,@WhiteCharges,@IsOriginalFixedPrice,@OriginalFixedPrice,@IsOriginalPriceGram,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@OriginalOtherPrice,@Photo,@SellingPrice, @LocationID, @IsClosed, @IsOrder, @IsVolume, @QTY, @StaffID, @LossQTY, @LossItemTK, @LossItemTG,@TotalGemPrice, @PurchaseWasteTK, @PurchaseWasteTG, @OrderReceiveDetailID, @GoldSmith, @Remark,@IsDiamond,@OriginalCode,@PriceCode,@Color,@IsDelete,@IsSync,@SupplierID,@SupplierVou,@GoldSmithID,@ExitDate,@WReturnDate,@IsSolidVolume,@SellingRate,@IsCheck,@WSFixPrice,@Shape,@Clarity,@OriginalPriceCarat,@SDYOrCOrG,@IsOriginalPriceCarat,@SDGemsTW,@IsLooseDiamond,@SDGemsCategoryID,@SDGemsName,@TotalCost)"

                        Command = New OleDbCommand(strCommandText, Connstr)
                        Dim objParam65 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                        objParam65.Value = dtForSale.Rows(i).Item("ForSaleID")

                        Dim objParam66 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                        objParam66.Value = dtForSale.Rows(i).Item("ItemCode")
                        Dim objParam67 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                        objParam67.Value = dtForSale.Rows(i).Item("ItemNameID")
                        Dim objParam68 As OleDbParameter = Command.Parameters.Add("@Length", OleDbType.VarChar)
                        objParam68.Value = dtForSale.Rows(i).Item("Length")
                        Dim objParam69 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                        objParam69.Value = dtForSale.Rows(i).Item("GoldQualityID")
                        Dim objParam70 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                        objParam70.Value = dtForSale.Rows(i).Item("ItemCategoryID")
                        Dim objParam71 As OleDbParameter = Command.Parameters.Add("@GivenDate", OleDbType.Date)
                        objParam71.Value = dtForSale.Rows(i).Item("GivenDate")
                        Dim objParam72 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                        objParam72.Value = dtForSale.Rows(i).Item("GoldTK")
                        Dim objParam73 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                        objParam73.Value = dtForSale.Rows(i).Item("GoldTG")
                        Dim objParam74 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                        objParam74.Value = dtForSale.Rows(i).Item("GemsTK")
                        Dim objParam75 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                        objParam75.Value = dtForSale.Rows(i).Item("GemsTG")
                        Dim objParam76 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                        objParam76.Value = dtForSale.Rows(i).Item("WasteTK")
                        Dim objParam77 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                        objParam77.Value = dtForSale.Rows(i).Item("WasteTG")
                        Dim objParam78 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                        objParam78.Value = dtForSale.Rows(i).Item("ItemTK")
                        Dim objParam79 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                        objParam79.Value = dtForSale.Rows(i).Item("ItemTG")
                        Dim objParam80 As OleDbParameter = Command.Parameters.Add("@TotalTK", OleDbType.Decimal)
                        objParam80.Value = dtForSale.Rows(i).Item("TotalTK")
                        Dim objParam81 As OleDbParameter = Command.Parameters.Add("@TotalTG", OleDbType.Decimal)
                        objParam81.Value = dtForSale.Rows(i).Item("TotalTG")
                        Dim objParam82 As OleDbParameter = Command.Parameters.Add("@IsExit", OleDbType.Boolean)
                        objParam82.Value = dtForSale.Rows(i).Item("IsExit")
                        Dim objParam83 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                        objParam83.Value = dtForSale.Rows(i).Item("LastModifiedLoginUserName")
                        Dim objParam84 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                        objParam84.Value = dtForSale.Rows(i).Item("LastModifiedDate")
                        Dim objParam85 As OleDbParameter = Command.Parameters.Add("@Width", OleDbType.VarChar)
                        objParam85.Value = dtForSale.Rows(i).Item("Width")
                        Dim objParam86 As OleDbParameter = Command.Parameters.Add("@IsFixPrice", OleDbType.Boolean)
                        objParam86.Value = dtForSale.Rows(i).Item("IsFixPrice")
                        Dim objParam87 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                        objParam87.Value = dtForSale.Rows(i).Item("FixPrice")
                        Dim objParam88 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                        objParam88.Value = dtForSale.Rows(i).Item("DesignCharges")
                        Dim objParam89 As OleDbParameter = Command.Parameters.Add("@PlatingCharges", OleDbType.Numeric)
                        objParam89.Value = dtForSale.Rows(i).Item("PlatingCharges")
                        Dim objParam90 As OleDbParameter = Command.Parameters.Add("@MountingCharges", OleDbType.Numeric)
                        objParam90.Value = dtForSale.Rows(i).Item("MountingCharges")
                        Dim objParam91 As OleDbParameter = Command.Parameters.Add("@WhiteCharges", OleDbType.Numeric)
                        objParam91.Value = dtForSale.Rows(i).Item("WhiteCharges")
                        Dim objParam92 As OleDbParameter = Command.Parameters.Add("@IsOriginalFixedPrice", OleDbType.Boolean)
                        objParam92.Value = dtForSale.Rows(i).Item("IsOriginalFixedPrice")
                        Dim objParam93 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                        objParam93.Value = dtForSale.Rows(i).Item("OriginalFixedPrice")
                        Dim objParam94 As OleDbParameter = Command.Parameters.Add("@IsOriginalPriceGram", OleDbType.Boolean)
                        objParam94.Value = dtForSale.Rows(i).Item("IsOriginalPriceGram")
                        Dim objParam95 As OleDbParameter = Command.Parameters.Add("@OriginalPriceGram", OleDbType.Numeric)
                        objParam95.Value = dtForSale.Rows(i).Item("OriginalPriceGram")
                        Dim objParam96 As OleDbParameter = Command.Parameters.Add("@OriginalPriceTK", OleDbType.Numeric)
                        objParam96.Value = dtForSale.Rows(i).Item("OriginalPriceTK")
                        Dim objParam97 As OleDbParameter = Command.Parameters.Add("@OriginalGemsPrice", OleDbType.Numeric)
                        objParam97.Value = dtForSale.Rows(i).Item("OriginalGemsPrice")
                        Dim objParam98 As OleDbParameter = Command.Parameters.Add("@OriginalOtherPrice", OleDbType.Numeric)
                        objParam98.Value = dtForSale.Rows(i).Item("OriginalOtherPrice")
                        Dim objParam99 As OleDbParameter = Command.Parameters.Add("@Photo", OleDbType.VarChar)
                        objParam99.Value = dtForSale.Rows(i).Item("Photo")
                        Dim objParam100 As OleDbParameter = Command.Parameters.Add("@SellingPrice", OleDbType.VarChar)
                        objParam100.Value = dtForSale.Rows(i).Item("SellingPrice")
                        Dim objParam101 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                        objParam101.Value = dtForSale.Rows(i).Item("LocationID")
                        Dim objParam102 As OleDbParameter = Command.Parameters.Add("@IsClosed", OleDbType.Boolean)
                        objParam102.Value = dtForSale.Rows(i).Item("IsClosed")
                        Dim objParam103 As OleDbParameter = Command.Parameters.Add("@IsOrder", OleDbType.Boolean)
                        objParam103.Value = dtForSale.Rows(i).Item("IsOrder")
                        Dim objParam104 As OleDbParameter = Command.Parameters.Add("@IsVolume", OleDbType.Boolean)
                        objParam104.Value = dtForSale.Rows(i).Item("IsVolume")
                        Dim objParam105 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                        objParam105.Value = dtForSale.Rows(i).Item("QTY")
                        Dim objParam106 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                        objParam106.Value = dtForSale.Rows(i).Item("StaffID")
                        Dim objParam107 As OleDbParameter = Command.Parameters.Add("@LossQTY", OleDbType.Numeric)
                        objParam107.Value = dtForSale.Rows(i).Item("LossQTY")
                        Dim objParam108 As OleDbParameter = Command.Parameters.Add("@LossItemTK", OleDbType.Decimal)
                        objParam108.Value = dtForSale.Rows(i).Item("LossItemTK")
                        Dim objParam109 As OleDbParameter = Command.Parameters.Add("@LossItemTG", OleDbType.Decimal)
                        objParam109.Value = dtForSale.Rows(i).Item("LossItemTG")
                        Dim objParam110 As OleDbParameter = Command.Parameters.Add("@TotalGemPrice", OleDbType.Numeric)
                        objParam110.Value = dtForSale.Rows(i).Item("TotalGemPrice")
                        Dim objParam111 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTK", OleDbType.Decimal)
                        objParam111.Value = dtForSale.Rows(i).Item("PurchaseWasteTK")
                        Dim objParam112 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTG", OleDbType.Decimal)
                        objParam112.Value = dtForSale.Rows(i).Item("PurchaseWasteTG")
                        Dim objParam113 As OleDbParameter = Command.Parameters.Add("@OrderReceiveDetailID", OleDbType.VarChar)
                        objParam113.Value = dtForSale.Rows(i).Item("OrderReceiveDetailID")
                        Dim objParam114 As OleDbParameter = Command.Parameters.Add("@GoldSmith", OleDbType.VarChar)
                        objParam114.Value = dtForSale.Rows(i).Item("GoldSmith")
                        Dim objParam115 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                        objParam115.Value = dtForSale.Rows(i).Item("Remark")
                        Dim objParam116 As OleDbParameter = Command.Parameters.Add("@IsDiamond", OleDbType.Boolean)
                        objParam116.Value = dtForSale.Rows(i).Item("IsDiamond")
                        Dim objParam117 As OleDbParameter = Command.Parameters.Add("@OriginalCode", OleDbType.VarChar)
                        objParam117.Value = dtForSale.Rows(i).Item("OriginalCode")
                        Dim objParam118 As OleDbParameter = Command.Parameters.Add("@PriceCode", OleDbType.VarChar)
                        objParam118.Value = dtForSale.Rows(i).Item("PriceCode")
                        Dim objParam119 As OleDbParameter = Command.Parameters.Add("@Color", OleDbType.VarChar)
                        objParam119.Value = dtForSale.Rows(i).Item("Color")
                        Dim objParam120 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                        objParam120.Value = dtForSale.Rows(i).Item("IsDelete")
                        Dim objParam121 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                        objParam121.Value = dtForSale.Rows(i).Item("IsSync")
                        Dim objParam122 As OleDbParameter = Command.Parameters.Add("@SupplierID", OleDbType.VarChar)
                        objParam122.Value = dtForSale.Rows(i).Item("SupplierID")
                        Dim objParam123 As OleDbParameter = Command.Parameters.Add("@SupplierVou", OleDbType.VarChar)
                        objParam123.Value = dtForSale.Rows(i).Item("SupplierVou")
                        Dim objParam124 As OleDbParameter = Command.Parameters.Add("@GoldSmithID", OleDbType.VarChar)
                        objParam124.Value = dtForSale.Rows(i).Item("GoldSmithID")
                        Dim objParam125 As OleDbParameter = Command.Parameters.Add("@ExitDate", OleDbType.Date)
                        objParam125.Value = dtForSale.Rows(i).Item("ExitDate")
                        Dim objParam126 As OleDbParameter = Command.Parameters.Add("@WReturnDate", OleDbType.Date)
                        objParam126.Value = dtForSale.Rows(i).Item("WReturnDate")
                        Dim objParam127 As OleDbParameter = Command.Parameters.Add("@IsSolidVolume", OleDbType.Boolean)
                        objParam127.Value = dtForSale.Rows(i).Item("IsSolidVolume")
                        Dim objParam128 As OleDbParameter = Command.Parameters.Add("@SellingRate", OleDbType.Numeric)
                        objParam128.Value = dtForSale.Rows(i).Item("SellingRate")
                        Dim objParam129 As OleDbParameter = Command.Parameters.Add("@IsCheck", OleDbType.Boolean)
                        objParam129.Value = dtForSale.Rows(i).Item("IsCheck")
                        Dim objParam191 As OleDbParameter = Command.Parameters.Add("@WSFixPrice", OleDbType.Numeric)
                        objParam191.Value = dtForSale.Rows(i).Item("WSFixPrice")
                        Dim objParam142 As OleDbParameter = Command.Parameters.Add("@Shape", OleDbType.VarChar)
                        objParam142.Value = dtForSale.Rows(i).Item("Shape")
                        Dim objParam143 As OleDbParameter = Command.Parameters.Add("@Clarity", OleDbType.VarChar)
                        objParam143.Value = dtForSale.Rows(i).Item("Clarity")
                        Dim objParam144 As OleDbParameter = Command.Parameters.Add("@OriginalPriceCarat", OleDbType.Numeric)
                        objParam144.Value = dtForSale.Rows(i).Item("OriginalPriceCarat")
                        Dim objParam145 As OleDbParameter = Command.Parameters.Add("@SDYOrCOrG", OleDbType.VarChar)
                        objParam145.Value = dtForSale.Rows(i).Item("SDYOrCOrG")
                        Dim objParam146 As OleDbParameter = Command.Parameters.Add("@IsOriginalPriceCarat", OleDbType.Boolean)
                        objParam146.Value = dtForSale.Rows(i).Item("IsOriginalPriceCarat")
                        Dim objParam147 As OleDbParameter = Command.Parameters.Add("@SDGemsTW", OleDbType.Decimal)
                        objParam147.Value = dtForSale.Rows(i).Item("SDGemsTW")
                        Dim objParam148 As OleDbParameter = Command.Parameters.Add("@IsLooseDiamond", OleDbType.Boolean)
                        objParam148.Value = dtForSale.Rows(i).Item("IsLooseDiamond")
                        Dim objParam149 As OleDbParameter = Command.Parameters.Add("@SDGemsCategoryID", OleDbType.VarChar)
                        objParam149.Value = dtForSale.Rows(i).Item("SDGemsCategoryID")
                        Dim objParam150 As OleDbParameter = Command.Parameters.Add("@SDGemsName", OleDbType.VarChar)
                        objParam150.Value = dtForSale.Rows(i).Item("SDGemsName")
                        Dim objParam151 As OleDbParameter = Command.Parameters.Add("@TotalCost", OleDbType.Numeric)
                        objParam151.Value = dtForSale.Rows(i).Item("TotalCost")
                        Command.ExecuteNonQuery()
                        'For j As Integer = 0 To dtForSale.Rows.Count - 1
                        '    Dim Strcri As String = ""

                        '    If Strcri = "" Then
                        '        Strcri = " Where ForSaleID in ( '" & dtForSale.Rows(i).Item("ForSaleID") & "'" & ")"
                        '    Else
                        '        Strcri += ",'" & dtForSale.Rows(i).Item("ForSaleID") & "'" & ")"
                        '    End If
                        '    dtForSaleGemsItem = GetForSaleGemsItem(Strcri)
                        'Next

                        'If dtForSaleGemsItem.Rows.Count > 0 Then

                        '    InsertForSaleGemsItem(dtForSaleGemsItem, DatabasePath)
                        'End If

                    End If



                Catch ex As Exception
                    WriteEventlogs("InsertForSale: " & ex.Message)
                End Try
            Next


            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertForSaleGemsItem(ByVal dtForSaleGemsItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtForSaleGemsItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ForSaleGemsItem ( ForSaleGemsItemID,ForSaleID,GemsCategoryID,GemsName,GemsTK,GemsTG,YOrCOrG,GemsTW,Qty,Type,UnitPrice,Amount,GemsRemark)"
                    strCommandText += " Values (@ForSaleGemsItemID,@ForSaleID,@GemsCategoryID,@GemsName,@GemsTK,@GemsTG,@YOrCOrG,@GemsTW,@Qty,@Type,@UnitPrice,@Amount,@GemsRemark)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ForSaleGemsItemID", OleDbType.VarChar)
                    objParam.Value = dtForSaleGemsItem.Rows(i).Item("ForSaleGemsItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam2.Value = dtForSaleGemsItem.Rows(i).Item("ForSaleID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtForSaleGemsItem.Rows(i).Item("GemsCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam4.Value = dtForSaleGemsItem.Rows(i).Item("GemsName")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam5.Value = dtForSaleGemsItem.Rows(i).Item("GemsTK")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam6.Value = dtForSaleGemsItem.Rows(i).Item("GemsTG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam7.Value = dtForSaleGemsItem.Rows(i).Item("YOrCOrG")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTW", OleDbType.Decimal)
                    objParam8.Value = dtForSaleGemsItem.Rows(i).Item("GemsTW")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam9.Value = dtForSaleGemsItem.Rows(i).Item("Qty")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@Type", OleDbType.VarChar)
                    objParam10.Value = dtForSaleGemsItem.Rows(i).Item("Type")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.Numeric)
                    objParam11.Value = dtForSaleGemsItem.Rows(i).Item("UnitPrice")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam12.Value = dtForSaleGemsItem.Rows(i).Item("Amount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@GemsRemark", OleDbType.VarChar)
                    objParam13.Value = dtForSaleGemsItem.Rows(i).Item("GemsRemark")

                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertForSaleGemsItem: " & ex.Message)
                End Try
            Next



            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertSaleInvoice(ByVal dtSaleInvoice As DataTable, ByVal DatabasePath As String)
            '  Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            'Dim Command As OleDbCommand
            'Connstr.Close()
            ' Connstr.Open()
            Dim dtSaleInvoiceDetail As New DataTable

            For i As Integer = 0 To dtSaleInvoice.Rows.Count - 1
                Try
                    Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
                    Dim Command As OleDbCommand
                    Connstr.Open()

                    strCommandText = "INSERT INTO tbl_SaleInvoiceHeader(SaleInvoiceHeaderID, StaffID, SaleDate, CustomerID, TotalAmount, AddOrSub, DiscountAmount, PaidAmount, Remark, PromotionDiscount,  LastModifiedLoginUserName,LastModifiedDate, LocationID, PurchaseHeaderID, PurchaseAmount, IsAdvance, EntryAdvanceDate, AllAdvanceAmount, IsCancel, CancelDate, IsOtherCash, OtherCashAmount, IsUpload,IsSync, IsDelete,AllTaxAmt,SRTaxPer,SRTaxAmt,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " VALUES(@SaleInvoiceHeaderID, @StaffID, @SaleDate, @CustomerID, @TotalAmount, @AddOrSub, @DiscountAmount,@PaidAmount,@Remark, @PromotionDiscount, @LastModifiedLoginUserName,@LastModifiedDate, @LocationID, @PurchaseHeaderID, @PurchaseAmount, @IsAdvance, @EntryAdvanceDate, @AllAdvanceAmount, @IsCancel, @CancelDate, @IsOtherCash, @OtherCashAmount,@IsUpload,@IsSync,@IsDelete,@AllTaxAmt,@SRTaxPer, @SRTaxAmt,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SaleInvoiceHeaderID", OleDbType.VarChar)
                    objParam.Value = dtSaleInvoice.Rows(i).Item("SaleInvoiceHeaderID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam2.Value = dtSaleInvoice.Rows(i).Item("StaffID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@SaleDate", OleDbType.Date)
                    objParam3.Value = dtSaleInvoice.Rows(i).Item("SaleDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam4.Value = dtSaleInvoice.Rows(i).Item("CustomerID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam5.Value = dtSaleInvoice.Rows(i).Item("TotalAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam6.Value = dtSaleInvoice.Rows(i).Item("AddOrSub")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@DiscountAmount", OleDbType.Numeric)
                    objParam7.Value = dtSaleInvoice.Rows(i).Item("DiscountAmount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam8.Value = dtSaleInvoice.Rows(i).Item("PaidAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam9.Value = dtSaleInvoice.Rows(i).Item("Remark")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PromotionDiscount", OleDbType.Numeric)
                    objParam10.Value = dtSaleInvoice.Rows(i).Item("PromotionDiscount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam11.Value = dtSaleInvoice.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam12.Value = dtSaleInvoice.Rows(i).Item("LastModifiedDate")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam13.Value = dtSaleInvoice.Rows(i).Item("LocationID")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam14.Value = dtSaleInvoice.Rows(i).Item("PurchaseHeaderID")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@PurchaseAmount", OleDbType.Numeric)
                    objParam15.Value = dtSaleInvoice.Rows(i).Item("PurchaseAmount")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsAdvance", OleDbType.Boolean)
                    objParam16.Value = dtSaleInvoice.Rows(i).Item("IsAdvance")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@EntryAdvanceDate", OleDbType.Date)
                    objParam17.Value = dtSaleInvoice.Rows(i).Item("EntryAdvanceDate")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@AllAdvanceAmount", OleDbType.Numeric)
                    objParam18.Value = dtSaleInvoice.Rows(i).Item("AllAdvanceAmount")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@IsCancel", OleDbType.Boolean)
                    objParam19.Value = dtSaleInvoice.Rows(i).Item("IsCancel")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@CancelDate", OleDbType.Date)
                    objParam20.Value = dtSaleInvoice.Rows(i).Item("CancelDate")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@IsOtherCash", OleDbType.Boolean)
                    objParam21.Value = dtSaleInvoice.Rows(i).Item("IsOtherCash")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@OtherCashAmount", OleDbType.Numeric)
                    objParam22.Value = dtSaleInvoice.Rows(i).Item("OtherCashAmount")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam23.Value = dtSaleInvoice.Rows(i).Item("IsUpload")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam24.Value = dtSaleInvoice.Rows(i).Item("IsSync")
                    Dim objParam25 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam25.Value = dtSaleInvoice.Rows(i).Item("IsDelete")
                    Dim objParam26 As OleDbParameter = Command.Parameters.Add("@AllTaxAmt", OleDbType.Numeric)
                    objParam26.Value = dtSaleInvoice.Rows(i).Item("AllTaxAmt")
                    Dim objParam27 As OleDbParameter = Command.Parameters.Add("@SRTaxPer", OleDbType.Decimal)
                    objParam27.Value = dtSaleInvoice.Rows(i).Item("SRTaxPer")
                    Dim objParam28 As OleDbParameter = Command.Parameters.Add("@SRTaxAmt", OleDbType.Numeric)
                    objParam28.Value = dtSaleInvoice.Rows(i).Item("SRTaxAmt")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@MemberID", OleDbType.VarChar)
                    objParam29.Value = dtSaleInvoice.Rows(i).Item("MemberID")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@MemberName", OleDbType.VarChar)
                    objParam30.Value = dtSaleInvoice.Rows(i).Item("MemberName")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@MemberCode", OleDbType.VarChar)
                    objParam31.Value = dtSaleInvoice.Rows(i).Item("MemberCode")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@RedeemID", OleDbType.VarChar)
                    objParam32.Value = dtSaleInvoice.Rows(i).Item("RedeemID")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@TopupPoint", OleDbType.Numeric)
                    objParam33.Value = dtSaleInvoice.Rows(i).Item("TopupPoint")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@TopupValue", OleDbType.Numeric)
                    objParam34.Value = dtSaleInvoice.Rows(i).Item("TopupValue")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@RedeemPoint", OleDbType.Numeric)
                    objParam35.Value = dtSaleInvoice.Rows(i).Item("RedeemPoint")
                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@RedeemValue", OleDbType.Numeric)
                    objParam36.Value = dtSaleInvoice.Rows(i).Item("RedeemValue")
                    Dim objParam37 As OleDbParameter = Command.Parameters.Add("@IsRedeemInvoice", OleDbType.Boolean)
                    objParam37.Value = dtSaleInvoice.Rows(i).Item("IsRedeemInvoice")
                    Dim objParam38 As OleDbParameter = Command.Parameters.Add("@MemberDis", OleDbType.Numeric)
                    objParam38.Value = dtSaleInvoice.Rows(i).Item("MemberDis")
                    Dim objParam39 As OleDbParameter = Command.Parameters.Add("@MemberDiscountAmt", OleDbType.Numeric)
                    objParam39.Value = dtSaleInvoice.Rows(i).Item("MemberDiscountAmt")
                    Dim objParam40 As OleDbParameter = Command.Parameters.Add("@TransactionID", OleDbType.VarChar)
                    objParam40.Value = dtSaleInvoice.Rows(i).Item("TransactionID")
                    Dim objParam41 As OleDbParameter = Command.Parameters.Add("@InvoiceStatus", OleDbType.Numeric)
                    objParam41.Value = dtSaleInvoice.Rows(i).Item("InvoiceStatus")
                    Command.ExecuteNonQuery()
                    Connstr.Close()
                    dtSaleInvoiceDetail = GetSaleInvoiceDetail(dtSaleInvoice.Rows(i).Item("SaleInvoiceHeaderID"))
                    If dtSaleInvoiceDetail.Rows.Count > 0 Then
                        InsertSaleInvoiceDetail(dtSaleInvoiceDetail, DatabasePath)
                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertSaleInvoice: " & ex.Message)
                End Try
            Next
            '  Connstr.Close()
        End Sub
        Private Sub InsertSaleInvoiceDetail(ByVal dtSaleInvoiceDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtSaleInvoiceGemsItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSaleInvoiceDetail.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_SaleInvoiceDetail ( SaleInvoiceDetailID, SaleInvoiceHeaderID, ForSaleID, ItemCode, SalesRate, ItemTK, ItemTG, GemsTK, GemsTG, WasteTK, WasteTG, GoldPrice, GemsPrice, IsFixPrice, TotalAmount, AddOrSub, IsOriginalFixedPrice, OriginalFixedPrice, IsOriginalPriceGram, OriginalPriceGram, OriginalPriceTK, OriginalGemsPrice, OriginalOtherPrice, PurchaseWasteTK, PurchaseWasteTG, IsReturn,ItemTaxPer,ItemTax, IsSaleReturn, WhiteCharges, PlatingCharges, MountingCharges, DesignCharges,DesignChargesRate,SellingRate,SellingAmt)"
                    strCommandText += " VALUES(@SaleInvoiceDetailID, @SaleInvoiceHeaderID, @ForSaleID, @ItemCode, @SalesRate, @ItemTK, @ItemTG, @GemsTK, @GemsTG, @WasteTK, @WasteTG, @GoldPrice, @GemsPrice, @IsFixPrice, @TotalAmount, @AddOrSub, @IsOriginalFixedPrice, @OriginalFixedPrice, @IsOriginalPriceGram, @OriginalPriceGram, @OriginalPriceTK, @OriginalGemsPrice, @OriginalOtherPrice, @PurchaseWasteTK, @PurchaseWasteTG, @IsReturn,@ItemTaxPer,@ItemTax, @IsSaleReturn, @WhiteCharges, @PlatingCharges, @MountingCharges, @DesignCharges,@DesignChargesRate,@SellingRate,@SellingAmt)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SaleInvoiceDetailID", OleDbType.VarChar)
                    objParam.Value = dtSaleInvoiceDetail.Rows(i).Item("SaleInvoiceDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SaleInvoiceHeaderID", OleDbType.VarChar)
                    objParam2.Value = dtSaleInvoiceDetail.Rows(i).Item("SaleInvoiceHeaderID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtSaleInvoiceDetail.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam4.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemCode")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.Numeric)
                    objParam5.Value = dtSaleInvoiceDetail.Rows(i).Item("SalesRate")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam6.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemTK")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam7.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemTG")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam8.Value = dtSaleInvoiceDetail.Rows(i).Item("GemsTK")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam9.Value = dtSaleInvoiceDetail.Rows(i).Item("GemsTG")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam10.Value = dtSaleInvoiceDetail.Rows(i).Item("WasteTK")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam11.Value = dtSaleInvoiceDetail.Rows(i).Item("WasteTG")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam12.Value = dtSaleInvoiceDetail.Rows(i).Item("GoldPrice")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@GemsPrice", OleDbType.Numeric)
                    objParam13.Value = dtSaleInvoiceDetail.Rows(i).Item("GemsPrice")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsFixPrice", OleDbType.Boolean)
                    objParam14.Value = dtSaleInvoiceDetail.Rows(i).Item("IsFixPrice")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam15.Value = dtSaleInvoiceDetail.Rows(i).Item("TotalAmount")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam16.Value = dtSaleInvoiceDetail.Rows(i).Item("AddOrSub")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@IsOriginalFixedPrice", OleDbType.Boolean)
                    objParam17.Value = dtSaleInvoiceDetail.Rows(i).Item("IsOriginalFixedPrice")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam18.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@IsOriginalPriceGram", OleDbType.Boolean)
                    objParam19.Value = dtSaleInvoiceDetail.Rows(i).Item("IsOriginalPriceGram")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@OriginalPriceGram", OleDbType.Numeric)
                    objParam20.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalPriceGram")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@OriginalPriceTK", OleDbType.Numeric)
                    objParam21.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalPriceTK")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@OriginalGemsPrice", OleDbType.Numeric)
                    objParam22.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalGemsPrice")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@OriginalOtherPrice", OleDbType.Numeric)
                    objParam23.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalOtherPrice")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTK", OleDbType.Decimal)
                    objParam24.Value = dtSaleInvoiceDetail.Rows(i).Item("PurchaseWasteTK")
                    Dim objParam25 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTG", OleDbType.Decimal)
                    objParam25.Value = dtSaleInvoiceDetail.Rows(i).Item("PurchaseWasteTG")
                    Dim objParam26 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam26.Value = dtSaleInvoiceDetail.Rows(i).Item("IsReturn")
                    Dim objParam27 As OleDbParameter = Command.Parameters.Add("@ItemTaxPer", OleDbType.Decimal)
                    objParam27.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemTaxPer")
                    Dim objParam28 As OleDbParameter = Command.Parameters.Add("@ItemTax", OleDbType.Numeric)
                    objParam28.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemTax")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@IsSaleReturn", OleDbType.Boolean)
                    objParam29.Value = dtSaleInvoiceDetail.Rows(i).Item("IsSaleReturn")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@WhiteCharges", OleDbType.Numeric)
                    objParam30.Value = dtSaleInvoiceDetail.Rows(i).Item("WhiteCharges")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@PlatingCharges", OleDbType.Numeric)
                    objParam31.Value = dtSaleInvoiceDetail.Rows(i).Item("PlatingCharges")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@MountingCharges", OleDbType.Boolean)
                    objParam32.Value = dtSaleInvoiceDetail.Rows(i).Item("MountingCharges")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                    objParam33.Value = dtSaleInvoiceDetail.Rows(i).Item("DesignCharges")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@DesignChargesRate", OleDbType.Numeric)
                    objParam34.Value = dtSaleInvoiceDetail.Rows(i).Item("DesignChargesRate")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@SellingRate", OleDbType.Numeric)
                    objParam35.Value = dtSaleInvoiceDetail.Rows(i).Item("SellingRate")
                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@SellingAmt", OleDbType.Numeric)
                    objParam36.Value = dtSaleInvoiceDetail.Rows(i).Item("SellingAmt")

                    Command.ExecuteNonQuery()

                    dtSaleInvoiceGemsItem = GetSaleInvoiceGemsItem(dtSaleInvoiceDetail.Rows(i).Item("SaleInvoiceDetailID"))

                    If dtSaleInvoiceGemsItem.Rows.Count > 0 Then
                        InsertSaleInvoiceGemsItem(dtSaleInvoiceGemsItem, DatabasePath)

                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertSaleInvoiceDetailItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertSaleLooseDiamond(ByVal dtSaleInvoice As DataTable, ByVal DatabasePath As String)
            '  Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            'Dim Command As OleDbCommand
            'Connstr.Close()
            ' Connstr.Open()
            Dim dtSaleInvoiceDetail As New DataTable

            For i As Integer = 0 To dtSaleInvoice.Rows.Count - 1
                Try
                    Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
                    Dim Command As OleDbCommand
                    Connstr.Open()

                    strCommandText = "INSERT INTO tbl_SaleLooseDiamondHeader(SaleLooseDiamondID,SaleDate,CustomerID,StaffID,Remark,TotalAmount,AddOrSub,DiscountAmount,PaidAmount,PromotionDiscount,LocationID,LastModifiedLoginUserName,LastModifiedDate,PurchaseHeaderID,PurchaseAmount,IsOtherCash,OtherCashAmount,IsDelete,IsUpload,AllTaxAmt,SRTaxPer,SRTaxAmt,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " VALUES(@SaleLooseDiamondID,@SaleDate,@CustomerID,@StaffID,@Remark,@TotalAmount,@AddOrSub,@DiscountAmount,@PaidAmount,@PromotionDiscount,@LocationID,@LastModifiedLoginUserName,@LastModifiedDate,@PurchaseHeaderID,@PurchaseAmount,@IsOtherCash,@OtherCashAmount,@IsDelete,@IsUpload,@AllTaxAmt,@SRTaxPer,@SRTaxAmt,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SaleLooseDiamondID", OleDbType.VarChar)
                    objParam.Value = dtSaleInvoice.Rows(i).Item("SaleLooseDiamondID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SaleDate", OleDbType.Date)
                    objParam2.Value = dtSaleInvoice.Rows(i).Item("SaleDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam3.Value = dtSaleInvoice.Rows(i).Item("CustomerID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtSaleInvoice.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtSaleInvoice.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam6.Value = dtSaleInvoice.Rows(i).Item("TotalAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam7.Value = dtSaleInvoice.Rows(i).Item("AddOrSub")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@DiscountAmount", OleDbType.Numeric)
                    objParam8.Value = dtSaleInvoice.Rows(i).Item("DiscountAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam9.Value = dtSaleInvoice.Rows(i).Item("PaidAmount")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PromotionDiscount", OleDbType.Numeric)
                    objParam10.Value = dtSaleInvoice.Rows(i).Item("PromotionDiscount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam11.Value = dtSaleInvoice.Rows(i).Item("LocationID")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam12.Value = dtSaleInvoice.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam13.Value = dtSaleInvoice.Rows(i).Item("LastModifiedDate")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam14.Value = dtSaleInvoice.Rows(i).Item("PurchaseHeaderID")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@PurchaseAmount", OleDbType.Numeric)
                    objParam15.Value = dtSaleInvoice.Rows(i).Item("PurchaseAmount")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsOtherCash", OleDbType.Boolean)
                    objParam16.Value = dtSaleInvoice.Rows(i).Item("IsOtherCash")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@OtherCashAmount", OleDbType.Numeric)
                    objParam17.Value = dtSaleInvoice.Rows(i).Item("OtherCashAmount")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam18.Value = dtSaleInvoice.Rows(i).Item("IsDelete")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam19.Value = dtSaleInvoice.Rows(i).Item("IsUpload")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@AllTaxAmt", OleDbType.Numeric)
                    objParam20.Value = dtSaleInvoice.Rows(i).Item("AllTaxAmt")
                    Dim objParam27 As OleDbParameter = Command.Parameters.Add("@SRTaxPer", OleDbType.Decimal)
                    objParam27.Value = dtSaleInvoice.Rows(i).Item("SRTaxPer")
                    Dim objParam28 As OleDbParameter = Command.Parameters.Add("@SRTaxAmt", OleDbType.Numeric)
                    objParam28.Value = dtSaleInvoice.Rows(i).Item("SRTaxAmt")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@MemberID", OleDbType.VarChar)
                    objParam29.Value = dtSaleInvoice.Rows(i).Item("MemberID")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@MemberName", OleDbType.VarChar)
                    objParam30.Value = dtSaleInvoice.Rows(i).Item("MemberName")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@MemberCode", OleDbType.VarChar)
                    objParam31.Value = dtSaleInvoice.Rows(i).Item("MemberCode")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@RedeemID", OleDbType.VarChar)
                    objParam32.Value = dtSaleInvoice.Rows(i).Item("RedeemID")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@TopupPoint", OleDbType.Numeric)
                    objParam33.Value = dtSaleInvoice.Rows(i).Item("TopupPoint")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@TopupValue", OleDbType.Numeric)
                    objParam34.Value = dtSaleInvoice.Rows(i).Item("TopupValue")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@RedeemPoint", OleDbType.Numeric)
                    objParam35.Value = dtSaleInvoice.Rows(i).Item("RedeemPoint")
                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@RedeemValue", OleDbType.Numeric)
                    objParam36.Value = dtSaleInvoice.Rows(i).Item("RedeemValue")
                    Dim objParam37 As OleDbParameter = Command.Parameters.Add("@IsRedeemInvoice", OleDbType.Boolean)
                    objParam37.Value = dtSaleInvoice.Rows(i).Item("IsRedeemInvoice")
                    Dim objParam38 As OleDbParameter = Command.Parameters.Add("@MemberDis", OleDbType.Numeric)
                    objParam38.Value = dtSaleInvoice.Rows(i).Item("MemberDis")
                    Dim objParam39 As OleDbParameter = Command.Parameters.Add("@MemberDiscountAmt", OleDbType.Numeric)
                    objParam39.Value = dtSaleInvoice.Rows(i).Item("MemberDiscountAmt")
                    Dim objParam40 As OleDbParameter = Command.Parameters.Add("@TransactionID", OleDbType.VarChar)
                    objParam40.Value = dtSaleInvoice.Rows(i).Item("TransactionID")
                    Dim objParam41 As OleDbParameter = Command.Parameters.Add("@InvoiceStatus", OleDbType.Numeric)
                    objParam41.Value = dtSaleInvoice.Rows(i).Item("InvoiceStatus")
                    Command.ExecuteNonQuery()
                    Connstr.Close()
                    dtSaleInvoiceDetail = GetSaleLooseDiamondDetail(dtSaleInvoice.Rows(i).Item("SaleLooseDiamondID"))
                    If dtSaleInvoiceDetail.Rows.Count > 0 Then
                        InsertSaleLooseDiamondDetail(dtSaleInvoiceDetail, DatabasePath)
                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertSaleLooseDiamond: " & ex.Message)
                End Try
            Next
            '  Connstr.Close()
        End Sub
        Private Sub InsertSaleLooseDiamondDetail(ByVal dtSaleInvoiceDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            'Dim dtSaleInvoiceGemsItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSaleInvoiceDetail.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_SaleLooseDiamondDetail ( SaleLooseDiamondDetailID,SaleLooseDiamondID,ForSaleID,ItemCode,GemsCategoryID,Shape,Clarity,Color,GemsName,SalesRate,QTY,ItemTK,ItemTG,GemsTW,YOrCOrG,IsFixPrice,FixPrice,GemsPrice,TotalAmount,AddOrSub,DesignCharges,DesignChargesRate,WhiteCharges,PlatingCharges,MountingCharges,IsSaleReturn,SellingRate,SellingAmt,IsOriginalFixedPrice,OriginalFixedPrice,IsOriginalPriceCarat,OriginalPriceCarat,OriginalCode,IsReturn)"
                    strCommandText += " VALUES(@SaleLooseDiamondDetailID,@SaleLooseDiamondID,@ForSaleID,@ItemCode,@GemsCategoryID,@Shape,@Clarity,@Color,@GemsName,@SalesRate,@QTY,@ItemTK,@ItemTG,@GemsTW,@YOrCOrG,@IsFixPrice,@FixPrice,@GemsPrice,@TotalAmount,@AddOrSub,@DesignCharges,@DesignChargesRate,@WhiteCharges,@PlatingCharges,@MountingCharges,@IsSaleReturn,@SellingRate,@SellingAmt,@IsOriginalFixedPrice,@OriginalFixedPrice,@IsOriginalPriceCarat,@OriginalPriceCarat,@OriginalCode,@IsReturn)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SaleLooseDiamondDetailID", OleDbType.VarChar)
                    objParam.Value = dtSaleInvoiceDetail.Rows(i).Item("SaleLooseDiamondDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SaleLooseDiamondID", OleDbType.VarChar)
                    objParam2.Value = dtSaleInvoiceDetail.Rows(i).Item("SaleLooseDiamondID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtSaleInvoiceDetail.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam4.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemCode")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam5.Value = dtSaleInvoiceDetail.Rows(i).Item("GemsCategoryID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Shape", OleDbType.VarChar)
                    objParam6.Value = dtSaleInvoiceDetail.Rows(i).Item("Shape")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Clarity", OleDbType.VarChar)
                    objParam7.Value = dtSaleInvoiceDetail.Rows(i).Item("Clarity")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@Color", OleDbType.VarChar)
                    objParam8.Value = dtSaleInvoiceDetail.Rows(i).Item("Color")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam9.Value = dtSaleInvoiceDetail.Rows(i).Item("GemsName")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.Numeric)
                    objParam10.Value = dtSaleInvoiceDetail.Rows(i).Item("SalesRate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam11.Value = dtSaleInvoiceDetail.Rows(i).Item("QTY")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam12.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemTK")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam13.Value = dtSaleInvoiceDetail.Rows(i).Item("ItemTG")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@GemsTW", OleDbType.Decimal)
                    objParam14.Value = dtSaleInvoiceDetail.Rows(i).Item("GemsTW")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam15.Value = dtSaleInvoiceDetail.Rows(i).Item("YOrCOrG")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsFixPrice", OleDbType.Boolean)
                    objParam16.Value = dtSaleInvoiceDetail.Rows(i).Item("IsFixPrice")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam17.Value = dtSaleInvoiceDetail.Rows(i).Item("FixPrice")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@GemsPrice", OleDbType.Numeric)
                    objParam18.Value = dtSaleInvoiceDetail.Rows(i).Item("GemsPrice")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam19.Value = dtSaleInvoiceDetail.Rows(i).Item("TotalAmount")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam20.Value = dtSaleInvoiceDetail.Rows(i).Item("AddOrSub")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                    objParam21.Value = dtSaleInvoiceDetail.Rows(i).Item("DesignCharges")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@DesignChargesRate", OleDbType.Numeric)
                    objParam22.Value = dtSaleInvoiceDetail.Rows(i).Item("DesignChargesRate")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@WhiteCharges", OleDbType.Numeric)
                    objParam23.Value = dtSaleInvoiceDetail.Rows(i).Item("WhiteCharges")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@PlatingCharges", OleDbType.Numeric)
                    objParam24.Value = dtSaleInvoiceDetail.Rows(i).Item("PlatingCharges")
                    Dim objParam25 As OleDbParameter = Command.Parameters.Add("@MountingCharges", OleDbType.Numeric)
                    objParam25.Value = dtSaleInvoiceDetail.Rows(i).Item("MountingCharges")
                    Dim objParam26 As OleDbParameter = Command.Parameters.Add("@IsSaleReturn", OleDbType.Boolean)
                    objParam26.Value = dtSaleInvoiceDetail.Rows(i).Item("IsSaleReturn")
                    Dim objParam27 As OleDbParameter = Command.Parameters.Add("@SellingRate", OleDbType.Numeric)
                    objParam27.Value = dtSaleInvoiceDetail.Rows(i).Item("SellingRate")
                    Dim objParam28 As OleDbParameter = Command.Parameters.Add("@SellingAmt", OleDbType.Numeric)
                    objParam28.Value = dtSaleInvoiceDetail.Rows(i).Item("SellingAmt")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@IsOriginalFixedPrice", OleDbType.Boolean)
                    objParam29.Value = dtSaleInvoiceDetail.Rows(i).Item("IsOriginalFixedPrice")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam30.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@IsOriginalPriceCarat", OleDbType.Boolean)
                    objParam31.Value = dtSaleInvoiceDetail.Rows(i).Item("IsOriginalPriceCarat")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@OriginalPriceCarat", OleDbType.Numeric)
                    objParam32.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalPriceCarat")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@OriginalCode", OleDbType.VarChar)
                    objParam33.Value = dtSaleInvoiceDetail.Rows(i).Item("OriginalCode")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam34.Value = dtSaleInvoiceDetail.Rows(i).Item("IsReturn")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertSaleLooseDiamondDetailItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertMortgagePaybackItem(ByVal dtMortgagePaybackItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtSaleInvoiceDetail As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtMortgagePaybackItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_MortgagePaybackItem( MortgagePaybackItemID,MortgagePaybackID,MortgageItemID,GoldQualityID,ItemcategoryID,ItemName,GoldTK,GoldTG,Amount,MortgageRate,IsDone,DonePercent)"
                    strCommandText += " Values (@MortgagePaybackItemID,@MortgagePaybackID,@MortgageItemID,@GoldQualityID,@ItemcategoryID,@ItemName,@GoldTK,@GoldTG, @Amount,@MortgageRate, @IsDone,@DonePercent)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@MortgagePaybackItemID", OleDbType.VarChar)
                    objParam.Value = dtMortgagePaybackItem.Rows(i).Item("MortgagePaybackItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@MortgagePaybackID", OleDbType.VarChar)
                    objParam2.Value = dtMortgagePaybackItem.Rows(i).Item("MortgagePaybackID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@MortgageItemID", OleDbType.VarChar)
                    objParam3.Value = dtMortgagePaybackItem.Rows(i).Item("MortgageItemID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam4.Value = dtMortgagePaybackItem.Rows(i).Item("GoldQualityID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ItemcategoryID", OleDbType.VarChar)
                    objParam5.Value = dtMortgagePaybackItem.Rows(i).Item("ItemcategoryID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemName", OleDbType.VarChar)
                    objParam6.Value = dtMortgagePaybackItem.Rows(i).Item("ItemName")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam7.Value = dtMortgagePaybackItem.Rows(i).Item("GoldTK")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam8.Value = dtMortgagePaybackItem.Rows(i).Item("GoldTG")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam9.Value = dtMortgagePaybackItem.Rows(i).Item("Amount")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@MortgageRate", OleDbType.Numeric)
                    objParam10.Value = dtMortgagePaybackItem.Rows(i).Item("MortgageRate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@IsDone", OleDbType.Boolean)
                    objParam11.Value = dtMortgagePaybackItem.Rows(i).Item("IsDone")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@DonePercent", OleDbType.VarChar)
                    objParam12.Value = dtMortgagePaybackItem.Rows(i).Item("DonePercent")
                    Command.ExecuteNonQuery()

                    

                Catch ex As Exception
                    WriteEventlogs("InsertMortgagePaybackItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub


        Private Sub InsertSaleInvoiceGemsItem(ByVal dtSaleInvoiceGemsItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSaleInvoiceGemsItem.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_SalesInvoiceGemItem ( SalesInvoiceGemItemID, SaleInvoiceDetailID, GemsCategoryID, GemsName, GemsTK, GemsTG, YOrCOrG, GemsTW, Qty, Type, UnitPrice, Amount, GemsRemark,GemTaxPer,GemTax)"
                    strCommandText += " VALUES(@SalesInvoiceGemItemID, @SaleInvoiceDetailID, @GemsCategoryID, @GemsName, @GemsTK, @GemsTG, @YOrCOrG, @GemsTW, @Qty, @Type, @UnitPrice, @Amount, @GemsRemark,@GemTaxPer,@GemTax)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SalesInvoiceGemItemID", OleDbType.VarChar)
                    objParam.Value = dtSaleInvoiceGemsItem.Rows(i).Item("SalesInvoiceGemItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SaleInvoiceDetailID", OleDbType.VarChar)
                    objParam2.Value = dtSaleInvoiceGemsItem.Rows(i).Item("SaleInvoiceDetailID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemsCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam4.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemsName")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam5.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemsTK")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam6.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemsTG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam7.Value = dtSaleInvoiceGemsItem.Rows(i).Item("YOrCOrG")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTW", OleDbType.Decimal)
                    objParam8.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemsTW")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam9.Value = dtSaleInvoiceGemsItem.Rows(i).Item("Qty")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@Type", OleDbType.VarChar)
                    objParam10.Value = dtSaleInvoiceGemsItem.Rows(i).Item("Type")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.Numeric)
                    objParam11.Value = dtSaleInvoiceGemsItem.Rows(i).Item("UnitPrice")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam12.Value = dtSaleInvoiceGemsItem.Rows(i).Item("Amount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@GemsRemark", OleDbType.VarChar)
                    objParam13.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemsRemark")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@GemTaxPer", OleDbType.Decimal)
                    objParam14.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemTaxPer")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@GemTax", OleDbType.Numeric)
                    objParam15.Value = dtSaleInvoiceGemsItem.Rows(i).Item("GemTax")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertSaleInvoiceGemsItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertWholeSaleReturn(ByVal dtWholeSaleReturn As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtWholeSaleReturnItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtWholeSaleReturn.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_WholesaleReturn ( WholesaleReturnID,WReturnDate,WholeSaleInvoiceID,ConsignmentSaleID,StaffID,CustomerID,Remark,SaleAmount,SaleReturnAmount,TotalAmount,AddOrSub,PaidAmount,Discount,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsUpload,IsDelete)"
                    strCommandText += " Values (@WholesaleReturnID,@WReturnDate,@WholeSaleInvoiceID,@ConsignmentSaleID,@StaffID,@CustomerID,@Remark,@SaleAmount,@SaleReturnAmount,@TotalAmount,@AddOrSub,@PaidAmount,@Discount,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsUpload,@IsDelete)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@WholesaleReturnID", OleDbType.VarChar)
                    objParam.Value = dtWholeSaleReturn.Rows(i).Item("WholesaleReturnID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@WReturnDate", OleDbType.Date)
                    objParam2.Value = dtWholeSaleReturn.Rows(i).Item("WReturnDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@WholeSaleInvoiceID", OleDbType.VarChar)
                    objParam3.Value = dtWholeSaleReturn.Rows(i).Item("WholeSaleInvoiceID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ConsignmentSaleID", OleDbType.VarChar)
                    objParam4.Value = dtWholeSaleReturn.Rows(i).Item("ConsignmentSaleID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam5.Value = dtWholeSaleReturn.Rows(i).Item("StaffID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam6.Value = dtWholeSaleReturn.Rows(i).Item("CustomerID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam7.Value = dtWholeSaleReturn.Rows(i).Item("Remark")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@SaleAmount", OleDbType.Numeric)
                    objParam8.Value = dtWholeSaleReturn.Rows(i).Item("SaleAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@SaleReturnAmount", OleDbType.Numeric)
                    objParam9.Value = dtWholeSaleReturn.Rows(i).Item("SaleReturnAmount")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam10.Value = dtWholeSaleReturn.Rows(i).Item("TotalAmount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam11.Value = dtWholeSaleReturn.Rows(i).Item("AddOrSub")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam12.Value = dtWholeSaleReturn.Rows(i).Item("PaidAmount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@Discount", OleDbType.Numeric)
                    objParam13.Value = dtWholeSaleReturn.Rows(i).Item("Discount")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam14.Value = dtWholeSaleReturn.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam15.Value = dtWholeSaleReturn.Rows(i).Item("LastModifiedDate")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam16.Value = dtWholeSaleReturn.Rows(i).Item("LocationID")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam17.Value = dtWholeSaleReturn.Rows(i).Item("IsUpload")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam18.Value = dtWholeSaleReturn.Rows(i).Item("IsDelete")
                    Command.ExecuteNonQuery()

                    dtWholeSaleReturnItem = GetWholeSaleReturnItem(dtWholeSaleReturn.Rows(i).Item("WholeSaleReturnID"))
                    If dtWholeSaleReturnItem.Rows.Count > 0 Then
                        InsertWholeSaleReturnItem(dtWholeSaleReturnItem, DatabasePath)

                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertWholeSaleReturn: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertWholeSaleReturnItem(ByVal dtWholeSaleReturnItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtWholeSaleReturnItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_WholesaleReturnItem ( WholesaleReturnItemID,WholesaleReturnID,ForSaleID,ItemNameID,GoldQualityID,ItemCode,IsReturn,IsSale,SalesRate,ItemTG,ItemTK,GoldTG,GoldTK,GemsTG,GemsTK,WasteTG,WasteTK,GoldPrice,FixPrice)"
                    strCommandText += " Values (@WholesaleReturnItemID,@WholesaleReturnID,@ForSaleID,@ItemNameID,@GoldQualityID,@ItemCode,@IsReturn,@IsSale,@SalesRate,@ItemTG,@ItemTK,@GoldTG,@GoldTK,@GemsTG,@GemsTK,@WasteTG,@WasteTK,@GoldPrice,@FixPrice)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@WholesaleReturnItemID", OleDbType.VarChar)
                    objParam.Value = dtWholeSaleReturnItem.Rows(i).Item("WholesaleReturnItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@WholesaleReturnID", OleDbType.VarChar)
                    objParam2.Value = dtWholeSaleReturnItem.Rows(i).Item("WholesaleReturnID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtWholeSaleReturnItem.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam4.Value = dtWholeSaleReturnItem.Rows(i).Item("ItemNameID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam5.Value = dtWholeSaleReturnItem.Rows(i).Item("GoldQualityID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam6.Value = dtWholeSaleReturnItem.Rows(i).Item("ItemCode")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam7.Value = dtWholeSaleReturnItem.Rows(i).Item("IsReturn")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsSale", OleDbType.Boolean)
                    objParam8.Value = dtWholeSaleReturnItem.Rows(i).Item("IsSale")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.Numeric)
                    objParam9.Value = dtWholeSaleReturnItem.Rows(i).Item("SalesRate")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam10.Value = dtWholeSaleReturnItem.Rows(i).Item("ItemTG")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam11.Value = dtWholeSaleReturnItem.Rows(i).Item("ItemTK")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam12.Value = dtWholeSaleReturnItem.Rows(i).Item("GoldTG")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam13.Value = dtWholeSaleReturnItem.Rows(i).Item("GoldTK")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam14.Value = dtWholeSaleReturnItem.Rows(i).Item("GemsTG")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam15.Value = dtWholeSaleReturnItem.Rows(i).Item("GemsTK")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam16.Value = dtWholeSaleReturnItem.Rows(i).Item("WasteTG")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam17.Value = dtWholeSaleReturnItem.Rows(i).Item("WasteTK")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam18.Value = dtWholeSaleReturnItem.Rows(i).Item("GoldPrice")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.VarChar)
                    objParam19.Value = dtWholeSaleReturnItem.Rows(i).Item("FixPrice")
                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertWholeSaleReturnItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertWholeSaleInvoice(ByVal dtWholeSaleInvoice As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtWholeSaleInvoiceItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtWholeSaleInvoice.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_WholesaleInvoice ( WholesaleInvoiceID,WDate,StaffID,CustomerID,NetAmount,AddOrSub,Discount,PaidAmount,DueDate,PayType,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsUpload,IsDelete,JC_IsUpload,Remark,TotalDesignCharges,DisPercent,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " Values (@WholesaleInvoiceID,@WDate,@StaffID,@CustomerID,@NetAmount,@AddOrSub,@Discount,@PaidAmount,@DueDate,@PayType,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsUpload,@IsDelete,@JC_IsUpload,@Remark,@TotalDesignCharges,@DisPercent,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@WholesaleInvoiceID", OleDbType.VarChar)
                    objParam.Value = dtWholeSaleInvoice.Rows(i).Item("WholesaleInvoiceID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@WDate", OleDbType.Date)
                    objParam2.Value = dtWholeSaleInvoice.Rows(i).Item("WDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam3.Value = dtWholeSaleInvoice.Rows(i).Item("StaffID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam4.Value = dtWholeSaleInvoice.Rows(i).Item("CustomerID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@NetAmount", OleDbType.Numeric)
                    objParam5.Value = dtWholeSaleInvoice.Rows(i).Item("NetAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam6.Value = dtWholeSaleInvoice.Rows(i).Item("AddOrSub")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Discount", OleDbType.Numeric)
                    objParam7.Value = dtWholeSaleInvoice.Rows(i).Item("Discount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam8.Value = dtWholeSaleInvoice.Rows(i).Item("PaidAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@DueDate", OleDbType.Date)
                    objParam9.Value = dtWholeSaleInvoice.Rows(i).Item("DueDate")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PayType", OleDbType.Numeric)
                    objParam10.Value = dtWholeSaleInvoice.Rows(i).Item("PayType")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam11.Value = dtWholeSaleInvoice.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam12.Value = dtWholeSaleInvoice.Rows(i).Item("LastModifiedDate")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam13.Value = dtWholeSaleInvoice.Rows(i).Item("LocationID")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam14.Value = dtWholeSaleInvoice.Rows(i).Item("IsUpload")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam15.Value = dtWholeSaleInvoice.Rows(i).Item("IsDelete")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@JC_IsUpload", OleDbType.Boolean)
                    objParam16.Value = dtWholeSaleInvoice.Rows(i).Item("JC_IsUpload")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam17.Value = dtWholeSaleInvoice.Rows(i).Item("Remark")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@TotalDesignCharges", OleDbType.Numeric)
                    objParam18.Value = dtWholeSaleInvoice.Rows(i).Item("TotalDesignCharges")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@DisPercent", OleDbType.Numeric)
                    objParam19.Value = dtWholeSaleInvoice.Rows(i).Item("DisPercent")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@MemberID", OleDbType.VarChar)
                    objParam29.Value = dtWholeSaleInvoice.Rows(i).Item("MemberID")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@MemberName", OleDbType.VarChar)
                    objParam30.Value = dtWholeSaleInvoice.Rows(i).Item("MemberName")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@MemberCode", OleDbType.VarChar)
                    objParam31.Value = dtWholeSaleInvoice.Rows(i).Item("MemberCode")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@RedeemID", OleDbType.VarChar)
                    objParam32.Value = dtWholeSaleInvoice.Rows(i).Item("RedeemID")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@TopupPoint", OleDbType.Numeric)
                    objParam33.Value = dtWholeSaleInvoice.Rows(i).Item("TopupPoint")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@TopupValue", OleDbType.Numeric)
                    objParam34.Value = dtWholeSaleInvoice.Rows(i).Item("TopupValue")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@RedeemPoint", OleDbType.Numeric)
                    objParam35.Value = dtWholeSaleInvoice.Rows(i).Item("RedeemPoint")
                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@RedeemValue", OleDbType.Numeric)
                    objParam36.Value = dtWholeSaleInvoice.Rows(i).Item("RedeemValue")
                    Dim objParam37 As OleDbParameter = Command.Parameters.Add("@IsRedeemInvoice", OleDbType.Boolean)
                    objParam37.Value = dtWholeSaleInvoice.Rows(i).Item("IsRedeemInvoice")
                    Dim objParam38 As OleDbParameter = Command.Parameters.Add("@MemberDis", OleDbType.Numeric)
                    objParam38.Value = dtWholeSaleInvoice.Rows(i).Item("MemberDis")
                    Dim objParam39 As OleDbParameter = Command.Parameters.Add("@MemberDiscountAmt", OleDbType.Numeric)
                    objParam39.Value = dtWholeSaleInvoice.Rows(i).Item("MemberDiscountAmt")
                    Dim objParam40 As OleDbParameter = Command.Parameters.Add("@TransactionID", OleDbType.VarChar)
                    objParam40.Value = dtWholeSaleInvoice.Rows(i).Item("TransactionID")
                    Dim objParam41 As OleDbParameter = Command.Parameters.Add("@InvoiceStatus", OleDbType.Numeric)
                    objParam41.Value = dtWholeSaleInvoice.Rows(i).Item("InvoiceStatus")
                    Command.ExecuteNonQuery()

                    dtWholeSaleInvoiceItem = GetWholeSaleInvoiceItem(dtWholeSaleInvoice.Rows(i).Item("WholeSaleInvoiceID"))
                    If dtWholeSaleInvoiceItem.Rows.Count > 0 Then
                        InsertWholeSaleInvoiceItem(dtWholeSaleInvoiceItem, DatabasePath)

                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertWholeSaleInvoice: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertWholeSaleInvoiceItem(ByVal dtWholeSaleInvoiceItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtWholeSaleInvoiceItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_WholesaleInvoiceItem ( WholesaleInvoiceItemID,WholesaleInvoiceID,ForSaleID,ItemNameID,GoldQualityID,ItemCode,IsReturn,IsSale,SalesRate,ItemTK,ItemTG,GemsTK,GemsTG,WasteTK,WasteTG,GoldTK,GoldTG,GoldPrice,FixPrice,DesignCharges,DesignChargesRate,ItemDisPercent,ItemDisAmount,GemsPrice)"
                    strCommandText += " Values (@WholesaleInvoiceItemID,@WholesaleInvoiceID,@ForSaleID,@ItemNameID,@GoldQualityID,@ItemCode,@IsReturn,@IsSale,@SalesRate,@ItemTK,@ItemTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@GoldTK,@GoldTG,@GoldPrice,@FixPrice,@DesignCharges,@DesignChargesRate,@ItemDisPercent,@ItemDisAmount,@GemsPrice)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@WholesaleInvoiceItemID", OleDbType.VarChar)
                    objParam.Value = dtWholeSaleInvoiceItem.Rows(i).Item("WholesaleInvoiceItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@WholesaleInvoiceID", OleDbType.VarChar)
                    objParam2.Value = dtWholeSaleInvoiceItem.Rows(i).Item("WholesaleInvoiceID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtWholeSaleInvoiceItem.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam4.Value = dtWholeSaleInvoiceItem.Rows(i).Item("ItemNameID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam5.Value = dtWholeSaleInvoiceItem.Rows(i).Item("GoldQualityID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam6.Value = dtWholeSaleInvoiceItem.Rows(i).Item("ItemCode")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam7.Value = dtWholeSaleInvoiceItem.Rows(i).Item("IsReturn")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsSale", OleDbType.Boolean)
                    objParam8.Value = dtWholeSaleInvoiceItem.Rows(i).Item("IsSale")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.Numeric)
                    objParam9.Value = dtWholeSaleInvoiceItem.Rows(i).Item("SalesRate")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam10.Value = dtWholeSaleInvoiceItem.Rows(i).Item("ItemTK")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam11.Value = dtWholeSaleInvoiceItem.Rows(i).Item("ItemTG")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam12.Value = dtWholeSaleInvoiceItem.Rows(i).Item("GemsTK")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam13.Value = dtWholeSaleInvoiceItem.Rows(i).Item("GemsTG")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam14.Value = dtWholeSaleInvoiceItem.Rows(i).Item("WasteTK")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam15.Value = dtWholeSaleInvoiceItem.Rows(i).Item("WasteTG")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam16.Value = dtWholeSaleInvoiceItem.Rows(i).Item("GoldTK")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam17.Value = dtWholeSaleInvoiceItem.Rows(i).Item("GoldTG")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam18.Value = dtWholeSaleInvoiceItem.Rows(i).Item("GoldPrice")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam19.Value = dtWholeSaleInvoiceItem.Rows(i).Item("FixPrice")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                    objParam20.Value = dtWholeSaleInvoiceItem.Rows(i).Item("DesignCharges")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@DesignChargesRate", OleDbType.Numeric)
                    objParam21.Value = dtWholeSaleInvoiceItem.Rows(i).Item("DesignChargesRate")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@ItemDisPercent", OleDbType.Numeric)
                    objParam22.Value = dtWholeSaleInvoiceItem.Rows(i).Item("ItemDisPercent")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@ItemDisAmount", OleDbType.Numeric)
                    objParam23.Value = dtWholeSaleInvoiceItem.Rows(i).Item("ItemDisAmount")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@GemsPrice", OleDbType.Numeric)
                    objParam24.Value = dtWholeSaleInvoiceItem.Rows(i).Item("GemsPrice")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertWholeSaleInvoiceItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertSaleVolume(ByVal dtSaleVolume As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtSaleVolumeDetail As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSaleVolume.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_SalesVolume(SalesVolumeID, SaleDate, StaffID, CustomerID, Remark, TotalAmount, AddOrSub, DiscountAmount, PromotionDiscount, PaidAmount, LocationID, LastModifiedLoginUserName, LastModifiedDate, PurchaseHeaderID, PurchaseAmount,IsSync,IsDelete,IsSolidVolume,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " VALUES(@SalesVolumeID, @SaleDate, @StaffID, @CustomerID, @Remark, @TotalAmount, @AddOrSub, @DiscountAmount, @PromotionDiscount, @PaidAmount, @LocationID, @LastModifiedLoginUserName, @LastModifiedDate, @PurchaseHeaderID, @PurchaseAmount,@IsSync,@IsDelete,@IsSolidVolume,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SalesVolumeID", OleDbType.VarChar)
                    objParam.Value = dtSaleVolume.Rows(i).Item("SalesVolumeID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SaleDate", OleDbType.Date)
                    objParam2.Value = dtSaleVolume.Rows(i).Item("SaleDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam3.Value = dtSaleVolume.Rows(i).Item("StaffID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam4.Value = dtSaleVolume.Rows(i).Item("CustomerID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtSaleVolume.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam6.Value = dtSaleVolume.Rows(i).Item("TotalAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam7.Value = dtSaleVolume.Rows(i).Item("AddOrSub")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@DiscountAmount", OleDbType.Numeric)
                    objParam8.Value = dtSaleVolume.Rows(i).Item("DiscountAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@PromotionDiscount", OleDbType.Numeric)
                    objParam9.Value = dtSaleVolume.Rows(i).Item("PromotionDiscount")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam10.Value = dtSaleVolume.Rows(i).Item("PaidAmount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam11.Value = dtSaleVolume.Rows(i).Item("LocationID")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam12.Value = dtSaleVolume.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam13.Value = dtSaleVolume.Rows(i).Item("LastModifiedDate")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam14.Value = dtSaleVolume.Rows(i).Item("PurchaseHeaderID")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@PurchaseAmount", OleDbType.VarChar)
                    objParam15.Value = dtSaleVolume.Rows(i).Item("PurchaseAmount")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam16.Value = dtSaleVolume.Rows(i).Item("IsSync")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam17.Value = dtSaleVolume.Rows(i).Item("IsDelete")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@IsSolidVolume", OleDbType.Boolean)
                    objParam18.Value = dtSaleVolume.Rows(i).Item("IsSolidVolume")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@MemberID", OleDbType.VarChar)
                    objParam29.Value = dtSaleVolume.Rows(i).Item("MemberID")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@MemberName", OleDbType.VarChar)
                    objParam30.Value = dtSaleVolume.Rows(i).Item("MemberName")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@MemberCode", OleDbType.VarChar)
                    objParam31.Value = dtSaleVolume.Rows(i).Item("MemberCode")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@RedeemID", OleDbType.VarChar)
                    objParam32.Value = dtSaleVolume.Rows(i).Item("RedeemID")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@TopupPoint", OleDbType.Numeric)
                    objParam33.Value = dtSaleVolume.Rows(i).Item("TopupPoint")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@TopupValue", OleDbType.Numeric)
                    objParam34.Value = dtSaleVolume.Rows(i).Item("TopupValue")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@RedeemPoint", OleDbType.Numeric)
                    objParam35.Value = dtSaleVolume.Rows(i).Item("RedeemPoint")
                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@RedeemValue", OleDbType.Numeric)
                    objParam36.Value = dtSaleVolume.Rows(i).Item("RedeemValue")
                    Dim objParam37 As OleDbParameter = Command.Parameters.Add("@IsRedeemInvoice", OleDbType.Boolean)
                    objParam37.Value = dtSaleVolume.Rows(i).Item("IsRedeemInvoice")
                    Dim objParam38 As OleDbParameter = Command.Parameters.Add("@MemberDis", OleDbType.Numeric)
                    objParam38.Value = dtSaleVolume.Rows(i).Item("MemberDis")
                    Dim objParam39 As OleDbParameter = Command.Parameters.Add("@MemberDiscountAmt", OleDbType.Numeric)
                    objParam39.Value = dtSaleVolume.Rows(i).Item("MemberDiscountAmt")
                    Dim objParam40 As OleDbParameter = Command.Parameters.Add("@TransactionID", OleDbType.VarChar)
                    objParam40.Value = dtSaleVolume.Rows(i).Item("TransactionID")
                    Dim objParam41 As OleDbParameter = Command.Parameters.Add("@InvoiceStatus", OleDbType.Numeric)
                    objParam41.Value = dtSaleVolume.Rows(i).Item("InvoiceStatus")
                    Command.ExecuteNonQuery()

                    dtSaleVolumeDetail = GetSaleVolumeDetail(dtSaleVolume.Rows(i).Item("SalesVolumeID"))
                    If dtSaleVolumeDetail.Rows.Count > 0 Then
                        InsertSaleVolumeDetail(dtSaleVolumeDetail, DatabasePath)

                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertSalesVolume: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertSaleVolumeDetail(ByVal dtSaleVolumeDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSaleVolumeDetail.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_SalesVolumeDetail ( SalesVolumeDetailID, SalesVolumeID, ForSaleID, ItemCode, ItemCategoryID, GoldQualityID, ItemNameID, Length, SalesRate, QTY, ItemTK, ItemTG, WasteTK, WasteTG, IsFixPrice, FixPrice, GoldPrice, TotalAmount, AddOrSub,DesignCharges)"
                    strCommandText += " VALUES(@SalesVolumeDetailID, @SalesVolumeID, @ForSaleID, @ItemCode, @ItemCategoryID, @GoldQualityID, @ItemNameID, @Length, @SalesRate, @QTY, @ItemTK, @ItemTG, @WasteTK, @WasteTG, @IsFixPrice, @FixPrice, @GoldPrice, @TotalAmount, @AddOrSub,@DesignCharges)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SalesVolumeDetailID", OleDbType.VarChar)
                    objParam.Value = dtSaleVolumeDetail.Rows(i).Item("SalesVolumeDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SalesVolumeID", OleDbType.VarChar)
                    objParam2.Value = dtSaleVolumeDetail.Rows(i).Item("SalesVolumeID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtSaleVolumeDetail.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam4.Value = dtSaleVolumeDetail.Rows(i).Item("ItemCode")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam5.Value = dtSaleVolumeDetail.Rows(i).Item("ItemCategoryID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam6.Value = dtSaleVolumeDetail.Rows(i).Item("GoldQualityID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam7.Value = dtSaleVolumeDetail.Rows(i).Item("ItemNameID")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@Length", OleDbType.VarChar)
                    objParam8.Value = dtSaleVolumeDetail.Rows(i).Item("Length")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.Numeric)
                    objParam9.Value = dtSaleVolumeDetail.Rows(i).Item("SalesRate")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam10.Value = dtSaleVolumeDetail.Rows(i).Item("QTY")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam11.Value = dtSaleVolumeDetail.Rows(i).Item("ItemTK")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam12.Value = dtSaleVolumeDetail.Rows(i).Item("ItemTG")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam13.Value = dtSaleVolumeDetail.Rows(i).Item("WasteTK")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam14.Value = dtSaleVolumeDetail.Rows(i).Item("WasteTG")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@IsFixPrice", OleDbType.Boolean)
                    objParam15.Value = dtSaleVolumeDetail.Rows(i).Item("IsFixPrice")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam16.Value = dtSaleVolumeDetail.Rows(i).Item("FixPrice")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam17.Value = dtSaleVolumeDetail.Rows(i).Item("GoldPrice")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam18.Value = dtSaleVolumeDetail.Rows(i).Item("TotalAmount")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam19.Value = dtSaleVolumeDetail.Rows(i).Item("AddOrSub")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                    objParam20.Value = dtSaleVolumeDetail.Rows(i).Item("DesignCharges")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertSaleVolumeDetail: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertSaleGems(ByVal dtSaleGems As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtSaleGemsItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSaleGems.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_SaleGems ( SaleGemsID,SDate,StaffID,CustomerID,TotalAmount,AddOrSub,PaidAmount,DiscountAmount,PromotionDiscount,Remark,LastModifiedLoginUserName,LastModifiedDate,LocationID,PurchaseHeaderID,PurchaseAmount,IsOtherCash,OtherCashAmount,IsDelete,IsSync)"
                    strCommandText += " Values (@SaleGemsID,@SDate,@StaffID,@CustomerID,@TotalAmount,@AddOrSub,@PaidAmount,@DiscountAmount,@PromotionDiscount,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@PurchaseHeaderID,@PurchaseAmount,@IsOtherCash,@OtherCashAmount,@IsDelete,@IsSync)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SaleGemsID", OleDbType.VarChar)
                    objParam.Value = dtSaleGems.Rows(i).Item("SaleGemsID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SDate", OleDbType.Date)
                    objParam2.Value = dtSaleGems.Rows(i).Item("SDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam3.Value = dtSaleGems.Rows(i).Item("StaffID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam4.Value = dtSaleGems.Rows(i).Item("CustomerID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam5.Value = dtSaleGems.Rows(i).Item("TotalAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam6.Value = dtSaleGems.Rows(i).Item("AddOrSub")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam7.Value = dtSaleGems.Rows(i).Item("PaidAmount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@DiscountAmount", OleDbType.Numeric)
                    objParam8.Value = dtSaleGems.Rows(i).Item("DiscountAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@PromotionDiscount", OleDbType.Numeric)
                    objParam9.Value = dtSaleGems.Rows(i).Item("PromotionDiscount")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam10.Value = dtSaleGems.Rows(i).Item("Remark")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam11.Value = dtSaleGems.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam12.Value = dtSaleGems.Rows(i).Item("LastModifiedDate")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam13.Value = dtSaleGems.Rows(i).Item("LocationID")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam14.Value = dtSaleGems.Rows(i).Item("PurchaseHeaderID")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@PurchaseAmount", OleDbType.VarChar)
                    objParam15.Value = dtSaleGems.Rows(i).Item("PurchaseAmount")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsOtherCash", OleDbType.Boolean)
                    objParam16.Value = dtSaleGems.Rows(i).Item("IsOtherCash")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@OtherCashAmount", OleDbType.Numeric)
                    objParam17.Value = dtSaleGems.Rows(i).Item("OtherCashAmount")

                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam18.Value = dtSaleGems.Rows(i).Item("IsDelete")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam19.Value = dtSaleGems.Rows(i).Item("IsSync")

                    Command.ExecuteNonQuery()

                    dtSaleGemsItem = GetSaleGemsItem(dtSaleGems.Rows(i).Item("SaleGemsID"))
                    If dtSaleGemsItem.Rows.Count > 0 Then
                        InsertSaleGemsItem(dtSaleGemsItem, DatabasePath)

                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertSaleGems: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertSaleGemsItem(ByVal dtSaleGemsItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtSaleGemsItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_SaleGemsItem ( SaleGemsItemID,SaleGemsID,GemsCategoryID,GemsName,Clarity,SizeMM,GemsTK,GemsTG,YOrCOrG,GemsTW,Qty,FixType,SaleRate,Amount,IsReturn)"
                    strCommandText += " Values (@SaleGemsItemID,@SaleGemsID,@GemsCategoryID,@GemsName,@Clarity,@SizeMM,@GemsTK,@GemsTG,@YOrCOrG,@GemsTW,@Qty,@FixType,@SaleRate,@Amount,@IsReturn)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@SaleGemsItemID", OleDbType.VarChar)
                    objParam.Value = dtSaleGemsItem.Rows(i).Item("SaleGemsItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@SaleGemsID", OleDbType.VarChar)
                    objParam2.Value = dtSaleGemsItem.Rows(i).Item("SaleGemsID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtSaleGemsItem.Rows(i).Item("GemsCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam4.Value = dtSaleGemsItem.Rows(i).Item("GemsName")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Clarity", OleDbType.VarChar)
                    objParam5.Value = dtSaleGemsItem.Rows(i).Item("Clarity")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@SizeMM", OleDbType.VarChar)
                    objParam6.Value = dtSaleGemsItem.Rows(i).Item("SizeMM")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam7.Value = dtSaleGemsItem.Rows(i).Item("GemsTK")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam8.Value = dtSaleGemsItem.Rows(i).Item("GemsTG")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam9.Value = dtSaleGemsItem.Rows(i).Item("YOrCOrG")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@GemsTW", OleDbType.Decimal)
                    objParam10.Value = dtSaleGemsItem.Rows(i).Item("GemsTW")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam11.Value = dtSaleGemsItem.Rows(i).Item("Qty")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@FixType", OleDbType.Numeric)
                    objParam12.Value = dtSaleGemsItem.Rows(i).Item("FixType")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@SaleRate", OleDbType.Numeric)
                    objParam13.Value = dtSaleGemsItem.Rows(i).Item("SaleRate")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam14.Value = dtSaleGemsItem.Rows(i).Item("Amount")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam15.Value = dtSaleGemsItem.Rows(i).Item("IsReturn")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertSaleGemsItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertReturnAdvance(ByVal dtReturnAdvance As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtReturnAdvanceItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtReturnAdvance.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ReturnAdvance ( ReturnAdvanceID,ReturnAdvanceDate,StaffID,CustomerID,TotalAmount,TotalTG,Discount,NetAmount,Remark,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsDelete,IsSync)"
                    strCommandText += " Values (@ReturnAdvanceID,@ReturnAdvanceDate,@StaffID,@CustomerID,@TotalAmount,@TotalTG,@Discount,@NetAmount,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsDelete,@IsSync)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ReturnAdvanceID", OleDbType.VarChar)
                    objParam.Value = dtReturnAdvance.Rows(i).Item("ReturnAdvanceID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ReturnAdvanceDate", OleDbType.Date)
                    objParam2.Value = dtReturnAdvance.Rows(i).Item("ReturnAdvanceDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam3.Value = dtReturnAdvance.Rows(i).Item("StaffID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam4.Value = dtReturnAdvance.Rows(i).Item("CustomerID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam5.Value = dtReturnAdvance.Rows(i).Item("TotalAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@TotalTG", OleDbType.Numeric)
                    objParam6.Value = dtReturnAdvance.Rows(i).Item("TotalTG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Discount", OleDbType.Numeric)
                    objParam7.Value = dtReturnAdvance.Rows(i).Item("Discount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@NetAmount", OleDbType.Numeric)
                    objParam8.Value = dtReturnAdvance.Rows(i).Item("NetAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam9.Value = dtReturnAdvance.Rows(i).Item("Remark")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam10.Value = dtReturnAdvance.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam11.Value = dtReturnAdvance.Rows(i).Item("LastModifiedDate")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam12.Value = dtReturnAdvance.Rows(i).Item("LocationID")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam13.Value = dtReturnAdvance.Rows(i).Item("IsDelete")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam14.Value = dtReturnAdvance.Rows(i).Item("IsSync")

                    Command.ExecuteNonQuery()

                    dtReturnAdvanceItem = GetReturnAdvanceItem(dtReturnAdvance.Rows(i).Item("ReturnAdvanceID"))
                    If dtReturnAdvanceItem.Rows.Count > 0 Then
                        InsertReturnAdvanceItem(dtReturnAdvanceItem, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertReturnAdvance: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertReturnAdvanceItem(ByVal dtReturnAdvanceItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtReturnAdvanceItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ReturnAdvanceItem ( ReturnAdvanceItemID,ReturnAdvanceID,ItemTG,Qty,SaleRate,Amount,Remark,IsUsed)"
                    strCommandText += " Values (@ReturnAdvanceItemID,@ReturnAdvanceID,@ItemTG,@Qty,@SaleRate,@Amount,@Remark,@IsUsed)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ReturnAdvanceItemID", OleDbType.VarChar)
                    objParam.Value = dtReturnAdvanceItem.Rows(i).Item("ReturnAdvanceItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ReturnAdvanceID", OleDbType.VarChar)
                    objParam2.Value = dtReturnAdvanceItem.Rows(i).Item("ReturnAdvanceID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam3.Value = dtReturnAdvanceItem.Rows(i).Item("ItemTG")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam4.Value = dtReturnAdvanceItem.Rows(i).Item("Qty")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@SaleRate", OleDbType.Numeric)
                    objParam5.Value = dtReturnAdvanceItem.Rows(i).Item("SaleRate")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam6.Value = dtReturnAdvanceItem.Rows(i).Item("Amount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam7.Value = dtReturnAdvanceItem.Rows(i).Item("Remark")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsUsed", OleDbType.Boolean)
                    objParam8.Value = dtReturnAdvanceItem.Rows(i).Item("IsUsed")
                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertReturnAdvanceItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertReturnRepairHeader(ByVal dtReturnRepairHeader As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtReturnRepairItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtReturnRepairHeader.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_ReturnRepairHeader(ReturnRepairID,RepairID,ReturnDate,AllReturnTotalAmount, AllReturnAddOrSub, ReturnDiscountAmount, ReturnPaidAmount, Remark, LastModifiedLoginUserName, LastModifiedDate, AdvanceAmount, BalanceAmount, StaffID,IsDelete,IsSync,LocationID)"
                    strCommandText += " VALUES(@ReturnRepairID,@RepairID,@ReturnDate,@AllReturnTotalAmount,@AllReturnAddOrSub,@ReturnDiscountAmount,@ReturnPaidAmount,@Remark,@LastModifiedLoginUserName, @LastModifiedDate, @AdvanceAmount, @BalanceAmount, @StaffID,@IsDelete,@IsSync,@LocationID)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ReturnRepairID", OleDbType.VarChar)
                    objParam.Value = dtReturnRepairHeader.Rows(i).Item("ReturnRepairID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@RepairID", OleDbType.VarChar)
                    objParam2.Value = dtReturnRepairHeader.Rows(i).Item("RepairID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ReturnDate", OleDbType.Date)
                    objParam3.Value = dtReturnRepairHeader.Rows(i).Item("ReturnDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@AllReturnTotalAmount", OleDbType.Numeric)
                    objParam4.Value = dtReturnRepairHeader.Rows(i).Item("AllReturnTotalAmount")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@AllReturnAddOrSub", OleDbType.Numeric)
                    objParam5.Value = dtReturnRepairHeader.Rows(i).Item("AllReturnAddOrSub")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ReturnDiscountAmount", OleDbType.Numeric)
                    objParam6.Value = dtReturnRepairHeader.Rows(i).Item("ReturnDiscountAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@ReturnPaidAmount", OleDbType.Numeric)
                    objParam7.Value = dtReturnRepairHeader.Rows(i).Item("ReturnPaidAmount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam8.Value = dtReturnRepairHeader.Rows(i).Item("Remark")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam9.Value = dtReturnRepairHeader.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam10.Value = dtReturnRepairHeader.Rows(i).Item("LastModifiedDate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@AdvanceAmount", OleDbType.Numeric)
                    objParam11.Value = dtReturnRepairHeader.Rows(i).Item("AdvanceAmount")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@BalanceAmount", OleDbType.Numeric)
                    objParam12.Value = dtReturnRepairHeader.Rows(i).Item("BalanceAmount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam13.Value = dtReturnRepairHeader.Rows(i).Item("StaffID")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam14.Value = dtReturnRepairHeader.Rows(i).Item("IsDelete")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam15.Value = dtReturnRepairHeader.Rows(i).Item("IsSync")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam16.Value = dtReturnRepairHeader.Rows(i).Item("LocationID")

                    Command.ExecuteNonQuery()

                    dtReturnRepairItem = GetReturnRepairDetail(dtReturnRepairHeader.Rows(i).Item("ReturnRepairID"))
                    If dtReturnRepairItem.Rows.Count > 0 Then
                        InsertReturnRepairDetail(dtReturnRepairItem, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertReturnRepairHeader: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertReturnRepairDetail(ByVal dtReturnRepairDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            Dim dtReturnRepairGems As New DataTable
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtReturnRepairDetail.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ReturnRepairDetail ( ReturnRepairDetailID,ReturnRepairID,RepairDetailID,ChangeSaleRate,ReturnItemTK,ReturnItemTG,ReturnGoldTK,ReturnGoldTG,ReturnGemTK,ReturnGemTG,OrgGoldTK,OrgGoldTG,OrgGemTK,OrgGemTG,WasteTK,WasteTG, DesignCharges, WhiteCharges, PlatingCharges,MountingCharges,ReturnGoldPrice,ReturnGemPrice,ReturnTotalAmount,ReturnAddOrSub)"
                    strCommandText += " Values (@ReturnRepairDetailID,@ReturnRepairID,@RepairDetailID,@ChangeSaleRate,@ReturnItemTK,@ReturnItemTG,@ReturnGoldTK,@ReturnGoldTG,@ReturnGemTK,@ReturnGemTG,@OrgGoldTK,@OrgGoldTG,@OrgGemTK,@OrgGemTG,@WasteTK,@WasteTG,@DesignCharges, @WhiteCharges, @PlatingCharges,@MountingCharges,@ReturnGoldPrice,@ReturnGemPrice,@ReturnTotalAmount,@ReturnAddOrSub)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ReturnRepairDetailID", OleDbType.VarChar)
                    objParam.Value = dtReturnRepairDetail.Rows(i).Item("ReturnRepairDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ReturnRepairID", OleDbType.VarChar)
                    objParam2.Value = dtReturnRepairDetail.Rows(i).Item("ReturnRepairID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@RepairDetailID", OleDbType.VarChar)
                    objParam3.Value = dtReturnRepairDetail.Rows(i).Item("RepairDetailID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ChangeSaleRate", OleDbType.Numeric)
                    objParam4.Value = dtReturnRepairDetail.Rows(i).Item("ChangeSaleRate")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ReturnItemTK", OleDbType.Decimal)
                    objParam5.Value = dtReturnRepairDetail.Rows(i).Item("ReturnItemTK")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ReturnItemTG", OleDbType.Decimal)
                    objParam6.Value = dtReturnRepairDetail.Rows(i).Item("ReturnItemTG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@ReturnGoldTK", OleDbType.Decimal)
                    objParam7.Value = dtReturnRepairDetail.Rows(i).Item("ReturnGoldTK")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@ReturnGoldTG", OleDbType.Decimal)
                    objParam8.Value = dtReturnRepairDetail.Rows(i).Item("ReturnGoldTG")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@ReturnGemTK", OleDbType.Decimal)
                    objParam9.Value = dtReturnRepairDetail.Rows(i).Item("ReturnGemTK")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@ReturnGemTG", OleDbType.Decimal)
                    objParam10.Value = dtReturnRepairDetail.Rows(i).Item("ReturnGemTG")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@OrgGoldTK", OleDbType.Decimal)
                    objParam11.Value = dtReturnRepairDetail.Rows(i).Item("OrgGoldTK")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@OrgGoldTG", OleDbType.Decimal)
                    objParam12.Value = dtReturnRepairDetail.Rows(i).Item("OrgGoldTG")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@OrgGemTK", OleDbType.Decimal)
                    objParam13.Value = dtReturnRepairDetail.Rows(i).Item("OrgGemTK")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@OrgGemTG", OleDbType.Decimal)
                    objParam14.Value = dtReturnRepairDetail.Rows(i).Item("OrgGemTG")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam15.Value = dtReturnRepairDetail.Rows(i).Item("WasteTK")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam16.Value = dtReturnRepairDetail.Rows(i).Item("WasteTG")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                    objParam17.Value = dtReturnRepairDetail.Rows(i).Item("DesignCharges")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@WhiteCharges", OleDbType.Numeric)
                    objParam18.Value = dtReturnRepairDetail.Rows(i).Item("WhiteCharges")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@PlatingCharges", OleDbType.Numeric)
                    objParam19.Value = dtReturnRepairDetail.Rows(i).Item("PlatingCharges")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@MountingCharges", OleDbType.Numeric)
                    objParam20.Value = dtReturnRepairDetail.Rows(i).Item("MountingCharges")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@ReturnGoldPrice", OleDbType.Numeric)
                    objParam21.Value = dtReturnRepairDetail.Rows(i).Item("ReturnGoldPrice")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@ReturnGemPrice", OleDbType.Numeric)
                    objParam22.Value = dtReturnRepairDetail.Rows(i).Item("ReturnGemPrice")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@ReturnTotalAmount", OleDbType.Numeric)
                    objParam23.Value = dtReturnRepairDetail.Rows(i).Item("ReturnTotalAmount")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@ReturnAddOrSub", OleDbType.Numeric)
                    objParam24.Value = dtReturnRepairDetail.Rows(i).Item("ReturnAddOrSub")
                    Command.ExecuteNonQuery()


                    dtReturnRepairGems = GetReturnRepairGems(dtReturnRepairDetail.Rows(i).Item("ReturnRepairDetailID"))
                    If dtReturnRepairGems.Rows.Count > 0 Then
                        InsertReturnRepairGems(dtReturnRepairGems, DatabasePath)
                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertReturnRepairDetail: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertReturnRepairGems(ByVal dtReturnRepairGem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtReturnRepairGem.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_ReturnRepairGem ( ReturnRepairGemID, ReturnRepairDetailID, GemsCategoryID, Description, GemsTK, GemsTG, YOrCOrG, GemsTW, QTY, Type, UnitPrice, Amount, IsNewGems)"
                    strCommandText += " VALUES(@ReturnRepairGemID, @ReturnRepairDetailID, @GemsCategoryID, @Description, @GemsTK, @GemsTG, @YOrCOrG, @GemsTW, @QTY, @Type, @UnitPrice, @Amount, @IsNewGems)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ReturnRepairGemID", OleDbType.VarChar)
                    objParam.Value = dtReturnRepairGem.Rows(i).Item("ReturnRepairGemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ReturnRepairDetailID", OleDbType.VarChar)
                    objParam2.Value = dtReturnRepairGem.Rows(i).Item("ReturnRepairDetailID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtReturnRepairGem.Rows(i).Item("GemsCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@Description", OleDbType.VarChar)
                    objParam4.Value = dtReturnRepairGem.Rows(i).Item("Description")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam5.Value = dtReturnRepairGem.Rows(i).Item("GemsTK")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam6.Value = dtReturnRepairGem.Rows(i).Item("GemsTG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam7.Value = dtReturnRepairGem.Rows(i).Item("YOrCOrG")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTW", OleDbType.Decimal)
                    objParam8.Value = dtReturnRepairGem.Rows(i).Item("GemsTW")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam9.Value = dtReturnRepairGem.Rows(i).Item("Qty")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@Type", OleDbType.VarChar)
                    objParam10.Value = dtReturnRepairGem.Rows(i).Item("Type")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.Numeric)
                    objParam11.Value = dtReturnRepairGem.Rows(i).Item("UnitPrice")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam12.Value = dtReturnRepairGem.Rows(i).Item("Amount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsNewGems", OleDbType.Boolean)
                    objParam13.Value = dtReturnRepairGem.Rows(i).Item("IsNewGems")
                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertReturnRepairGems: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertRepairHeader(ByVal dtRepairHeader As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtRepairDetail As New DataTable
            Dim dtReturnRepairHeader As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtRepairHeader.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_RepairHeader(RepairID, RepairDate, CustomerID, StaffID, Remark, AdvanceRepairAmount, DueDate, IsAllReturn, LastModifiedLoginUserName, LastModifiedDate, LocationID,IsDelete,IsSync)"
                    strCommandText += " VALUES(@RepairID, @RepairDate, @CustomerID, @StaffID, @Remark, @AdvanceRepairAmount, @DueDate,@IsAllReturn, @LastModifiedLoginUserName, @LastModifiedDate, @LocationID,@IsDelete,@IsSync)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@RepairID", OleDbType.VarChar)
                    objParam.Value = dtRepairHeader.Rows(i).Item("RepairID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@RepairDate", OleDbType.Date)
                    objParam2.Value = dtRepairHeader.Rows(i).Item("RepairDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam3.Value = dtRepairHeader.Rows(i).Item("CustomerID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtRepairHeader.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtRepairHeader.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@AdvanceRepairAmount", OleDbType.Numeric)
                    objParam6.Value = dtRepairHeader.Rows(i).Item("AdvanceRepairAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@DueDate", OleDbType.Date)
                    objParam7.Value = dtRepairHeader.Rows(i).Item("DueDate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsAllReturn", OleDbType.Boolean)
                    objParam8.Value = dtRepairHeader.Rows(i).Item("IsAllReturn")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam9.Value = dtRepairHeader.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam10.Value = dtRepairHeader.Rows(i).Item("LastModifiedDate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam11.Value = dtRepairHeader.Rows(i).Item("LocationID")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam12.Value = dtRepairHeader.Rows(i).Item("IsDelete")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam13.Value = dtRepairHeader.Rows(i).Item("IsSync")

                    Command.ExecuteNonQuery()
                    'Repair Header
                    dtRepairDetail = GetRepairDetail(dtRepairHeader.Rows(i).Item("RepairID"))
                    If dtRepairDetail.Rows.Count > 0 Then
                        InsertRepairDetail(dtRepairDetail, DatabasePath)
                    End If
                    'Return Repair Header
                    'dtReturnRepairHeader = GetReturnRepairHeader(dtRepairHeader.Rows(i).Item("RepairID"))
                    'If dtReturnRepairHeader.Rows.Count > 0 Then
                    '    InsertReturnRepairHeader(dtReturnRepairHeader, DatabasePath)
                    'End If

                Catch ex As Exception
                    WriteEventlogs("InsertRepairHeader: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertRepairDetail(ByVal dtRepairDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            Dim dtReturnRepairDetail As New DataTable
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtRepairDetail.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_RepairDetail ( RepairDetailID,RepairID,IsFromShop,BarcodeNo,ItemCategoryID,ItemNameID,GoldQualityID,LengthOrWidth,CurrentPrice,Design,ItemTK,ItemTG,IsExit,DetailRemark)"
                    strCommandText += " Values (@RepairDetailID,@RepairID,@IsFromShop,@BarcodeNo,@ItemCategoryID,@ItemNameID,@GoldQualityID,@LengthOrWidth,@CurrentPrice,@Design,@ItemTK,@ItemTG,@IsExit,@DetailRemark)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@RepairDetailID", OleDbType.VarChar)
                    objParam.Value = dtRepairDetail.Rows(i).Item("RepairDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@RepairID", OleDbType.VarChar)
                    objParam2.Value = dtRepairDetail.Rows(i).Item("RepairID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@IsFromShop", OleDbType.Boolean)
                    objParam3.Value = dtRepairDetail.Rows(i).Item("IsFromShop")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@BarcodeNo", OleDbType.VarChar)
                    objParam4.Value = dtRepairDetail.Rows(i).Item("BarcodeNo")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam5.Value = dtRepairDetail.Rows(i).Item("ItemCategoryID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam6.Value = dtRepairDetail.Rows(i).Item("ItemNameID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam7.Value = dtRepairDetail.Rows(i).Item("GoldQualityID")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LengthOrWidth", OleDbType.VarChar)
                    objParam8.Value = dtRepairDetail.Rows(i).Item("LengthOrWidth")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@CurrentPrice", OleDbType.Numeric)
                    objParam9.Value = dtRepairDetail.Rows(i).Item("CurrentPrice")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@Design", OleDbType.VarChar)
                    objParam10.Value = dtRepairDetail.Rows(i).Item("Design")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam11.Value = dtRepairDetail.Rows(i).Item("ItemTK")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam12.Value = dtRepairDetail.Rows(i).Item("ItemTG")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsExit", OleDbType.Boolean)
                    objParam13.Value = dtRepairDetail.Rows(i).Item("IsExit")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@DetailRemark", OleDbType.VarChar)
                    objParam14.Value = dtRepairDetail.Rows(i).Item("DetailRemark")

                    Command.ExecuteNonQuery()

                    'Repair Header
                    'dtReturnRepairDetail = GetReturnRepairDetail(dtRepairDetail.Rows(i).Item("RepairDetailID"))
                    'If dtReturnRepairDetail.Rows.Count > 0 Then
                    '    InsertReturnRepairDetail(dtReturnRepairDetail, DatabasePath)
                    'End If


                Catch ex As Exception
                    WriteEventlogs("InsertRepairDetail: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertPurchaseOutItem(ByVal dtPurchaseOutItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtPurchaseOutItemDetail As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtPurchaseOutItem.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_PurchaseOutItem(PurchaseOutID, OutDate, StaffID, PurchaseHeaderID, Remark, LocationID,LastModifiedLoginUserName, LastModifiedDate,IsSync)"
                    strCommandText += " VALUES(@PurchaseOutID, @OutDate, @StaffID, @PurchaseHeaderID, @Remark, @LocationID,@LastModifiedLoginUserName, @LastModifiedDate,@IsSync)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@PurchaseOutID", OleDbType.VarChar)
                    objParam.Value = dtPurchaseOutItem.Rows(i).Item("PurchaseOutID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@OutDate", OleDbType.Date)
                    objParam2.Value = dtPurchaseOutItem.Rows(i).Item("OutDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam3.Value = dtPurchaseOutItem.Rows(i).Item("StaffID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam4.Value = dtPurchaseOutItem.Rows(i).Item("PurchaseHeaderID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtPurchaseOutItem.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam6.Value = dtPurchaseOutItem.Rows(i).Item("LocationID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam7.Value = dtPurchaseOutItem.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtPurchaseOutItem.Rows(i).Item("LastModifiedDate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam9.Value = dtPurchaseOutItem.Rows(i).Item("IsSync")

                    Command.ExecuteNonQuery()

                    dtPurchaseOutItemDetail = GetPurchaseOutItemDetail(dtPurchaseOutItem.Rows(i).Item("RepairID"))
                    If dtPurchaseOutItemDetail.Rows.Count > 0 Then
                        InsertPurchaseOutItemDetail(dtPurchaseOutItemDetail, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertPurchaseOutItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertPurchaseOutItemDetail(ByVal dtPurchaseOutItemDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtPurchaseOutItemDetail.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_PurchaseOutItemDetail ( PurchaseOutDetailID,PurchaseOutID,PurchaseDetailID,GemsCategoryID,GemsName,DivideType,Qty,GemsTK,GemsTG,YOrCOrG,GemTW)"
                    strCommandText += " Values (@PurchaseOutDetailID,@PurchaseOutID,@PurchaseDetailID,@GemsCategoryID,@GemsName,@DivideType,@Qty,@GemsTK,@GemsTG,@YOrCOrG,@GemTW)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@PurchaseOutDetailID", OleDbType.VarChar)
                    objParam.Value = dtPurchaseOutItemDetail.Rows(i).Item("PurchaseOutDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@PurchaseOutID", OleDbType.VarChar)
                    objParam2.Value = dtPurchaseOutItemDetail.Rows(i).Item("PurchaseOutID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@PurchaseDetailID", OleDbType.VarChar)
                    objParam3.Value = dtPurchaseOutItemDetail.Rows(i).Item("PurchaseDetailID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam4.Value = dtPurchaseOutItemDetail.Rows(i).Item("GemsCategoryID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam5.Value = dtPurchaseOutItemDetail.Rows(i).Item("GemsName")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@DivideType", OleDbType.VarChar)
                    objParam6.Value = dtPurchaseOutItemDetail.Rows(i).Item("DivideType")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam7.Value = dtPurchaseOutItemDetail.Rows(i).Item("Qty")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam8.Value = dtPurchaseOutItemDetail.Rows(i).Item("GemsTK")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam9.Value = dtPurchaseOutItemDetail.Rows(i).Item("GemsTG")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam10.Value = dtPurchaseOutItemDetail.Rows(i).Item("YOrCOrG")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@GemTW", OleDbType.Decimal)
                    objParam11.Value = dtPurchaseOutItemDetail.Rows(i).Item("GemTW")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertPurchaseOutItemDetail: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertPurchaseHeader(ByVal dtPurchaseHeader As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtPurchaseDetail As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtPurchaseHeader.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_PurchaseHeader ( PurchaseHeaderID,PurchaseDate,StaffID,CustomerID,Address,Remark,AllTotalAmount,AllAddOrSub,AllPaidAmount,GoldPrice,GemsPrice,IsGem,LocationID, IsChange,IsDelete,IsSync,IsUpload,LastModifiedLoginUserName,LastModifiedDate)"
                    strCommandText += " Values (@PurchaseHeaderID,@PurchaseDate,@StaffID,@CustomerID,@Address,@Remark,@AllTotalAmount,@AllAddOrSub,@AllPaidAmount,@GoldPrice,@GemsPrice,@IsGem,@LocationID, @IsChange,@IsDelete,@isSync,@IsUpload,@LastModifiedLoginUserName,@LastModifiedDate)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam.Value = dtPurchaseHeader.Rows(i).Item("PurchaseHeaderID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@PurchaseDate", OleDbType.Date)
                    objParam2.Value = dtPurchaseHeader.Rows(i).Item("PurchaseDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam3.Value = dtPurchaseHeader.Rows(i).Item("StaffID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam4.Value = dtPurchaseHeader.Rows(i).Item("CustomerID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Address", OleDbType.VarChar)
                    objParam5.Value = dtPurchaseHeader.Rows(i).Item("Address")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam6.Value = dtPurchaseHeader.Rows(i).Item("Remark")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@AllTotalAmount", OleDbType.Numeric)
                    objParam7.Value = dtPurchaseHeader.Rows(i).Item("AllTotalAmount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@AllAddOrSub", OleDbType.Numeric)
                    objParam8.Value = dtPurchaseHeader.Rows(i).Item("AllAddOrSub")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@AllPaidAmount", OleDbType.Numeric)
                    objParam9.Value = dtPurchaseHeader.Rows(i).Item("AllPaidAmount")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam10.Value = dtPurchaseHeader.Rows(i).Item("GoldPrice")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@GemsPrice", OleDbType.Numeric)
                    objParam11.Value = dtPurchaseHeader.Rows(i).Item("GemsPrice")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@IsGem", OleDbType.Boolean)
                    objParam12.Value = dtPurchaseHeader.Rows(i).Item("IsGem")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam13.Value = dtPurchaseHeader.Rows(i).Item("LocationID")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsChange", OleDbType.Boolean)
                    objParam14.Value = dtPurchaseHeader.Rows(i).Item("IsChange")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam15.Value = dtPurchaseHeader.Rows(i).Item("IsDelete")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam16.Value = dtPurchaseHeader.Rows(i).Item("IsSync")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam17.Value = dtPurchaseHeader.Rows(i).Item("IsUpload")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam18.Value = dtPurchaseHeader.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam19.Value = dtPurchaseHeader.Rows(i).Item("LastModifiedDate")


                    Command.ExecuteNonQuery()

                    dtPurchaseDetail = GetPurchaseDetail(dtPurchaseHeader.Rows(i).Item("PurchaseHeaderID"))
                    If dtPurchaseDetail.Rows.Count > 0 Then
                        InsertPurchaseDetail(dtPurchaseDetail, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertPurchaseHeader: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertPurchaseDetail(ByVal dtPurchaseDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            Dim dtPurchaseGem As New DataTable
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtPurchaseDetail.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_PurchaseDetail ( PurchaseDetailID,PurchaseHeaderID, SaleInvoiceDetailID,SaleGemsItemID, ForSaleID,BarcodeNo,OldSaleAmount,ItemCategoryID,ItemNameID,GoldQualityID,CurrentPrice,TotalTK,TotalTG,GoldTK,GoldTG,TotalGemTK,TotalGemTG,Length,QTY,IsDamage,IsChange,TotalAmount, IsClose, YOrCOrG, GemTW, FixType, ItemName, GoldPrice, GemsPrice, WasteTK, WasteTG,  PWasteTK, PWasteTG, SaleRate, IsDone, DoneAmount, IsSalePercent, SalePercent, SalePercentAmount, AddSub, IsShop, IsOrder,ConsignmentSaleItemID)"
                    strCommandText += " Values (@PurchaseDetailID,@PurchaseHeaderID, @SaleInvoiceDetailID,@SaleGemsItemID, @ForSaleID, @BarcodeNo, @OldSaleAmount, @ItemCategoryID, @ItemNameID, @GoldQualityID, @CurrentPrice, @TotalTK, @TotalTG, @GoldTK, @GoldTG, @TotalGemTK, @TotalGemTG, @Length, @QTY, @IsDamage, @IsChange, @TotalAmount, @IsClose, @YOrCOrG, @GemTW, @FixType, @ItemName, @GoldPrice, @GemsPrice, @WasteTK, @WasteTG,  @PWasteTK, @PWasteTG, @SaleRate, @IsDone, @DoneAmount, @IsSalePercent, @SalePercent, @SalePercentAmount, @AddSub , @IsShop, @IsOrder,@ConsignmentSaleItemID)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@PurchaseDetailID", OleDbType.VarChar)
                    objParam.Value = dtPurchaseDetail.Rows(i).Item("PurchaseDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam2.Value = dtPurchaseDetail.Rows(i).Item("PurchaseHeaderID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@SaleInvoiceDetailID", OleDbType.VarChar)
                    objParam3.Value = dtPurchaseDetail.Rows(i).Item("SaleInvoiceDetailID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@SaleGemsItemID", OleDbType.VarChar)
                    objParam4.Value = dtPurchaseDetail.Rows(i).Item("SaleGemsItemID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam5.Value = dtPurchaseDetail.Rows(i).Item("ForSaleID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@BarcodeNo", OleDbType.VarChar)
                    objParam6.Value = dtPurchaseDetail.Rows(i).Item("BarcodeNo")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@OldSaleAmount", OleDbType.Numeric)
                    objParam7.Value = dtPurchaseDetail.Rows(i).Item("OldSaleAmount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam8.Value = dtPurchaseDetail.Rows(i).Item("ItemCategoryID")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam9.Value = dtPurchaseDetail.Rows(i).Item("ItemNameID")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam10.Value = dtPurchaseDetail.Rows(i).Item("GoldQualityID")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@CurrentPrice", OleDbType.Numeric)
                    objParam11.Value = dtPurchaseDetail.Rows(i).Item("CurrentPrice")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@TotalTK", OleDbType.Decimal)
                    objParam12.Value = dtPurchaseDetail.Rows(i).Item("TotalTK")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@TotalTG", OleDbType.Decimal)
                    objParam13.Value = dtPurchaseDetail.Rows(i).Item("TotalTG")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam14.Value = dtPurchaseDetail.Rows(i).Item("GoldTK")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam15.Value = dtPurchaseDetail.Rows(i).Item("GoldTG")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@TotalGemTK", OleDbType.Decimal)
                    objParam16.Value = dtPurchaseDetail.Rows(i).Item("TotalGemTK")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@TotalGemTG", OleDbType.Decimal)
                    objParam17.Value = dtPurchaseDetail.Rows(i).Item("TotalGemTG")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@Length", OleDbType.VarChar)
                    objParam18.Value = dtPurchaseDetail.Rows(i).Item("Length")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam19.Value = dtPurchaseDetail.Rows(i).Item("QTY")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@IsDamage", OleDbType.Boolean)
                    objParam20.Value = dtPurchaseDetail.Rows(i).Item("IsDamage")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@IsChange", OleDbType.Boolean)
                    objParam21.Value = dtPurchaseDetail.Rows(i).Item("IsChange")

                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam22.Value = dtPurchaseDetail.Rows(i).Item("TotalAmount")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@IsClose", OleDbType.Boolean)
                    objParam23.Value = dtPurchaseDetail.Rows(i).Item("IsClose")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam24.Value = dtPurchaseDetail.Rows(i).Item("YOrCOrG")
                    Dim objParam25 As OleDbParameter = Command.Parameters.Add("@GemTW", OleDbType.Decimal)
                    objParam25.Value = dtPurchaseDetail.Rows(i).Item("GemTW")
                    Dim objParam26 As OleDbParameter = Command.Parameters.Add("@FixType", OleDbType.VarChar)
                    objParam26.Value = dtPurchaseDetail.Rows(i).Item("FixType")
                    Dim objParam27 As OleDbParameter = Command.Parameters.Add("@ItemName", OleDbType.VarChar)
                    objParam27.Value = dtPurchaseDetail.Rows(i).Item("ItemName")
                    Dim objParam28 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam28.Value = dtPurchaseDetail.Rows(i).Item("GoldPrice")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@GemsPrice", OleDbType.Numeric)
                    objParam29.Value = dtPurchaseDetail.Rows(i).Item("GemsPrice")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam30.Value = dtPurchaseDetail.Rows(i).Item("WasteTK")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam31.Value = dtPurchaseDetail.Rows(i).Item("WasteTG")

                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@PWasteTK", OleDbType.Decimal)
                    objParam32.Value = dtPurchaseDetail.Rows(i).Item("PWasteTK")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@PWasteTG", OleDbType.Decimal)
                    objParam33.Value = dtPurchaseDetail.Rows(i).Item("PWasteTG")

                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@SaleRate", OleDbType.Numeric)
                    objParam34.Value = dtPurchaseDetail.Rows(i).Item("SaleRate")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@IsDone", OleDbType.Boolean)
                    objParam35.Value = dtPurchaseDetail.Rows(i).Item("IsDone")

                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@DoneAmount", OleDbType.Numeric)
                    objParam36.Value = dtPurchaseDetail.Rows(i).Item("DoneAmount")
                    Dim objParam37 As OleDbParameter = Command.Parameters.Add("@IsSalePercent", OleDbType.Boolean)
                    objParam37.Value = dtPurchaseDetail.Rows(i).Item("IsSalePercent")

                    Dim objParam38 As OleDbParameter = Command.Parameters.Add("@SalePercent", OleDbType.Numeric)
                    objParam38.Value = dtPurchaseDetail.Rows(i).Item("SalePercent")
                    Dim objParam39 As OleDbParameter = Command.Parameters.Add("@SalePercentAmount", OleDbType.Numeric)
                    objParam39.Value = dtPurchaseDetail.Rows(i).Item("SalePercentAmount")

                    Dim objParam40 As OleDbParameter = Command.Parameters.Add("@AddSub", OleDbType.Numeric)
                    objParam40.Value = dtPurchaseDetail.Rows(i).Item("AddSub")
                    Dim objParam41 As OleDbParameter = Command.Parameters.Add("@IsShop", OleDbType.Boolean)
                    objParam41.Value = dtPurchaseDetail.Rows(i).Item("IsShop")

                    Dim objParam42 As OleDbParameter = Command.Parameters.Add("@IsOrder", OleDbType.Boolean)
                    objParam42.Value = dtPurchaseDetail.Rows(i).Item("IsOrder")
                    Dim objParam43 As OleDbParameter = Command.Parameters.Add("@ConsignmentSaleItemID", OleDbType.VarChar)
                    objParam43.Value = dtPurchaseDetail.Rows(i).Item("ConsignmentSaleItemID")

                    Command.ExecuteNonQuery()

                    dtPurchaseGem = GetPurchaseGems(dtPurchaseDetail.Rows(i).Item("PurchaseDetailID"))
                    If dtPurchaseGem.Rows.Count > 0 Then
                        InsertPurchaseGems(dtPurchaseGem, DatabasePath)
                    End If

                Catch ex As Exception
                    WriteEventlogs("InsertPurchaseDetail: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertPurchaseGems(ByVal dtPurchaseGems As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtPurchaseGems.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_PurchaseGem ( PurchaseGemID,PurchaseDetailID,GemsCategoryID,GemsName,GemsTK,GemsTG,YOrCOrG,GemTW,QTY,FixType, PurchaseRate, Amount, Discount,IsOutGem)"
                    strCommandText += " Values (@PurchaseGemID,@PurchaseDetailID,@GemsCategoryID,@GemsName,@GemsTK,@GemsTG,@YOrCOrG,@GemTW,@QTY,@FixType, @PurchaseRate, @Amount, @Discount,@IsOutGem)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@PurchaseGemID", OleDbType.VarChar)
                    objParam.Value = dtPurchaseGems.Rows(i).Item("PurchaseGemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@PurchaseDetailID", OleDbType.VarChar)
                    objParam2.Value = dtPurchaseGems.Rows(i).Item("PurchaseDetailID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtPurchaseGems.Rows(i).Item("GemsCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam4.Value = dtPurchaseGems.Rows(i).Item("GemsName")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam5.Value = dtPurchaseGems.Rows(i).Item("GemsTK")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam6.Value = dtPurchaseGems.Rows(i).Item("GemsTG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam7.Value = dtPurchaseGems.Rows(i).Item("YOrCOrG")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemTW", OleDbType.Decimal)
                    objParam8.Value = dtPurchaseGems.Rows(i).Item("GemTW")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam9.Value = dtPurchaseGems.Rows(i).Item("QTY")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@FixType", OleDbType.VarChar)
                    objParam10.Value = dtPurchaseGems.Rows(i).Item("FixType")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@PurchaseRate", OleDbType.Decimal)
                    objParam11.Value = dtPurchaseGems.Rows(i).Item("PurchaseRate")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam12.Value = dtPurchaseGems.Rows(i).Item("Amount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@Discount", OleDbType.Numeric)
                    objParam13.Value = dtPurchaseGems.Rows(i).Item("Discount")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsOutGem", OleDbType.Boolean)
                    objParam14.Value = dtPurchaseGems.Rows(i).Item("IsOutGem")


                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertPurchaseGems: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertPurchaseFromSupplier(ByVal dtPurchaseFromSupplier As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtPurchaseFromSupplierItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtPurchaseFromSupplier.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_PurchaseFromSupplier ( PurchaseFromSupplierID,PDate,StaffID,SupplierID,Remark,Voucher,ExchangeRate,TotalAmount,AddOrSub,PaidAmount,DiscountRate,Expense,CommissionRate,PayType,DueDate,LocationID,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync)"
                    strCommandText += " Values (@PurchaseFromSupplierID,@PDate,@StaffID,@SupplierID,@Remark,@Voucher,@ExchangeRate,@TotalAmount,@AddOrSub,@PaidAmount,@DiscountRate,@Expense,@CommissionRate,@PayType,@DueDate,@LocationID,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@PurchaseFromSupplierID", OleDbType.VarChar)
                    objParam.Value = dtPurchaseFromSupplier.Rows(i).Item("PurchaseFromSupplierID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@PDate", OleDbType.Date)
                    objParam2.Value = dtPurchaseFromSupplier.Rows(i).Item("PDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam3.Value = dtPurchaseFromSupplier.Rows(i).Item("StaffID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@SupplierID", OleDbType.VarChar)
                    objParam4.Value = dtPurchaseFromSupplier.Rows(i).Item("SupplierID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtPurchaseFromSupplier.Rows(i).Item("Remark")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Voucher", OleDbType.VarChar)
                    objParam6.Value = dtPurchaseFromSupplier.Rows(i).Item("Voucher")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@ExchangeRate", OleDbType.Numeric)
                    objParam7.Value = dtPurchaseFromSupplier.Rows(i).Item("ExchangeRate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam8.Value = dtPurchaseFromSupplier.Rows(i).Item("TotalAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam9.Value = dtPurchaseFromSupplier.Rows(i).Item("AddOrSub")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam10.Value = dtPurchaseFromSupplier.Rows(i).Item("PaidAmount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@DiscountRate", OleDbType.Numeric)
                    objParam11.Value = dtPurchaseFromSupplier.Rows(i).Item("DiscountRate")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Expense", OleDbType.Numeric)
                    objParam12.Value = dtPurchaseFromSupplier.Rows(i).Item("Expense")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@CommissionRate", OleDbType.Numeric)
                    objParam13.Value = dtPurchaseFromSupplier.Rows(i).Item("CommissionRate")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@PayType", OleDbType.Numeric)
                    objParam14.Value = dtPurchaseFromSupplier.Rows(i).Item("PayType")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@DueDate", OleDbType.Date)
                    objParam15.Value = dtPurchaseFromSupplier.Rows(i).Item("DueDate")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam16.Value = dtPurchaseFromSupplier.Rows(i).Item("LocationID")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam17.Value = dtPurchaseFromSupplier.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam18.Value = dtPurchaseFromSupplier.Rows(i).Item("LastModifiedDate")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam19.Value = dtPurchaseFromSupplier.Rows(i).Item("IsDelete")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam20.Value = dtPurchaseFromSupplier.Rows(i).Item("IsSync")

                    Command.ExecuteNonQuery()

                    dtPurchaseFromSupplierItem = GetPurchaseFromSupplierItem(dtPurchaseFromSupplier.Rows(i).Item("PurchaseFromSupplierID"))
                    If dtPurchaseFromSupplierItem.Rows.Count > 0 Then
                        InsertPurchaseFromSupplierItem(dtPurchaseFromSupplierItem, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertPurchaseFromSupplier: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertPurchaseFromSupplierItem(ByVal dtPurchaseFromSupplierItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtPurchaseFromSupplierItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_PurchaseFromSupplierItem ( PurchaseFromSupplierItemID,PurchaseFromSupplierID,OriginalCode,GramWeight,QTY,Rate,Amount,IsReject)"
                    strCommandText += " Values (@PurchaseFromSupplierItemID,@PurchaseFromSupplierID,@OriginalCode,@GramWeight,@QTY,@Rate,@Amount,@IsReject)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@PurchaseFromSupplierItemID", OleDbType.VarChar)
                    objParam.Value = dtPurchaseFromSupplierItem.Rows(i).Item("PurchaseFromSupplierItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@PurchaseFromSupplierID", OleDbType.VarChar)
                    objParam2.Value = dtPurchaseFromSupplierItem.Rows(i).Item("PurchaseFromSupplierID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@OriginalCode", OleDbType.VarChar)
                    objParam3.Value = dtPurchaseFromSupplierItem.Rows(i).Item("OriginalCode")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GramWeight", OleDbType.Decimal)
                    objParam4.Value = dtPurchaseFromSupplierItem.Rows(i).Item("GramWeight")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam5.Value = dtPurchaseFromSupplierItem.Rows(i).Item("QTY")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Rate", OleDbType.Decimal)
                    objParam6.Value = dtPurchaseFromSupplierItem.Rows(i).Item("Rate")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Decimal)
                    objParam7.Value = dtPurchaseFromSupplierItem.Rows(i).Item("Amount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsReject", OleDbType.Boolean)
                    objParam8.Value = dtPurchaseFromSupplierItem.Rows(i).Item("IsReject")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertPurchaseFromSupplierItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertOrderInvoice(ByVal dtOrderInvoice As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtOrderReceiveDetail As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtOrderInvoice.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_OrderInvoice ( OrderInvoiceID, OrderDate, DueDate, StaffID, CustomerID, PayGoldQualityID, PayGoldTK, PayGoldTG, Remark, AllTotalAmount, AllAddOrSub, AdvanceAmount, SecondAdvanceAmount, SecondAdvanceDate, IsCancel, IsRetrieved, LocationID, LastModifiedLoginUserName, LastModifiedDate,IsDelete,IsSync,OrderRetrieveDate,IsRepayment,RepaymentDate)"
                    strCommandText += " Values (@OrderInvoiceID, @OrderDate, @DueDate, @StaffID, @CustomerID, @PayGoldQualityID, @PayGoldTK, @PayGoldTG, @Remark, @AllTotalAmount, @AllAddOrSub, @AdvanceAmount, @SecondAdvanceAmount, @SecondAdvanceDate, @IsCancel, @IsRetrieved, @LocationID, @LastModifiedLoginUserName, @LastModifiedDate,@IsDelete,@IsSync,@OrderRetrieveDate,@IsRepayment,@RepaymentDate)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@OrderInvoiceID", OleDbType.VarChar)
                    objParam.Value = dtOrderInvoice.Rows(i).Item("OrderInvoiceID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@OrderDate", OleDbType.Date)
                    objParam2.Value = dtOrderInvoice.Rows(i).Item("OrderDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@DueDate", OleDbType.Date)
                    objParam3.Value = dtOrderInvoice.Rows(i).Item("DueDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtOrderInvoice.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam5.Value = dtOrderInvoice.Rows(i).Item("CustomerID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@PayGoldQualityID", OleDbType.VarChar)
                    objParam6.Value = dtOrderInvoice.Rows(i).Item("PayGoldQualityID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@PayGoldTK", OleDbType.Decimal)
                    objParam7.Value = dtOrderInvoice.Rows(i).Item("PayGoldTK")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@PayGoldTG", OleDbType.Decimal)
                    objParam8.Value = dtOrderInvoice.Rows(i).Item("PayGoldTG")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam9.Value = dtOrderInvoice.Rows(i).Item("Remark")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@AllTotalAmount", OleDbType.Numeric)
                    objParam10.Value = dtOrderInvoice.Rows(i).Item("AllTotalAmount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@AllAddOrSub", OleDbType.Numeric)
                    objParam11.Value = dtOrderInvoice.Rows(i).Item("AllAddOrSub")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@AdvanceAmount", OleDbType.Numeric)
                    objParam12.Value = dtOrderInvoice.Rows(i).Item("AdvanceAmount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@SecondAdvanceAmount", OleDbType.Numeric)
                    objParam13.Value = dtOrderInvoice.Rows(i).Item("SecondAdvanceAmount")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@SecondAdvanceDate", OleDbType.Date)
                    objParam14.Value = dtOrderInvoice.Rows(i).Item("SecondAdvanceDate")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@IsCancel", OleDbType.Boolean)
                    objParam15.Value = dtOrderInvoice.Rows(i).Item("IsCancel")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsRetrieved", OleDbType.Boolean)
                    objParam16.Value = dtOrderInvoice.Rows(i).Item("IsRetrieved")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam17.Value = dtOrderInvoice.Rows(i).Item("LocationID")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam18.Value = dtOrderInvoice.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam19.Value = dtOrderInvoice.Rows(i).Item("LastModifiedDate")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam20.Value = dtOrderInvoice.Rows(i).Item("IsDelete")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam21.Value = dtOrderInvoice.Rows(i).Item("IsSync")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@OrderRetrieveDate", OleDbType.Date)
                    objParam22.Value = dtOrderInvoice.Rows(i).Item("OrderRetrieveDate")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@IsRepayment", OleDbType.Boolean)
                    objParam23.Value = dtOrderInvoice.Rows(i).Item("IsRepayment")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@RepaymentDate", OleDbType.Date)
                    objParam24.Value = dtOrderInvoice.Rows(i).Item("RepaymentDate")
                    Command.ExecuteNonQuery()

                    dtOrderReceiveDetail = GetOrderReceiveDetail(dtOrderInvoice.Rows(i).Item("OrderInvoiceID"))
                    If dtOrderReceiveDetail.Rows.Count > 0 Then
                        InsertOrderReceiveDetail(dtOrderReceiveDetail, DatabasePath)

                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertOrderInvoice: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertOrderReceiveDetail(ByVal dtOrderReceiveDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtOrderInvoiceGemsItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtOrderReceiveDetail.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_OrderReceiveDetail ( OrderReceiveDetailID,OrderInvoiceID,Length,Width,ItemCategoryID,GoldSmithID,ItemNameID,GoldQualityID,GoldTK,GoldTG,WasteTK,WasteTG,TotalGemTK,TotalGemTG,OrderRate,GoldPrice,GemPrice,DesignCharges,PlatingFee,WhiteCharges,MountingFee,TotalAmount,AddOrSub,IsBarcode, Design,IsDiamond)"
                    strCommandText += " Values (@OrderReceiveDetailID,@OrderInvoiceID,@Length,@Width,@ItemCategoryID,@GoldSmithID,@ItemNameID,@GoldQualityID,@GoldTK,@GoldTG,@WasteTK,@WasteTG,@TotalGemTK,@TotalGemTG,@OrderRate,@GoldPrice,@GemPrice,@DesignCharges,@PlatingFee,@WhiteCharges,@MountingFee,@TotalAmount,@AddOrSub,@IsBarcode, @Design,@IsDiamond)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@OrderReceiveDetailID", OleDbType.VarChar)
                    objParam.Value = dtOrderReceiveDetail.Rows(i).Item("OrderReceiveDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@OrderInvoiceID", OleDbType.VarChar)
                    objParam2.Value = dtOrderReceiveDetail.Rows(i).Item("OrderInvoiceID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Length", OleDbType.VarChar)
                    objParam3.Value = dtOrderReceiveDetail.Rows(i).Item("Length")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@Width", OleDbType.VarChar)
                    objParam4.Value = dtOrderReceiveDetail.Rows(i).Item("Width")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam5.Value = dtOrderReceiveDetail.Rows(i).Item("ItemCategoryID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GoldSmithID", OleDbType.VarChar)
                    objParam6.Value = dtOrderReceiveDetail.Rows(i).Item("GoldSmithID")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam7.Value = dtOrderReceiveDetail.Rows(i).Item("ItemNameID")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam8.Value = dtOrderReceiveDetail.Rows(i).Item("GoldQualityID")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam9.Value = dtOrderReceiveDetail.Rows(i).Item("GoldTK")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam10.Value = dtOrderReceiveDetail.Rows(i).Item("GoldTG")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam11.Value = dtOrderReceiveDetail.Rows(i).Item("WasteTK")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam12.Value = dtOrderReceiveDetail.Rows(i).Item("WasteTG")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@TotalGemTK", OleDbType.Decimal)
                    objParam13.Value = dtOrderReceiveDetail.Rows(i).Item("TotalGemTK")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@TotalGemTG", OleDbType.Decimal)
                    objParam14.Value = dtOrderReceiveDetail.Rows(i).Item("TotalGemTG")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@OrderRate", OleDbType.Numeric)
                    objParam15.Value = dtOrderReceiveDetail.Rows(i).Item("OrderRate")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam16.Value = dtOrderReceiveDetail.Rows(i).Item("GoldPrice")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@GemPrice", OleDbType.Numeric)
                    objParam17.Value = dtOrderReceiveDetail.Rows(i).Item("GemPrice")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@DesignCharges", OleDbType.Numeric)
                    objParam18.Value = dtOrderReceiveDetail.Rows(i).Item("DesignCharges")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@PlatingFee", OleDbType.Numeric)
                    objParam19.Value = dtOrderReceiveDetail.Rows(i).Item("PlatingFee")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@WhiteCharges", OleDbType.Numeric)
                    objParam20.Value = dtOrderReceiveDetail.Rows(i).Item("WhiteCharges")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@MountingFee", OleDbType.Numeric)
                    objParam21.Value = dtOrderReceiveDetail.Rows(i).Item("MountingFee")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam22.Value = dtOrderReceiveDetail.Rows(i).Item("TotalAmount")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam23.Value = dtOrderReceiveDetail.Rows(i).Item("AddOrSub")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@IsBarcode", OleDbType.Boolean)
                    objParam24.Value = dtOrderReceiveDetail.Rows(i).Item("IsBarcode")
                    Dim objParam25 As OleDbParameter = Command.Parameters.Add("@Design", OleDbType.VarChar)
                    objParam25.Value = dtOrderReceiveDetail.Rows(i).Item("Design")
                    Dim objParam26 As OleDbParameter = Command.Parameters.Add("@IsDiamond", OleDbType.Boolean)
                    objParam26.Value = dtOrderReceiveDetail.Rows(i).Item("IsDiamond")
                    Command.ExecuteNonQuery()

                    dtOrderInvoiceGemsItem = GetOrderInvoiceGemsItem(dtOrderReceiveDetail.Rows(i).Item("OrderInvoiceID"))
                    If dtOrderInvoiceGemsItem.Rows.Count > 0 Then
                        InsertOrderInvoiceGemsItem(dtOrderInvoiceGemsItem, DatabasePath)

                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertOrderReceiveDetail: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertOrderInvoiceGemsItem(ByVal dtOrderInvoiceGemsItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtOrderInvoiceGemsItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_OrderInvoiceGemsItem ( OrderInvoiceGemsItemID,OrderReceiveDetailID,GemsCategoryID,GemsName,GemsTK,YOrCOrG,GemsTW,GemsTG,Qty,UnitPrice,Type,Amount,IsCustomerGem)"
                    strCommandText += " Values (@OrderInvoiceGemsItemID,@OrderReceiveDetailID,@GemsCategoryID,@GemsName,@GemsTK,@YOrCOrG,@GemsTW,@GemsTG,@Qty,@UnitPrice,@Type,@Amount,@IsCustomerGem)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@OrderInvoiceGemsItemID", OleDbType.VarChar)
                    objParam.Value = dtOrderInvoiceGemsItem.Rows(i).Item("OrderInvoiceGemsItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@OrderReceiveDetailID", OleDbType.VarChar)
                    objParam2.Value = dtOrderInvoiceGemsItem.Rows(i).Item("OrderReceiveDetailID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtOrderInvoiceGemsItem.Rows(i).Item("GemsCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam4.Value = dtOrderInvoiceGemsItem.Rows(i).Item("GemsName")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam5.Value = dtOrderInvoiceGemsItem.Rows(i).Item("GemsTK")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam6.Value = dtOrderInvoiceGemsItem.Rows(i).Item("YOrCOrG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@GemsTW", OleDbType.Decimal)
                    objParam7.Value = dtOrderInvoiceGemsItem.Rows(i).Item("GemsTW")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam8.Value = dtOrderInvoiceGemsItem.Rows(i).Item("GemsTG")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam9.Value = dtOrderInvoiceGemsItem.Rows(i).Item("Qty")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.Numeric)
                    objParam10.Value = dtOrderInvoiceGemsItem.Rows(i).Item("UnitPrice")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@Type", OleDbType.VarChar)
                    objParam11.Value = dtOrderInvoiceGemsItem.Rows(i).Item("Type")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam12.Value = dtOrderInvoiceGemsItem.Rows(i).Item("Amount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsCustomerGem", OleDbType.Boolean)
                    objParam13.Value = dtOrderInvoiceGemsItem.Rows(i).Item("IsCustomerGem")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertOrderInvoiceGemsItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertOrderReturnHeader(ByVal dtOrderReturnHeader As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtOrderReturnDetail As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtOrderReturnHeader.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_OrderReturnHeader (OrderReturnHeaderID,ReturnDate, OrderInvoiceID, AllTotalAmount, AllAddOrSub, FromGoldAmount, StaffID, IsAddGold, Remark, DiscountAmount, BalanceAmount, PaidAmount, AdvanceAmount, LocationID, LastModifiedLoginUserName, LastModifiedDate,AllTaxAmt,IsDelete,IsSync,AddGoldTaxPer,AddGoldTax)"
                    strCommandText += " Values (@OrderReturnHeaderID,@ReturnDate, @OrderInvoiceID, @AllTotalAmount, @AllAddOrSub, @FromGoldAmount, @StaffID, @IsAddGold, @Remark, @DiscountAmount, @BalanceAmount, @PaidAmount,  @AdvanceAmount, @LocationID, @LastModifiedLoginUserName, @LastModifiedDate,@AllTaxAmt,@IsDelete,@IsSync,@AddGoldTaxPer,@AddGoldTax)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@OrderReturnHeaderID", OleDbType.VarChar)
                    objParam.Value = dtOrderReturnHeader.Rows(i).Item("OrderReturnHeaderID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ReturnDate", OleDbType.Date)
                    objParam2.Value = dtOrderReturnHeader.Rows(i).Item("ReturnDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@OrderInvoiceID", OleDbType.VarChar)
                    objParam3.Value = dtOrderReturnHeader.Rows(i).Item("OrderInvoiceID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@AllTotalAmount", OleDbType.Numeric)
                    objParam4.Value = dtOrderReturnHeader.Rows(i).Item("AllTotalAmount")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@AllAddOrSub", OleDbType.Numeric)
                    objParam5.Value = dtOrderReturnHeader.Rows(i).Item("AllAddOrSub")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@FromGoldAmount", OleDbType.Numeric)
                    objParam6.Value = dtOrderReturnHeader.Rows(i).Item("FromGoldAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam7.Value = dtOrderReturnHeader.Rows(i).Item("StaffID")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsAddGold", OleDbType.Boolean)
                    objParam8.Value = dtOrderReturnHeader.Rows(i).Item("IsAddGold")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam9.Value = dtOrderReturnHeader.Rows(i).Item("Remark")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@DiscountAmount", OleDbType.Numeric)
                    objParam10.Value = dtOrderReturnHeader.Rows(i).Item("DiscountAmount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@BalanceAmount", OleDbType.Numeric)
                    objParam11.Value = dtOrderReturnHeader.Rows(i).Item("BalanceAmount")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam12.Value = dtOrderReturnHeader.Rows(i).Item("PaidAmount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@AdvanceAmount", OleDbType.Numeric)
                    objParam13.Value = dtOrderReturnHeader.Rows(i).Item("AdvanceAmount")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam14.Value = dtOrderReturnHeader.Rows(i).Item("LocationID")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam15.Value = dtOrderReturnHeader.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam16.Value = dtOrderReturnHeader.Rows(i).Item("LastModifiedDate")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@AllTaxAmt", OleDbType.Numeric)
                    objParam17.Value = dtOrderReturnHeader.Rows(i).Item("AllTaxAmt")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam18.Value = dtOrderReturnHeader.Rows(i).Item("IsDelete")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam19.Value = dtOrderReturnHeader.Rows(i).Item("IsSync")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@AddGoldTaxPer", OleDbType.Decimal)
                    objParam20.Value = dtOrderReturnHeader.Rows(i).Item("AddGoldTaxPer")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@AddGoldTax", OleDbType.Numeric)
                    objParam21.Value = dtOrderReturnHeader.Rows(i).Item("AddGoldTax")

                    Command.ExecuteNonQuery()

                    dtOrderReturnDetail = GetOrderReturnDetail(dtOrderReturnHeader.Rows(i).Item("OrderReturnHeaderID"))
                    If dtOrderReturnDetail.Rows.Count > 0 Then
                        InsertOrderReturnDetail(dtOrderReturnDetail, DatabasePath)

                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertOrderReturnHeader: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertOrderReturnDetail(ByVal dtOrderReturnDetail As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtOrderReturnGemsItem As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtOrderReturnDetail.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_OrderReturnDetail ( OrderInvoiceDetailID, OrderReturnHeaderID, ForSaleID, ItemCode, SalesRate, GoldPrice, GemsPrice, TotalAmount, AddOrSub, IsOriginalFixedPrice, OriginalFixedPrice, IsOriginalPriceGram, OriginalPriceGram, OriginalPriceTK, OriginalGemsPrice, OriginalOtherPrice, PurchaseWasteTK, PurchaseWasteTG, IsReturn,ItemTaxPer,ItemTax)"
                    strCommandText += " Values (@OrderInvoiceDetailID, @OrderReturnHeaderID, @ForSaleID, @ItemCode, @SalesRate, @GoldPrice, @GemsPrice, @TotalAmount, @AddOrSub, @IsOriginalFixedPrice, @OriginalFixedPrice, @IsOriginalPriceGram, @OriginalPriceGram, @OriginalPriceTK, @OriginalGemsPrice, @OriginalOtherPrice, @PurchaseWasteTK, @PurchaseWasteTG, @IsReturn,@ItemTaxPer,@ItemTax)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@OrderInvoiceDetailID", OleDbType.VarChar)
                    objParam.Value = dtOrderReturnDetail.Rows(i).Item("OrderInvoiceDetailID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@OrderReturnHeaderID", OleDbType.VarChar)
                    objParam2.Value = dtOrderReturnDetail.Rows(i).Item("OrderReturnHeaderID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtOrderReturnDetail.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam4.Value = dtOrderReturnDetail.Rows(i).Item("ItemCode")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.Numeric)
                    objParam5.Value = dtOrderReturnDetail.Rows(i).Item("SalesRate")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam6.Value = dtOrderReturnDetail.Rows(i).Item("GoldPrice")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@GemsPrice", OleDbType.Numeric)
                    objParam7.Value = dtOrderReturnDetail.Rows(i).Item("GemsPrice")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam8.Value = dtOrderReturnDetail.Rows(i).Item("TotalAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam9.Value = dtOrderReturnDetail.Rows(i).Item("AddOrSub")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsOriginalFixedPrice", OleDbType.Boolean)
                    objParam10.Value = dtOrderReturnDetail.Rows(i).Item("IsOriginalFixedPrice")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@OriginalFixedPrice", OleDbType.Numeric)
                    objParam11.Value = dtOrderReturnDetail.Rows(i).Item("OriginalFixedPrice")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@IsOriginalPriceGram", OleDbType.Boolean)
                    objParam12.Value = dtOrderReturnDetail.Rows(i).Item("IsOriginalPriceGram")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@OriginalPriceGram", OleDbType.Numeric)
                    objParam13.Value = dtOrderReturnDetail.Rows(i).Item("OriginalPriceGram")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@OriginalPriceTK", OleDbType.Numeric)
                    objParam14.Value = dtOrderReturnDetail.Rows(i).Item("OriginalPriceTK")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@OriginalGemsPrice", OleDbType.Numeric)
                    objParam15.Value = dtOrderReturnDetail.Rows(i).Item("OriginalGemsPrice")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@OriginalOtherPrice", OleDbType.Numeric)
                    objParam16.Value = dtOrderReturnDetail.Rows(i).Item("OriginalOtherPrice")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTK", OleDbType.Decimal)
                    objParam17.Value = dtOrderReturnDetail.Rows(i).Item("PurchaseWasteTK")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@PurchaseWasteTG", OleDbType.Decimal)
                    objParam18.Value = dtOrderReturnDetail.Rows(i).Item("PurchaseWasteTG")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam19.Value = dtOrderReturnDetail.Rows(i).Item("IsReturn")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@ItemTaxPer", OleDbType.Decimal)
                    objParam20.Value = dtOrderReturnDetail.Rows(i).Item("ItemTaxPer")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@ItemTax", OleDbType.Numeric)
                    objParam21.Value = dtOrderReturnDetail.Rows(i).Item("ItemTax")

                    Command.ExecuteNonQuery()

                    dtOrderReturnGemsItem = GetOrderReturnGemsItem(dtOrderReturnDetail.Rows(i).Item("OrderInvoiceDetailID"))
                    If dtOrderReturnGemsItem.Rows.Count > 0 Then
                        InsertOrderReturnGemsItem(dtOrderReturnGemsItem, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertOrderReturnDetailItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertOrderReturnGemsItem(ByVal dtOrderReturnGemsItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtOrderReturnGemsItem.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_OrderReturnGemsItem ( OrderReturnGemID, OrderInvoiceDetailID, GemsCategoryID, GemsName, GemsTK, GemsTG, YOrCOrG, GemsTW, Qty, SaleType, UnitPrice, Amount, GemsRemark,GemTaxPer,GemTax)"
                    strCommandText += " VALUES(@OrderReturnGemID, @OrderInvoiceDetailID, @GemsCategoryID, @GemsName, @GemsTK, @GemsTG, @YOrCOrG, @GemsTW, @Qty, @SaleType, @UnitPrice, @Amount, @GemsRemark,@GemTaxPer,@GemTax)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@OrderReturnGemID", OleDbType.VarChar)
                    objParam.Value = dtOrderReturnGemsItem.Rows(i).Item("OrderReturnGemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@OrderInvoiceDetailID", OleDbType.VarChar)
                    objParam2.Value = dtOrderReturnGemsItem.Rows(i).Item("OrderInvoiceDetailID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GemsCategoryID", OleDbType.VarChar)
                    objParam3.Value = dtOrderReturnGemsItem.Rows(i).Item("GemsCategoryID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GemsName", OleDbType.VarChar)
                    objParam4.Value = dtOrderReturnGemsItem.Rows(i).Item("GemsName")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam5.Value = dtOrderReturnGemsItem.Rows(i).Item("GemsTK")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam6.Value = dtOrderReturnGemsItem.Rows(i).Item("GemsTG")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@YOrCOrG", OleDbType.VarChar)
                    objParam7.Value = dtOrderReturnGemsItem.Rows(i).Item("YOrCOrG")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GemsTW", OleDbType.Decimal)
                    objParam8.Value = dtOrderReturnGemsItem.Rows(i).Item("GemsTW")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Qty", OleDbType.Numeric)
                    objParam9.Value = dtOrderReturnGemsItem.Rows(i).Item("Qty")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@SaleType", OleDbType.VarChar)
                    objParam10.Value = dtOrderReturnGemsItem.Rows(i).Item("SaleType")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.Numeric)
                    objParam11.Value = dtOrderReturnGemsItem.Rows(i).Item("UnitPrice")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam12.Value = dtOrderReturnGemsItem.Rows(i).Item("Amount")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@GemsRemark", OleDbType.VarChar)
                    objParam13.Value = dtOrderReturnGemsItem.Rows(i).Item("GemsRemark")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@GemTaxPer", OleDbType.Decimal)
                    objParam14.Value = dtOrderReturnGemsItem.Rows(i).Item("GemTaxPer")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@GemTax", OleDbType.Numeric)
                    objParam15.Value = dtOrderReturnGemsItem.Rows(i).Item("GemTax")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertOrderReturnGemsItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertMortgageInvoice(ByVal dtMortgageInvoice As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtMortgageInvocieItem As New DataTable
            Dim dtMortgagePayback As New DataTable
            Dim dtMortgageInterest As New DataTable

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtMortgageInvoice.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_MortgageInvoice ( MortgageInvoiceID,ReceiveDate,MortgageStaff,InterestRate,CustomerID,TotalAmount,TotalQTY,Remark,IsReturn,InterestPeriod,IsPayback,LastModifiedLoginUserName,LastModifiedDate,LocationID,MortgageInvoiceCode,IsUpload,IsDelete,IsDisable,DisableDate,ReturnDate,InterestAmount,NetAmount,AddOrSub,PaidAmount,RRemark,IsRepayByHeadOffice,PaybackAmt,PaybackInterestAmt)"
                    strCommandText += " Values (@MortgageInvoiceID,@ReceiveDate,@MortgageStaff,@InterestRate,@CustomerID,@TotalAmount,@TotalQTY,@Remark,@IsReturn,@InterestPeriod,@IsPayback,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@MortgageInvoiceCode,@IsUpload,@IsDelete,@IsDisable,@DisableDate,@ReturnDate,@InterestAmount,@NetAmount,@AddOrSub,@PaidAmount,@RRemak,@IsRepayByHeadOffice,@PaybackAmt,@PaybackInterestAmt)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@MortgageInvoiceID", OleDbType.VarChar)
                    objParam.Value = dtMortgageInvoice.Rows(i).Item("MortgageInvoiceID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ReceiveDate", OleDbType.Date)
                    objParam2.Value = dtMortgageInvoice.Rows(i).Item("ReceiveDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@MortgageStaff", OleDbType.VarChar)
                    objParam3.Value = dtMortgageInvoice.Rows(i).Item("MortgageStaff")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@InterestRate", OleDbType.Numeric)
                    objParam4.Value = dtMortgageInvoice.Rows(i).Item("InterestRate")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam5.Value = dtMortgageInvoice.Rows(i).Item("CustomerID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam6.Value = dtMortgageInvoice.Rows(i).Item("TotalAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@TotalQTY", OleDbType.Numeric)
                    objParam7.Value = dtMortgageInvoice.Rows(i).Item("TotalQTY")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam8.Value = dtMortgageInvoice.Rows(i).Item("Remark")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam9.Value = dtMortgageInvoice.Rows(i).Item("IsReturn")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@InterestPeriod", OleDbType.Numeric)
                    objParam10.Value = dtMortgageInvoice.Rows(i).Item("InterestPeriod")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@IsPayback", OleDbType.Boolean)
                    objParam11.Value = dtMortgageInvoice.Rows(i).Item("IsPayback")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam12.Value = dtMortgageInvoice.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam13.Value = dtMortgageInvoice.Rows(i).Item("LastModifiedDate")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam14.Value = dtMortgageInvoice.Rows(i).Item("LocationID")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@MortgageInvoiceCode", OleDbType.VarChar)
                    objParam15.Value = dtMortgageInvoice.Rows(i).Item("MortgageInvoiceCode")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam16.Value = dtMortgageInvoice.Rows(i).Item("IsUpload")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam17.Value = dtMortgageInvoice.Rows(i).Item("IsDelete")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@IsDisable", OleDbType.Boolean)
                    objParam18.Value = dtMortgageInvoice.Rows(i).Item("IsDisable")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@DisableDate", OleDbType.Date)
                    objParam19.Value = dtMortgageInvoice.Rows(i).Item("DisableDate")
                    Dim objParam20 As OleDbParameter = Command.Parameters.Add("@ReturnDate", OleDbType.Date)
                    objParam20.Value = dtMortgageInvoice.Rows(i).Item("ReturnDate")
                    Dim objParam21 As OleDbParameter = Command.Parameters.Add("@InterestAmount", OleDbType.Numeric)
                    objParam21.Value = dtMortgageInvoice.Rows(i).Item("InterestAmount")
                    Dim objParam22 As OleDbParameter = Command.Parameters.Add("@NetAmount", OleDbType.Numeric)
                    objParam22.Value = dtMortgageInvoice.Rows(i).Item("NetAmount")
                    Dim objParam23 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam23.Value = dtMortgageInvoice.Rows(i).Item("AddOrSub")
                    Dim objParam24 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam24.Value = dtMortgageInvoice.Rows(i).Item("PaidAmount")
                    Dim objParam25 As OleDbParameter = Command.Parameters.Add("@RRemark", OleDbType.VarChar)
                    objParam25.Value = dtMortgageInvoice.Rows(i).Item("RRemark")
                    Dim objParam26 As OleDbParameter = Command.Parameters.Add("@IsRepayByHeadOffice", OleDbType.Boolean)
                    objParam26.Value = dtMortgageInvoice.Rows(i).Item("IsRepayByHeadOffice")
                    Dim objParam27 As OleDbParameter = Command.Parameters.Add("@PaybackAmt", OleDbType.Numeric)
                    objParam27.Value = dtMortgageInvoice.Rows(i).Item("PaybackAmt")
                    Dim objParam28 As OleDbParameter = Command.Parameters.Add("@PaybackInterestAmt", OleDbType.Numeric)
                    objParam28.Value = dtMortgageInvoice.Rows(i).Item("PaybackInterestAmt")

                    Command.ExecuteNonQuery()

                    dtMortgageInvocieItem = GetMortgageInvoiceItem(dtMortgageInvoice.Rows(i).Item("MortgageInvoiceID"))
                    If dtMortgageInvocieItem.Rows.Count > 0 Then
                        InsertMortgageInvoiceItem(dtMortgageInvocieItem, DatabasePath)

                    End If

                    'dtMortgagePayback = GetMortgagePayback(dtMortgageInvoice.Rows(i).Item("MortgageInvoiceID"))
                    'If dtMortgagePayback.Rows.Count > 0 Then
                    '    InsertMortgagePayback(dtMortgagePayback, DatabasePath)

                    'End If

                    'dtMortgageInterest = GetMortgageInterest(dtMortgageInvoice.Rows(i).Item("MortgageInvoiceID"))
                    'If dtMortgageInterest.Rows.Count > 0 Then
                    '    InsertMortgageInterest(dtMortgageInterest, DatabasePath)
                    '    'UpdateMortgageInterest(dtMortgageInterest)
                    'End If


                Catch ex As Exception
                    WriteEventlogs("InsertMortgageInvoice: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertMortgageInvoiceItem(ByVal dtMortgageInvoiceItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtMortgageInvoiceItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_MortgageInvoiceItem ( MortgageItemID,MortgageInvoiceID,GoldQualityID,ItemCategoryID,ItemNameID,ItemName,QTY,GoldTK,GoldTG,Amount,MortgageRate,IsDone,DonePercent,isPayback,MortgageItemCode)"
                    strCommandText += " Values (@MortgageItemID,@MortgageInvoiceID,@GoldQualityID,@ItemCategoryID,@ItemNameID,@ItemName,@QTY,@GoldTK,@GoldTG,@Amount,@MortgageRate,@IsDone,@DonePercent,@isPayback,@MortgageItemCode)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@MortgageItemID", OleDbType.VarChar)
                    objParam.Value = dtMortgageInvoiceItem.Rows(i).Item("MortgageItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@MortgageInvoiceID", OleDbType.VarChar)
                    objParam2.Value = dtMortgageInvoiceItem.Rows(i).Item("MortgageInvoiceID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam3.Value = dtMortgageInvoiceItem.Rows(i).Item("GoldQualityID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemCategoryID", OleDbType.VarChar)
                    objParam4.Value = dtMortgageInvoiceItem.Rows(i).Item("ItemCategoryID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam5.Value = dtMortgageInvoiceItem.Rows(i).Item("ItemNameID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemName", OleDbType.VarChar)
                    objParam6.Value = dtMortgageInvoiceItem.Rows(i).Item("ItemName")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam7.Value = dtMortgageInvoiceItem.Rows(i).Item("QTY")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam8.Value = dtMortgageInvoiceItem.Rows(i).Item("GoldTK")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam9.Value = dtMortgageInvoiceItem.Rows(i).Item("GoldTG")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Decimal)
                    objParam10.Value = dtMortgageInvoiceItem.Rows(i).Item("Amount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@MortgageRate", OleDbType.Numeric)
                    objParam11.Value = dtMortgageInvoiceItem.Rows(i).Item("MortgageRate")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@IsDone", OleDbType.Boolean)
                    objParam12.Value = dtMortgageInvoiceItem.Rows(i).Item("IsDone")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@DonePercent", OleDbType.VarChar)
                    objParam13.Value = dtMortgageInvoiceItem.Rows(i).Item("DonePercent")

                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@isPayback", OleDbType.Boolean)
                    objParam14.Value = dtMortgageInvoiceItem.Rows(i).Item("isPayback")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@MortgageItemCode", OleDbType.VarChar)
                    objParam15.Value = dtMortgageInvoiceItem.Rows(i).Item("MortgageItemCode")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertMortgageInvoiceItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertMortgagePayback(ByVal dtMortgagePayback As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Dim dtMortgagePaybackItem As New DataTable
            Connstr.Open()
            For i As Integer = 0 To dtMortgagePayback.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_MortgagePayback ( MortgagePaybackID,MortgageInvoiceID,FromDate,ToDate,PaybackAmount,PaidAmount,LastModifiedLoginUserName,LastModifiedDate,LocationID,PaybackDate,DiscountAmount,IsUpload,Remark,InterestAmt,TotalAmount,isDelete)"
                    strCommandText += " Values (@MortgagePaybackID,@MortgageInvoiceID,@FromDate,@ToDate,@PaybackAmount,@PaidAmount, @LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@PaybackDate, @DiscountAmount,@IsUpload,@Remark,@InterestAmt,@TotalAmount,@isDelete)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@MortgagePaybackID", OleDbType.VarChar)
                    objParam.Value = dtMortgagePayback.Rows(i).Item("MortgagePaybackID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@MortgageInvoiceID", OleDbType.VarChar)
                    objParam2.Value = dtMortgagePayback.Rows(i).Item("MortgageInvoiceID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@FromDate", OleDbType.Date)
                    objParam3.Value = dtMortgagePayback.Rows(i).Item("FromDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ToDate", OleDbType.Date)
                    objParam4.Value = dtMortgagePayback.Rows(i).Item("ToDate")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@PaybackAmount", OleDbType.Numeric)
                    objParam5.Value = dtMortgagePayback.Rows(i).Item("PaybackAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam6.Value = dtMortgagePayback.Rows(i).Item("PaidAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam7.Value = dtMortgagePayback.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtMortgagePayback.Rows(i).Item("LastModifiedDate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam9.Value = dtMortgagePayback.Rows(i).Item("LocationID")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PaybackDate", OleDbType.Date)
                    objParam10.Value = dtMortgagePayback.Rows(i).Item("PaybackDate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@DiscountAmount", OleDbType.Numeric)
                    objParam11.Value = dtMortgagePayback.Rows(i).Item("DiscountAmount")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam12.Value = dtMortgagePayback.Rows(i).Item("IsUpload")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam13.Value = dtMortgagePayback.Rows(i).Item("Remark")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@InterestAmt", OleDbType.Numeric)
                    objParam14.Value = dtMortgagePayback.Rows(i).Item("InterestAmt")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam15.Value = dtMortgagePayback.Rows(i).Item("TotalAmount")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@isDelete", OleDbType.Boolean)
                    objParam16.Value = dtMortgagePayback.Rows(i).Item("isDelete")

                    Command.ExecuteNonQuery()

                    dtMortgagePaybackItem = GetMortgagePaybackItem(dtMortgagePayback.Rows(i).Item("MortgagePaybackID"))
                    If dtMortgagePaybackItem.Rows.Count > 0 Then
                        InsertMortgagePaybackItem(dtMortgagePaybackItem, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("InsertMortgagePayback: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub

        Private Sub InsertMortgageReturn(ByVal dtMortgageReturn As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Dim dtMortgageReturnItem As New DataTable
            Connstr.Open()
            For i As Integer = 0 To dtMortgageReturn.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_MortgageReturn ( MortgageReturnID,MortgageInvoiceID,FromDate,ToDate,ReturnAmount,PaidAmount,InterestAmount,AddOrSub,LastLoginUserName,LastModifiedDate,LocationID,ReturnDate,IsUpload,Remark,IsDelete,TotalAmount)"
                    strCommandText += " Values (@MortgageReturnID,@MortgageInvoiceID,@FromDate,@ToDate,@ReturnAmount,@PaidAmount,@InterestAmount, @AddOrSub, @LastLoginUserName,@LastModifiedDate,@LocationID,@ReturnDate,@IsUpload,@Remark,@IsDelete,@TotalAmount)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@MortgageReturnID", OleDbType.VarChar)
                    objParam.Value = dtMortgageReturn.Rows(i).Item("MortgageReturnID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@MortgageInvoiceID", OleDbType.VarChar)
                    objParam2.Value = dtMortgageReturn.Rows(i).Item("MortgageInvoiceID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@FromDate", OleDbType.Date)
                    objParam3.Value = dtMortgageReturn.Rows(i).Item("FromDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ToDate", OleDbType.Date)
                    objParam4.Value = dtMortgageReturn.Rows(i).Item("ToDate")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@ReturnAmount", OleDbType.Numeric)
                    objParam5.Value = dtMortgageReturn.Rows(i).Item("ReturnAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam6.Value = dtMortgageReturn.Rows(i).Item("PaidAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@InterestAmount", OleDbType.Numeric)
                    objParam7.Value = dtMortgageReturn.Rows(i).Item("InterestAmount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam8.Value = dtMortgageReturn.Rows(i).Item("AddOrSub")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastLoginUserName", OleDbType.VarChar)
                    objParam9.Value = dtMortgageReturn.Rows(i).Item("LastLoginUserName")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam10.Value = dtMortgageReturn.Rows(i).Item("LastModifiedDate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam11.Value = dtMortgageReturn.Rows(i).Item("LocationID")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@ReturnDate", OleDbType.Date)
                    objParam12.Value = dtMortgageReturn.Rows(i).Item("ReturnDate")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam13.Value = dtMortgageReturn.Rows(i).Item("IsUpload")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam14.Value = dtMortgageReturn.Rows(i).Item("Remark")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@isDelete", OleDbType.Boolean)
                    objParam15.Value = dtMortgageReturn.Rows(i).Item("isDelete")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam16.Value = dtMortgageReturn.Rows(i).Item("TotalAmount")
 
             

                    Command.ExecuteNonQuery()

                    dtMortgageReturnItem = GetMortgageReturnItem(dtMortgageReturn.Rows(i).Item("MortgageReturnID"))
                    If dtMortgageReturnItem.Rows.Count > 0 Then
                        InsertMortgageReturnItem(dtMortgageReturnItem, DatabasePath)
                    End If


                Catch ex As Exception
                    WriteEventlogs("tbl_MortgageReturn: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Function GetMortgageReturnItem(ByVal MortgageReturnID As String)
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtMortgageReturnItem As DataTable

            Try

                strCommandText = " Select * FROM tbl_MortgageReturnItem where MortgageReturnID = @MortgageReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@MortgageReturnID", DbType.String, MortgageReturnID)
                dtMortgageReturnItem = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtMortgageReturnItem

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return New DataTable
            End Try
        End Function

        Private Sub InsertMortgageReturnItem(ByVal dtMortgageReturnItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim dtSaleInvoiceDetail As New DataTable
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtMortgageReturnItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_MortgageReturnItem( MortgageReturnItemID,MortgageReturnID,MortgageItemID,GoldQualityID,ItemName,GoldTK,GoldTG,Amount,IsDone,DonePercent)"
                    strCommandText += " Values (@MortgageReturnItemID,@MortgageReturnID,@MortgageItemID,@GoldQualityID,@ItemName,@GoldTK,@GoldTG, @Amount, @IsDone,@DonePercent)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@MortgageReturnItemID", OleDbType.VarChar)
                    objParam.Value = dtMortgageReturnItem.Rows(i).Item("MortgageReturnItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@MortgageReturnID", OleDbType.VarChar)
                    objParam2.Value = dtMortgageReturnItem.Rows(i).Item("MortgageReturnID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@MortgageItemID", OleDbType.VarChar)
                    objParam3.Value = dtMortgageReturnItem.Rows(i).Item("MortgageItemID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam4.Value = dtMortgageReturnItem.Rows(i).Item("GoldQualityID")
                    'Dim objParam5 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    'objParam5.Value = dtMortgageReturnItem.Rows(i).Item("TotalAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemName", OleDbType.VarChar)
                    objParam6.Value = dtMortgageReturnItem.Rows(i).Item("ItemName")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam7.Value = dtMortgageReturnItem.Rows(i).Item("GoldTK")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam8.Value = dtMortgageReturnItem.Rows(i).Item("GoldTG")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam9.Value = dtMortgageReturnItem.Rows(i).Item("Amount")
                    'Dim objParam10 As OleDbParameter = Command.Parameters.Add("@MortgageRate", OleDbType.Numeric)
                    'objParam10.Value = dtMortgageReturnItem.Rows(i).Item("MortgageRate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@IsDone", OleDbType.Boolean)
                    objParam11.Value = dtMortgageReturnItem.Rows(i).Item("IsDone")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@DonePercent", OleDbType.Numeric)
                    objParam12.Value = dtMortgageReturnItem.Rows(i).Item("DonePercent")
                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertMortgageReturnItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub


        Private Sub InsertMortgageInterest(ByVal dtMortgageInterest As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtMortgageInterest.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_MortgageInterest ( MortgageInterestID,MortgageInvoiceID,FromDate,ToDate,InterestAmount,PaidAmount,InterestPaidDate,DiscountAmount,LastModifiedLoginUserName,LastModifiedDate,LocationID,Remark,IsUpload,IsDelete,InterestMonth )"
                    strCommandText += " Values (@MortgageInterestID,@MortgageInvoiceID,@FromDate,@ToDate,@InterestAmount,@PaidAmount,@InterestPaidDate, @DiscountAmount, @LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@Remark,@IsUpload,@IsDelete,@InterestMonth )"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@MortgageInterestID", OleDbType.VarChar)
                    objParam.Value = dtMortgageInterest.Rows(i).Item("MortgageInterestID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@MortgageInvoiceID", OleDbType.VarChar)
                    objParam2.Value = dtMortgageInterest.Rows(i).Item("MortgageInvoiceID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@FromDate", OleDbType.Date)
                    objParam3.Value = dtMortgageInterest.Rows(i).Item("FromDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ToDate", OleDbType.Date)
                    objParam4.Value = dtMortgageInterest.Rows(i).Item("ToDate")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@InterestAmount", OleDbType.Numeric)
                    objParam5.Value = dtMortgageInterest.Rows(i).Item("InterestAmount")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam6.Value = dtMortgageInterest.Rows(i).Item("PaidAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@InterestPaidDate", OleDbType.Date)
                    objParam7.Value = dtMortgageInterest.Rows(i).Item("InterestPaidDate")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@DiscountAmount", OleDbType.Numeric)
                    objParam8.Value = dtMortgageInterest.Rows(i).Item("DiscountAmount")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam9.Value = dtMortgageInterest.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam10.Value = dtMortgageInterest.Rows(i).Item("LastModifiedDate")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam11.Value = dtMortgageInterest.Rows(i).Item("LocationID")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam12.Value = dtMortgageInterest.Rows(i).Item("Remark")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam13.Value = dtMortgageInterest.Rows(i).Item("IsUpload")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam14.Value = dtMortgageInterest.Rows(i).Item("IsDelete")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@InterestMonth", OleDbType.Numeric)
                    objParam15.Value = dtMortgageInterest.Rows(i).Item("InterestMonth")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertMortgageInterest: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertConsignmentSale(ByVal dtConsignmentSale As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            Dim dtConsignmentSaleItem As New DataTable
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtConsignmentSale.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ConsignmentSale ( ConsignmentSaleID,ConsignDate,WholesaleInvoiceID,StaffID,CustomerID,Remark,NetAmount,AddOrSub,Discount,PaidAmount,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsUpload,IsDelete,JC_IsUpload,PurchaseHeaderID,PurchaseAmount,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " Values (@ConsignmentSaleID,@ConsignDate,@WholesaleInvoiceID,@StaffID,@CustomerID,@Remark,@NetAmount,@AddOrSub,@Discount,@PaidAmount,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsUpload,@IsDelete,@JC_IsUpload,@PurchaseHeaderID,@PurchaseAmount,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ConsignmentSaleID", OleDbType.VarChar)
                    objParam.Value = dtConsignmentSale.Rows(i).Item("ConsignmentSaleID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ConsignDate", OleDbType.Date)
                    objParam2.Value = dtConsignmentSale.Rows(i).Item("ConsignDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@WholesaleInvoiceID", OleDbType.VarChar)
                    objParam3.Value = dtConsignmentSale.Rows(i).Item("WholesaleInvoiceID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@StaffID", OleDbType.VarChar)
                    objParam4.Value = dtConsignmentSale.Rows(i).Item("StaffID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@CustomerID", OleDbType.VarChar)
                    objParam5.Value = dtConsignmentSale.Rows(i).Item("CustomerID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam6.Value = dtConsignmentSale.Rows(i).Item("Remark")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@NetAmount", OleDbType.Numeric)
                    objParam7.Value = dtConsignmentSale.Rows(i).Item("NetAmount")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@AddOrSub", OleDbType.Numeric)
                    objParam8.Value = dtConsignmentSale.Rows(i).Item("AddOrSub")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@Discount", OleDbType.Numeric)
                    objParam9.Value = dtConsignmentSale.Rows(i).Item("Discount")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@PaidAmount", OleDbType.Numeric)
                    objParam10.Value = dtConsignmentSale.Rows(i).Item("PaidAmount")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam11.Value = dtConsignmentSale.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam12.Value = dtConsignmentSale.Rows(i).Item("LastModifiedDate")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam13.Value = dtConsignmentSale.Rows(i).Item("LocationID")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@IsUpload", OleDbType.Boolean)
                    objParam14.Value = dtConsignmentSale.Rows(i).Item("IsUpload")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam15.Value = dtConsignmentSale.Rows(i).Item("IsDelete")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@JC_IsUpload", OleDbType.Boolean)
                    objParam16.Value = dtConsignmentSale.Rows(i).Item("JC_IsUpload")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@PurchaseHeaderID", OleDbType.VarChar)
                    objParam17.Value = dtConsignmentSale.Rows(i).Item("PurchaseHeaderID")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@PurchaseAmount", OleDbType.Numeric)
                    objParam18.Value = dtConsignmentSale.Rows(i).Item("PurchaseAmount")
                    Dim objParam29 As OleDbParameter = Command.Parameters.Add("@MemberID", OleDbType.VarChar)
                    objParam29.Value = dtConsignmentSale.Rows(i).Item("MemberID")
                    Dim objParam30 As OleDbParameter = Command.Parameters.Add("@MemberName", OleDbType.VarChar)
                    objParam30.Value = dtConsignmentSale.Rows(i).Item("MemberName")
                    Dim objParam31 As OleDbParameter = Command.Parameters.Add("@MemberCode", OleDbType.VarChar)
                    objParam31.Value = dtConsignmentSale.Rows(i).Item("MemberCode")
                    Dim objParam32 As OleDbParameter = Command.Parameters.Add("@RedeemID", OleDbType.VarChar)
                    objParam32.Value = dtConsignmentSale.Rows(i).Item("RedeemID")
                    Dim objParam33 As OleDbParameter = Command.Parameters.Add("@TopupPoint", OleDbType.Numeric)
                    objParam33.Value = dtConsignmentSale.Rows(i).Item("TopupPoint")
                    Dim objParam34 As OleDbParameter = Command.Parameters.Add("@TopupValue", OleDbType.Numeric)
                    objParam34.Value = dtConsignmentSale.Rows(i).Item("TopupValue")
                    Dim objParam35 As OleDbParameter = Command.Parameters.Add("@RedeemPoint", OleDbType.Numeric)
                    objParam35.Value = dtConsignmentSale.Rows(i).Item("RedeemPoint")
                    Dim objParam36 As OleDbParameter = Command.Parameters.Add("@RedeemValue", OleDbType.Numeric)
                    objParam36.Value = dtConsignmentSale.Rows(i).Item("RedeemValue")
                    Dim objParam37 As OleDbParameter = Command.Parameters.Add("@IsRedeemInvoice", OleDbType.Boolean)
                    objParam37.Value = dtConsignmentSale.Rows(i).Item("IsRedeemInvoice")
                    Dim objParam38 As OleDbParameter = Command.Parameters.Add("@MemberDis", OleDbType.Numeric)
                    objParam38.Value = dtConsignmentSale.Rows(i).Item("MemberDis")
                    Dim objParam39 As OleDbParameter = Command.Parameters.Add("@MemberDiscountAmt", OleDbType.Numeric)
                    objParam39.Value = dtConsignmentSale.Rows(i).Item("MemberDiscountAmt")
                    Dim objParam40 As OleDbParameter = Command.Parameters.Add("@TransactionID", OleDbType.VarChar)
                    objParam40.Value = dtConsignmentSale.Rows(i).Item("TransactionID")
                    Dim objParam41 As OleDbParameter = Command.Parameters.Add("@InvoiceStatus", OleDbType.Numeric)
                    objParam41.Value = dtConsignmentSale.Rows(i).Item("InvoiceStatus")

                    Command.ExecuteNonQuery()

                    dtConsignmentSaleItem = GetConsignmentSaleItem(dtConsignmentSale.Rows(i).Item("ConsignmentSaleID"))
                    If dtConsignmentSaleItem.Rows.Count > 0 Then
                        InsertConsignmentSaleItem(dtConsignmentSaleItem, DatabasePath)
                    End If
                Catch ex As Exception
                    WriteEventlogs("InsertConsignmentSale: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertConsignmentSaleItem(ByVal dtConsignmentSaleItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtConsignmentSaleItem.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_ConsignmentSaleItem ( ConsignmentSaleItemID,ConsignmentSaleID,ForSaleID,ItemNameID,GoldQualityID,ItemCode,IsReturn,IsSale,SalesRate,ItemTK,ItemTG,GemsTK,GemsTG,WasteTK,WasteTG,GoldTK,GoldTG,GoldPrice,FixPrice)"
                    strCommandText += " Values (@ConsignmentSaleItemID,@ConsignmentSaleID,@ForSaleID,@ItemNameID,@GoldQualityID,@ItemCode,@IsReturn,@IsSale,@SalesRate,@ItemTK,@ItemTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@GoldTK,@GoldTG,@GoldPrice,@FixPrice)"

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@ConsignmentSaleItemID", OleDbType.VarChar)
                    objParam.Value = dtConsignmentSaleItem.Rows(i).Item("ConsignmentSaleItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ConsignmentSaleID", OleDbType.VarChar)
                    objParam2.Value = dtConsignmentSaleItem.Rows(i).Item("ConsignmentSaleID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                    objParam3.Value = dtConsignmentSaleItem.Rows(i).Item("ForSaleID")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@ItemNameID", OleDbType.VarChar)
                    objParam4.Value = dtConsignmentSaleItem.Rows(i).Item("ItemNameID")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@GoldQualityID", OleDbType.VarChar)
                    objParam5.Value = dtConsignmentSaleItem.Rows(i).Item("GoldQualityID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ItemCode", OleDbType.VarChar)
                    objParam6.Value = dtConsignmentSaleItem.Rows(i).Item("ItemCode")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@IsReturn", OleDbType.Boolean)
                    objParam7.Value = dtConsignmentSaleItem.Rows(i).Item("IsReturn")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsSale", OleDbType.Boolean)
                    objParam8.Value = dtConsignmentSaleItem.Rows(i).Item("IsSale")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@SalesRate", OleDbType.Numeric)
                    objParam9.Value = dtConsignmentSaleItem.Rows(i).Item("SalesRate")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@ItemTK", OleDbType.Decimal)
                    objParam10.Value = dtConsignmentSaleItem.Rows(i).Item("ItemTK")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@ItemTG", OleDbType.Decimal)
                    objParam11.Value = dtConsignmentSaleItem.Rows(i).Item("ItemTG")
                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@GemsTK", OleDbType.Decimal)
                    objParam12.Value = dtConsignmentSaleItem.Rows(i).Item("GemsTK")
                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@GemsTG", OleDbType.Decimal)
                    objParam13.Value = dtConsignmentSaleItem.Rows(i).Item("GemsTG")
                    Dim objParam14 As OleDbParameter = Command.Parameters.Add("@WasteTK", OleDbType.Decimal)
                    objParam14.Value = dtConsignmentSaleItem.Rows(i).Item("WasteTK")
                    Dim objParam15 As OleDbParameter = Command.Parameters.Add("@WasteTG", OleDbType.Decimal)
                    objParam15.Value = dtConsignmentSaleItem.Rows(i).Item("WasteTG")
                    Dim objParam16 As OleDbParameter = Command.Parameters.Add("@GoldTK", OleDbType.Decimal)
                    objParam16.Value = dtConsignmentSaleItem.Rows(i).Item("GoldTK")
                    Dim objParam17 As OleDbParameter = Command.Parameters.Add("@GoldTG", OleDbType.Decimal)
                    objParam17.Value = dtConsignmentSaleItem.Rows(i).Item("GoldTG")
                    Dim objParam18 As OleDbParameter = Command.Parameters.Add("@GoldPrice", OleDbType.Numeric)
                    objParam18.Value = dtConsignmentSaleItem.Rows(i).Item("GoldPrice")
                    Dim objParam19 As OleDbParameter = Command.Parameters.Add("@FixPrice", OleDbType.Numeric)
                    objParam19.Value = dtConsignmentSaleItem.Rows(i).Item("FixPrice")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertConsignmentSaleItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertDailyExpense(ByVal dtDailyExpense As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            Dim dtDailyExpenseItem As New DataTable
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtDailyExpense.Rows.Count - 1
                Try

                    strCommandText = " INSERT INTO tbl_DailyExpense "
                    strCommandText += " (DailyExpenseID, ExpenseDate, Remark, TotalAmount, LocationID,ReturnAmount,LastModifiedLoginUserName, LastModifiedDate,IsDelete,IsSync,IsBank) "
                    strCommandText += " Values( @DailyExpenseID, @ExpenseDate, @Remark, @TotalAmount, @LocationID,@ReturnAmount,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@IsBank) "

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyExpenseID", OleDbType.VarChar)
                    objParam.Value = dtDailyExpense.Rows(i).Item("DailyExpenseID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@ExpenseDate", OleDbType.Date)
                    objParam2.Value = dtDailyExpense.Rows(i).Item("ExpenseDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam3.Value = dtDailyExpense.Rows(i).Item("Remark")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam4.Value = dtDailyExpense.Rows(i).Item("TotalAmount")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam5.Value = dtDailyExpense.Rows(i).Item("LocationID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@ReturnAmount", OleDbType.Numeric)
                    objParam6.Value = dtDailyExpense.Rows(i).Item("ReturnAmount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam7.Value = dtDailyExpense.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtDailyExpense.Rows(i).Item("LastModifiedDate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam9.Value = dtDailyExpense.Rows(i).Item("IsDelete")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam10.Value = dtDailyExpense.Rows(i).Item("IsSync")
                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@IsBank", OleDbType.Boolean)
                    objParam11.Value = dtDailyExpense.Rows(i).Item("IsBank")

                    Command.ExecuteNonQuery()

                    dtDailyExpenseItem = GetDailyExpenseItem(dtDailyExpense.Rows(i).Item("DailyExpenseID"))
                    If dtDailyExpenseItem.Rows.Count > 0 Then
                        InsertDailyExpenseItem(dtDailyExpenseItem, DatabasePath)
                    End If
                Catch ex As Exception
                    WriteEventlogs("InsertDailyExpense: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertDailyExpenseItem(ByVal dtDailyExpenseItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtDailyExpenseItem.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_DailyExpenseItem "
                    strCommandText += " (DailyExpenseItemID, DailyExpenseID, Description, QTY, UnitPrice, Amount,Remark,LastModifiedDate,LastModifiedLoginUserName) "
                    strCommandText += " VALUES ( @DailyExpenseItemID, @DailyExpenseID, @Description, @QTY, @UnitPrice, @Amount,@Remark,@LastModifiedDate,@LastModifiedLoginUserName) "

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyExpenseItemID", OleDbType.VarChar)
                    objParam.Value = dtDailyExpenseItem.Rows(i).Item("DailyExpenseItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@DailyExpenseID", OleDbType.VarChar)
                    objParam2.Value = dtDailyExpenseItem.Rows(i).Item("DailyExpenseID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Description", OleDbType.VarChar)
                    objParam3.Value = dtDailyExpenseItem.Rows(i).Item("Description")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam4.Value = dtDailyExpenseItem.Rows(i).Item("QTY")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.Numeric)
                    objParam5.Value = dtDailyExpenseItem.Rows(i).Item("UnitPrice")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam6.Value = dtDailyExpenseItem.Rows(i).Item("Amount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam7.Value = dtDailyExpenseItem.Rows(i).Item("Remark")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtDailyExpenseItem.Rows(i).Item("LastModifiedDate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam9.Value = dtDailyExpenseItem.Rows(i).Item("LastModifiedLoginUserName")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertDailyExpenseItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertDailyIncome(ByVal dtDailyIncome As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            Dim dtDailyIncomeItem As New DataTable
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtDailyIncome.Rows.Count - 1
                Try

                    strCommandText = " INSERT INTO tbl_DailyIncome "
                    strCommandText += " (DailyIncomeID, IncomeDate, Remark, TotalAmount,LocationID,LastModifiedDate,LastModifiedLoginUserName,IsDelete,IsSync,IsBank) "
                    strCommandText += " Values( @DailyIncomeID, @IncomeDate, @Remark, @TotalAmount,@LocationID,@LastModifiedDate,@LastModifiedLoginUserName,@IsDelete,@IsSync,@IsBank) "

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyIncomeID", OleDbType.VarChar)
                    objParam.Value = dtDailyIncome.Rows(i).Item("DailyIncomeID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@IncomeDate", OleDbType.Date)
                    objParam2.Value = dtDailyIncome.Rows(i).Item("IncomeDate")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam3.Value = dtDailyIncome.Rows(i).Item("Remark")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@TotalAmount", OleDbType.Numeric)
                    objParam4.Value = dtDailyIncome.Rows(i).Item("TotalAmount")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam5.Value = dtDailyIncome.Rows(i).Item("LocationID")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam6.Value = dtDailyIncome.Rows(i).Item("LastModifiedDate")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam7.Value = dtDailyIncome.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam8.Value = dtDailyIncome.Rows(i).Item("IsDelete")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam9.Value = dtDailyIncome.Rows(i).Item("IsSync")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@IsBank", OleDbType.Boolean)
                    objParam10.Value = dtDailyIncome.Rows(i).Item("IsBank")

                    Command.ExecuteNonQuery()

                    dtDailyIncomeItem = GetDailyIncomeItem(dtDailyIncome.Rows(i).Item("DailyIncomeID"))
                    If dtDailyIncomeItem.Rows.Count > 0 Then
                        InsertDailyIncomeItem(dtDailyIncomeItem, DatabasePath)
                    End If
                Catch ex As Exception
                    WriteEventlogs("InsertDailyIncome: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertDailyIncomeItem(ByVal dtDailyIncomeItem As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""
            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtDailyIncomeItem.Rows.Count - 1
                Try

                    strCommandText = "INSERT INTO tbl_DailyIncomeItem "
                    strCommandText += " (DailyIncomeItemID, DailyIncomeID,Description,QTY,UnitPrice,Amount,Remark,LastModifiedDate,LastModifiedLoginUserName) "
                    strCommandText += " VALUES ( @DailyIncomeItemID, @DailyIncomeID,@Description, @QTY,@UnitPrice, @Amount,@Remark,@LastModifiedDate,@LastModifiedLoginUserName) "

                    Command = New OleDbCommand(strCommandText, Connstr)
                    Dim objParam As OleDbParameter = Command.Parameters.Add("@DailyIncomeItemID", OleDbType.VarChar)
                    objParam.Value = dtDailyIncomeItem.Rows(i).Item("DailyIncomeItemID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@DailyIncomeID", OleDbType.VarChar)
                    objParam2.Value = dtDailyIncomeItem.Rows(i).Item("DailyIncomeID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@Description", OleDbType.VarChar)
                    objParam3.Value = dtDailyIncomeItem.Rows(i).Item("Description")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@QTY", OleDbType.Numeric)
                    objParam4.Value = dtDailyIncomeItem.Rows(i).Item("QTY")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@UnitPrice", OleDbType.Numeric)
                    objParam5.Value = dtDailyIncomeItem.Rows(i).Item("UnitPrice")
                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Amount", OleDbType.Numeric)
                    objParam6.Value = dtDailyIncomeItem.Rows(i).Item("Amount")
                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam7.Value = dtDailyIncomeItem.Rows(i).Item("Remark")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam8.Value = dtDailyIncomeItem.Rows(i).Item("LastModifiedDate")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam9.Value = dtDailyIncomeItem.Rows(i).Item("LastModifiedLoginUserName")

                    Command.ExecuteNonQuery()

                Catch ex As Exception
                    WriteEventlogs("InsertDailyIncomeItem: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertCashReceipt(ByVal dtCashReceipt As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtCashReceipt.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_CashReceipt ( CashReceiptID,VoucherNo,PayDate,PayAmount,Remark,LocationID,Type,IsBank,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync,ReturnAdvanceID)"
                    strCommandText += " Values (@CashReceiptID,@VoucherNo,@PayDate,@PayAmount,@Remark,@LocationID,@Type,@IsBank,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@ReturnAdvanceID)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@CashReceiptID", OleDbType.VarChar)
                    objParam.Value = dtCashReceipt.Rows(i).Item("CashReceiptID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@VoucherNo", OleDbType.VarChar)
                    objParam2.Value = dtCashReceipt.Rows(i).Item("VoucherNo")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@PayDate", OleDbType.Date)
                    objParam3.Value = dtCashReceipt.Rows(i).Item("PayDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@PayAmount", OleDbType.Numeric)
                    objParam4.Value = dtCashReceipt.Rows(i).Item("PayAmount")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@Remark", OleDbType.VarChar)
                    objParam5.Value = dtCashReceipt.Rows(i).Item("Remark")

                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@Location", OleDbType.VarChar)
                    objParam6.Value = dtCashReceipt.Rows(i).Item("LocationID")

                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Type", OleDbType.VarChar)
                    objParam7.Value = dtCashReceipt.Rows(i).Item("Type")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@IsBank", OleDbType.Boolean)
                    objParam8.Value = dtCashReceipt.Rows(i).Item("IsBank")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedLoginUserName", OleDbType.VarChar)
                    objParam9.Value = dtCashReceipt.Rows(i).Item("LastModifiedLoginUserName")
                    Dim objParam10 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam10.Value = dtCashReceipt.Rows(i).Item("LastModifiedDate")

                    Dim objParam11 As OleDbParameter = Command.Parameters.Add("@IsDelete", OleDbType.Boolean)
                    objParam11.Value = dtCashReceipt.Rows(i).Item("IsDelete")

                    Dim objParam12 As OleDbParameter = Command.Parameters.Add("@IsSync", OleDbType.Boolean)
                    objParam12.Value = dtCashReceipt.Rows(i).Item("IsSync")

                    Dim objParam13 As OleDbParameter = Command.Parameters.Add("@ReturnAdvanceID", OleDbType.VarChar)
                    objParam13.Value = dtCashReceipt.Rows(i).Item("ReturnAdvanceID")

                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertStaff: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Private Sub InsertGeneralLedger(ByVal dtGenerledger As DataTable, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim strCommandText As String
            Dim FailIDStr As String = ""

            Dim Command As OleDbCommand
            'Connstr.Close()
            Connstr.Open()
            For i As Integer = 0 To dtGenerledger.Rows.Count - 1
                Try

                    strCommandText = "Insert into tbl_generalledgerbylocation ( GLByLocationID,LocationID,GLDate,Title,DebitAmount,CreditAmount,Type,MyanTitle,LastModifiedDate)"
                    strCommandText += " Values (@GLByLocationID,@LocationID,@GLDate,@Title,@DebitAmount,@CreditAmount,@Type,@MyanTitle,@LastModifiedDate)"
                    Command = New OleDbCommand(strCommandText, Connstr)

                    Dim objParam As OleDbParameter = Command.Parameters.Add("@GLByLocationID", OleDbType.VarChar)
                    objParam.Value = dtGenerledger.Rows(i).Item("GLByLocationID")

                    Dim objParam2 As OleDbParameter = Command.Parameters.Add("@LocationID", OleDbType.VarChar)
                    objParam2.Value = dtGenerledger.Rows(i).Item("LocationID")
                    Dim objParam3 As OleDbParameter = Command.Parameters.Add("@GLDate", OleDbType.Date)
                    objParam3.Value = dtGenerledger.Rows(i).Item("GLDate")
                    Dim objParam4 As OleDbParameter = Command.Parameters.Add("@Title", OleDbType.VarChar)
                    objParam4.Value = dtGenerledger.Rows(i).Item("Title")
                    Dim objParam5 As OleDbParameter = Command.Parameters.Add("@DebitAmount", OleDbType.Numeric)
                    objParam5.Value = dtGenerledger.Rows(i).Item("DebitAmount")

                    Dim objParam6 As OleDbParameter = Command.Parameters.Add("@CreditAmount", OleDbType.Numeric)
                    objParam6.Value = dtGenerledger.Rows(i).Item("CreditAmount")

                    Dim objParam7 As OleDbParameter = Command.Parameters.Add("@Type", OleDbType.VarChar)
                    objParam7.Value = dtGenerledger.Rows(i).Item("Type")
                    Dim objParam8 As OleDbParameter = Command.Parameters.Add("@MyanTitle", OleDbType.VarChar)
                    objParam8.Value = dtGenerledger.Rows(i).Item("MyanTitle")
                    Dim objParam9 As OleDbParameter = Command.Parameters.Add("@LastModifiedDate", OleDbType.Date)
                    objParam9.Value = dtGenerledger.Rows(i).Item("LastModifiedDate")

                    Command.ExecuteNonQuery()


                Catch ex As Exception
                    WriteEventlogs("InsertStaff: " & ex.Message)
                End Try
            Next

            ' Command.Connection.Close()
            Connstr.Close()
        End Sub
        Public Function UpdateGoldQuality(ByVal dtGoldQuality As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtGoldQuality.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_GoldQuality set  IsUpload=1 "
                    strCommandText += " where  GoldQualityID= @GoldQualityID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dtGoldQuality.Rows(i).Item("GoldQualityID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateGoldQuality : " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateCashReceipt(ByVal dtCashReceipt As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtCashReceipt.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_CashReceipt set  IsSync=1 "
                    strCommandText += " where  CashReceiptID= @CashReceiptID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@CashReceiptID", DbType.String, dtCashReceipt.Rows(i).Item("CashReceiptID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateCashReceipt : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateCustomer(ByVal dtCustomer As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtCustomer.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_Customer set  IsUpload=1 "
                    strCommandText += " where  Customerid= @Customerid"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@Customerid", DbType.String, dtCustomer.Rows(i).Item("Customerid"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateCustomer : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateSupplier(ByVal dtSupplier As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtSupplier.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_Supplier set  IsUpload=1 "
                    strCommandText += " where  SupplierID= @SupplierID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@SupplierID", DbType.String, dtSupplier.Rows(i).Item("SupplierID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateSupplier : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateStaff(ByVal dtStaff As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtStaff.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_Staff set  IsUpload=1 "
                    strCommandText += " where  StaffID= @StaffID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dtStaff.Rows(i).Item("StaffID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateStaff : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateCurrentPrice(ByVal dtCurrentPrice As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtCurrentPrice.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_StandardRate set  IsUpload=1 "
                    strCommandText += " where  DefineID= @DefineID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@DefineID", DbType.String, dtCurrentPrice.Rows(i).Item("DefineID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateCurrentPrice : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateItemCategory(ByVal dtItemCategory As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtItemCategory.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_ItemCategory set  IsUpload=1 "
                    strCommandText += " where  ItemCategoryID= @ItemCategoryID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dtItemCategory.Rows(i).Item("ItemCategoryID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateItemCategory : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateItemName(ByVal dtItemName As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtItemName.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_ItemName set  IsUpload=1 "
                    strCommandText += " where  ItemNameID= @ItemNameID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dtItemName.Rows(i).Item("ItemNameID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateItemName : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateGoldSmith(ByVal dtGoldSmith As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtGoldSmith.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_GoldSmith set  IsUpload=1 "
                    strCommandText += " where  GoldSmithID= @GoldSmithID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@GoldSmithID", DbType.String, dtGoldSmith.Rows(i).Item("GoldSmithID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateGoldSmith : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateGemsCategory(ByVal dtGemsCategory As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtGemsCategory.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_GemsCategory set  IsUpload=1 "
                    strCommandText += " where  GemsCategoryID= @GemsCategoryID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dtGemsCategory.Rows(i).Item("GemsCategoryID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateGemsCategory : " & ex.Message)

                End Try
            Next
            Return ""

        End Function

        Public Function UpdateWaste(ByVal dtWaste As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtWaste.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_WasteSetupHeader set  IsUpload=1 "
                    strCommandText += " where  WasteSetupHeaderID= @WasteSetupHeaderID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@WasteSetupHeaderID", DbType.String, dtWaste.Rows(i).Item("WasteSetupHeaderID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateWasteSetup : " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateLocation(ByVal dtLocation As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtLocation.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_Location set  IsUpload=1 "
                    strCommandText += " where  LocationID= @LocationID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dtLocation.Rows(i).Item("LocationID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateLocation : " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateTransfer(ByVal dtTransfer As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtTransfer.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_Transfer set  IsSync=1 "
                    strCommandText += " where  TransferID= @TransferID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@TransferID", DbType.String, dtTransfer.Rows(i).Item("TransferID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateTransfer : " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateTransferReturn(ByVal dtTransferReturn As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtTransferReturn.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_TransferReturn set  IsUpload=1 "
                    strCommandText += " where  TransferReturnID= @TransferReturnID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@TransferReturnID", DbType.String, dtTransferReturn.Rows(i).Item("TransferReturnID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateTransferReturn : " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateForSale(ByVal dtForSale As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtForSale.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_ForSale set  IsSync=1 "
                    strCommandText += " where  ForSaleID= @ForSaleID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dtForSale.Rows(i).Item("ForSaleID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateForSaleData : " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateSaleInvoice(ByVal dtSaleInvoice As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtSaleInvoice.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_SaleInvoiceHeader set  IsUpload=1 "
                    strCommandText += " where  SaleInvoiceHeaderID= @SaleInvoiceHeaderID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@SaleInvoiceHeaderID", DbType.String, dtSaleInvoice.Rows(i).Item("SaleInvoiceHeaderID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateSaleInvoice : " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateWholeSaleReturn(ByVal dtWholeSaleReturn As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtWholeSaleReturn.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_WholeSaleReturn set  IsUpload=1 "
                    strCommandText += " where  WholeSaleReturnID= @WholeSaleReturnID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@WholeSaleReturnID", DbType.String, dtWholeSaleReturn.Rows(i).Item("WholeSaleReturnID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateWholeSaleReturn: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateWholeSaleInvoice(ByVal dtWholeSaleInvoice As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtWholeSaleInvoice.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_WholeSaleInvoice set  IsUpload=1 "
                    strCommandText += " where  WholeSaleInvoiceID= @WholeSaleInvoiceID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@WholeSaleInvoiceID", DbType.String, dtWholeSaleInvoice.Rows(i).Item("WholeSaleInvoiceID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateWholeSaleInvoice: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateSaleVolume(ByVal dtSaleVolume As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtSaleVolume.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_SalesVolume set  IsSync=1 "
                    strCommandText += " where  SalesVolumeID= @SalesVolumeID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@SalesVolumeID", DbType.String, dtSaleVolume.Rows(i).Item("SalesVolumeID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateSaleVolume: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateSaleGems(ByVal dtSaleGmes As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtSaleGmes.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_SaleGems set  IsSync=1 "
                    strCommandText += " where  SaleGemsID= @SaleGemsID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@SaleGemsID", DbType.String, dtSaleGmes.Rows(i).Item("SaleGemsID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateSaleGems: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateReturnAdvance(ByVal dtReturnAdvance As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtReturnAdvance.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_ReturnAdvance set  IsSync=1 "
                    strCommandText += " where  ReturnAdvanceID= @ReturnAdvanceID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@ReturnAdvanceID", DbType.String, dtReturnAdvance.Rows(i).Item("ReturnAdvanceID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateReturnAdvance: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateReturnRepairHeader(ByVal dtReturnRepairHeader As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtReturnRepairHeader.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_ReturnRepairHeader set  IsSync=1 "
                    strCommandText += " where  ReturnRepairID= @ReturnRepairID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@ReturnRepairID", DbType.String, dtReturnRepairHeader.Rows(i).Item("ReturnRepairID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateReturnRepairHeader: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateRepairHeader(ByVal dtRepairHeader As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtRepairHeader.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_RepairHeader set  IsSync=1 "
                    strCommandText += " where  RepairID= @RepairID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@RepairID", DbType.String, dtRepairHeader.Rows(i).Item("RepairID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateRepairHeader: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdatePurchaseOutItem(ByVal dtPurchaseOutItem As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtPurchaseOutItem.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_PurchaseOutItem set  IsSync=1 "
                    strCommandText += " where  PurchaseOutID= @PurchaseOutID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@PurchaseOutID", DbType.String, dtPurchaseOutItem.Rows(i).Item("PurchaseOutID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdatePurchaseOutItem: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdatePurchaseHeader(ByVal dtPurchaseHeader As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtPurchaseHeader.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_PurchaseHeader set  IsUpload=1 "
                    strCommandText += " where  PurchaseHeaderID= @PurchaseHeaderID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dtPurchaseHeader.Rows(i).Item("PurchaseHeaderID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdatePurchaseHeader: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdatePurchaseFromSupplier(ByVal dtPurchaseFromSupplier As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtPurchaseFromSupplier.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_PurchaseFromSupplier set  IsSync=1 "
                    strCommandText += " where  PurchaseFromSupplierID= @PurchaseFromSupplierID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@PurchaseFromSupplierID", DbType.String, dtPurchaseFromSupplier.Rows(i).Item("PurchaseFromSupplierID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdatePurchaseFromSupplier: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateOrderInvoice(ByVal dtOrderInvoice As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtOrderInvoice.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_OrderInvoice set  IsSync=1 "
                    strCommandText += " where  OrderInvoiceID= @OrderInvoiceID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@OrderInvoiceID", DbType.String, dtOrderInvoice.Rows(i).Item("OrderInvoiceID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateOrderInvoice: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateOrderReturnHeader(ByVal dtOrderReturnHeader As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtOrderReturnHeader.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_OrderReturnHeader set  IsSync=1 "
                    strCommandText += " where  OrderReturnHeaderID= @OrderReturnHeaderID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@OrderReturnHeaderID", DbType.String, dtOrderReturnHeader.Rows(i).Item("OrderReturnHeaderID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateOrderReturnHeader: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateMortgageInvoice(ByVal dtMortgageInvoice As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtMortgageInvoice.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_MortgageInvoice set  IsUpload=1 "
                    strCommandText += " where  MortgageInvoiceID= @MortgageInvoiceID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceID", DbType.String, dtMortgageInvoice.Rows(i).Item("MortgageInvoiceID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateMortgageInvoice: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateMortgageInterest(ByVal dtMortgageInterest As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtMortgageInterest.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_MortgageInterest set  IsUpload=1 "
                    strCommandText += " where  MortgageInvoiceID= @MortgageInvoiceID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceID", DbType.String, dtMortgageInterest.Rows(i).Item("MortgageInvoiceID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateMortgageInterest: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateConsignmentSale(ByVal dtConsignmentSale As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtConsignmentSale.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_ConsignmentSale set  IsUpload=1 "
                    strCommandText += " where  ConsignmentSaleiD= @ConsignmentSaleiD"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@ConsignmentSaleiD", DbType.String, dtConsignmentSale.Rows(i).Item("ConsignmentSaleiD"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateConsignmentSale: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateDailyExpense(ByVal dtDailyExpense As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtDailyExpense.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_DailyExpense set  IsSync=1 "
                    strCommandText += " where  DailyExpenseID= @DailyExpenseID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@DailyExpenseID", DbType.String, dtDailyExpense.Rows(i).Item("DailyExpenseID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateDailyExpense: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
        Public Function UpdateDailyIncome(ByVal dtDailyIncome As DataTable)
            Dim strCommandText As String = ""
            Dim DBCommSQL As DbCommand
            For i As Integer = 0 To dtDailyIncome.Rows.Count - 1
                Try

                    strCommandText = "Update tbl_DailyIncome set  IsSync=1 "
                    strCommandText += " where  DailyIncomeID= @DailyIncomeID"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@DailyIncomeID", DbType.String, dtDailyIncome.Rows(i).Item("DailyIncomeID"))
                    DB.ExecuteNonQuery(DBCommSQL)

                    DBCommSQL.Connection.Close()
                Catch ex As Exception
                    WriteEventlogs("UpdateDailyIncome: " & ex.Message)

                End Try
            Next
            Return ""

        End Function
#Region "Update Expense Item 27/05/2019"

        'Public Function UpdateExpense(ByVal dtExpense As DataTable)
        '    Dim strCommandText As String = ""
        '    Dim DBCommSQL As DbCommand
        '    For i As Integer = 0 To dtExpense.Rows.Count - 1
        '        Try

        '            strCommandText = "Update tbl_DailyExpense set  IsUpload=1 "
        '            strCommandText += " where  DailyExpenseID= @DailyExpenseID"
        '            DBCommSQL = DB.GetSqlStringCommand(strCommandText)
        '            DB.AddInParameter(DBCommSQL, "@DailyExpenseID", DbType.String, dtExpense.Rows(i).Item("DailyExpenseID"))
        '            DB.ExecuteNonQuery(DBCommSQL)

        '            DBCommSQL.Connection.Close()
        '        Catch ex As Exception
        '            WriteEventlogs("UpdateExpense : " & ex.Message)

        '        End Try
        '    Next
        '    Return ""

        'End Function
        'Public Function UpdateIncome(ByVal dtExpense As DataTable)
        '    Dim strCommandText As String = ""
        '    Dim DBCommSQL As DbCommand
        '    For i As Integer = 0 To dtExpense.Rows.Count - 1
        '        Try

        '            strCommandText = "Update tbl_DailyIncome set  IsUpload=1 "
        '            strCommandText += " where  DailyIncomeID= @DailyIncomeID"
        '            DBCommSQL = DB.GetSqlStringCommand(strCommandText)
        '            DB.AddInParameter(DBCommSQL, "@DailyIncomeID", DbType.String, dtExpense.Rows(i).Item("DailyIncomeID"))
        '            DB.ExecuteNonQuery(DBCommSQL)

        '            DBCommSQL.Connection.Close()
        '        Catch ex As Exception
        '            WriteEventlogs("UpdateIncome : " & ex.Message)

        '        End Try
        '    Next
        '    Return ""

        'End Function
#End Region

        Public Function ImportData(ByVal DatabasePath As String, ByVal BranchID As String, ByVal ImportDataType As String) As Boolean Implements IDatabaseExportImportDA.ImportData
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))
            Dim DBcomm As DbCommand
            Dim da As OleDbDataAdapter
            Dim tmpexit As New DataTable
            Dim tmpdt As New DataTable
            Dim strCommandText As String = ""
            Dim tmpdttransaction As New DataTable
            ' Dim objExportDataInfo As New CommonInfo.ExportDataInfo

            Dim FromDate As Date
            Dim ToDate As Date

            'Get To Mail And CC Mail From Export Data
            'objExportDataInfo = GetToMailCCMail(ImportDataType)
            'With objExportDataInfo
            '    _ToEMail = .ToMail
            '    _CCMail = .CCMail
            'End With

            Try
                'eventLog1.WriteEntry("Successfully Connection Start")
                'If (Connstr.State = ConnectionState.Open) Then Connstr.Close()
                'Connstr.Open()
                'eventLog1.WriteEntry("Successfully Connection Open " & Connstr.ToString())

                'Dim tblrestrictions As String() = New String() {Nothing, Nothing, Nothing, "TABLE"}
                'tmpexit = Connstr.GetSchema("tables", tblrestrictions)
                ' eventLog1.WriteEntry("Get tmpexit ")
                If Not ImportDataType.Contains("Master") Then
                    'tbl_Transaction
                    'eventLog1.WriteEntry("Select Transaction ")
                    strCommandText = "SELECT * FROM tbl_Transaction "
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdttransaction = New DataTable
                    da.Fill(tmpdttransaction)
                    If tmpdttransaction.Rows.Count > 0 Then
                        For i As Integer = 0 To tmpdttransaction.Rows.Count - 1
                            If tmpdttransaction.Rows(i).Item("TransactionName") = "Other-Transaction" Then
                                FromDate = tmpdttransaction.Rows(i).Item("FromDate")
                                ToDate = tmpdttransaction.Rows(i).Item("ToDate")
                                BranchID = tmpdttransaction.Rows(i).Item("CompanyID")
                                Exit For
                            End If
                        Next
                    End If



                End If



                If ImportDataType.Contains("Master") Then

                    'CheckImportItemCategory(DatabasePath)
                    'CheckImportItemGroup(DatabasePath)
                    'CheckImportColor(DatabasePath)
                    'CheckImportDesign(DatabasePath)
                    'CheckImportDiamondDesign(DatabasePath)
                    'CheckImportDesignation(DatabasePath)
                    'CheckImportGoldQuality(DatabasePath)

                    'tbl_GoldQyality
                    strCommandText = "SELECT  * FROM tbl_GoldQuality"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertGoldQuality(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_Measurement
                    'strCommandText = "SELECT  * FROM tbl_Measurement"
                    'DBcomm = Nothing
                    'DBcomm = Connstr.CreateCommand
                    'DBcomm.CommandType = CommandType.Text
                    'DBcomm.CommandText = strCommandText
                    'da = New OleDbDataAdapter
                    'da.SelectCommand = DBcomm
                    'tmpdt = New DataTable
                    'da.Fill(tmpdt)
                    'If tmpdt.Rows.Count > 0 Then
                    '    ImportInsertMeasurement(Connstr, da, DBcomm, tmpdt, BranchID)
                    'End If

                    'tbl_ItemName
                    strCommandText = "SELECT  * FROM tbl_ItemName"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertItemName(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_GemsCategory
                    strCommandText = "SELECT  * FROM tbl_GemsCategory"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertGemsCategory(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If


                    'tbl_WasteSetupHeader
                    strCommandText = "SELECT  * FROM tbl_WasteSetupHeader"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertWaste(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_GoldSmith
                    strCommandText = "SELECT  * FROM tbl_GoldSmith"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertGoldSmith(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    ''tbl_ItemCategory
                    strCommandText = "SELECT  * FROM tbl_ItemCategory"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertItemCategory(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    ''tbl_Location
                    strCommandText = "SELECT  * FROM tbl_Location"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertLocation(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If
                    da.Fill(tmpdt)

                ElseIf ImportDataType.Contains("Customer,Supplier,Sale-Person") Then

                    'tbl_Customer
                    strCommandText = "SELECT  * FROM tbl_Customer"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertCustomer(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If


                    'tbl_Supplier
                    strCommandText = "SELECT  * FROM tbl_Supplier"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertSupplier(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_Staff
                    strCommandText = "SELECT  * FROM tbl_Staff"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertStaff(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                ElseIf ImportDataType.Contains("Current-Price") Then
                    'tbl_StandardRate
                    strCommandText = "SELECT  * FROM tbl_StandardRate"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertCurrentPrice(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_DiamondPriceRate
                    strCommandText = "SELECT  * FROM tbl_DiamondPriceRate"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertDiamondPrice(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                ElseIf ImportDataType.Contains("Stock") Then
                    'tbl_Transfer
                    strCommandText = "SELECT  * FROM tbl_Transfer  where LocationID= " & "'" & Global_CurrentLocationID & "'"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertTransfer(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If
                    'tbl_transferloosediamond
                    strCommandText = "SELECT  * FROM tbl_TransferLooseDiamond  where LocationID= " & "'" & Global_CurrentLocationID & "'"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertTransferDiamond(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If
                ElseIf ImportDataType.Contains("Shop-Item") Then

                    strCommandText = "SELECT  * FROM tbl_ForSale  "
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertShopItem(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                ElseIf ImportDataType.Contains("Transfer-Return") Then
                    'tbl_TransferReturn
                    strCommandText = "SELECT  * FROM tbl_TransferReturn "
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertTransferReturn(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If
                    'tbl_TransferReturnDiamond
                    strCommandText = "SELECT  * FROM tbl_TransferReturnDiamond "
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertTransferDiamondReturn(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If
                ElseIf ImportDataType.Contains("Other-Transaction") Then

                    'tbl_SaleInvoiceHeader
                    strCommandText = "SELECT  * FROM tbl_SaleInvoiceHeader"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertSaleInvoiceHeader(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_WholeSaleReturn
                    strCommandText = "SELECT  * FROM tbl_WholeSaleReturn"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertWholeSaleReturn(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_WholeSaleInvoice
                    strCommandText = "SELECT  * FROM tbl_WholeSaleInvoice"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertWholeSaleInvoice(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_SalesVolume
                    strCommandText = "SELECT  * FROM tbl_SalesVolume"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertSalesVolume(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_SaleGems
                    strCommandText = "SELECT  * FROM tbl_SaleGems"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertSaleGems(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_ReturnAdvance
                    strCommandText = "SELECT  * FROM tbl_ReturnAdvance"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertReturnAdvance(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_RepairHeader
                    strCommandText = "SELECT  * FROM tbl_RepairHeader"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertRepairHeader(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_ReturnRepairHeader
                    strCommandText = "SELECT  * FROM tbl_ReturnRepairHeader"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertReturnRepairHeader(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_PurchaseHeader
                    strCommandText = "SELECT  * FROM tbl_PurchaseHeader"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertPurchaseHeader(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_SaleInvoiceHeader
                    strCommandText = "SELECT  * FROM tbl_SaleLooseDiamondHeader"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertSaleLooseDiamondHeader(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_PurchaseOutItem
                    'strCommandText = "SELECT  * FROM tbl_PurchaseOutItem"
                    'DBcomm = Nothing
                    'DBcomm = Connstr.CreateCommand
                    If tmpdt.Rows.Count > 0 Then
                        'DBcomm.CommandType = CommandType.Text
                        'DBcomm.CommandText = strCommandText
                        'da = New OleDbDataAdapter
                        'da.SelectCommand = DBcomm
                        'tmpdt = New DataTable
                        'da.Fill(tmpdt)
                        'If tmpdt.Rows.Count > 0 Then
                        '    ImportInsertPurchaseOutItem(Connstr, da, DBcomm, tmpdt, BranchID)
                        'End If

                        'tbl_PurchaseFromSupplier
                        strCommandText = "SELECT  * FROM tbl_PurchaseFromSupplier"
                        DBcomm = Nothing
                        DBcomm = Connstr.CreateCommand
                        DBcomm.CommandType = CommandType.Text
                        DBcomm.CommandText = strCommandText
                        da = New OleDbDataAdapter
                        da.SelectCommand = DBcomm
                        tmpdt = New DataTable
                        da.Fill(tmpdt)
                        ImportInsertPurchaseFromSupplier(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_OrderInvoice
                    strCommandText = "SELECT  * FROM tbl_OrderInvoice"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertOrderInvoice(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_OrderReturnHeader()
                    strCommandText = "SELECT  * FROM tbl_OrderReturnHeader"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertOrderReturnHeader(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_MortgageInvoice
                    strCommandText = "SELECT  * FROM tbl_MortgageInvoice"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertMortgageInvoice(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_MortgageInterest
                    strCommandText = "SELECT  * FROM tbl_MortgageInterest"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertMortgageInterest(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_MortgagePayback
                    strCommandText = "SELECT  * FROM tbl_MortgagePayback"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertMortgagePayback(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_MortgageReturn
                    strCommandText = "SELECT  * FROM tbl_MortgageReturn"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertMortgageReturn(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_ConsignmentSale
                    strCommandText = "SELECT  * FROM tbl_ConsignmentSale"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertConsignmentSale(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_CashReceipt
                    strCommandText = "SELECT  * FROM tbl_CashReceipt"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertCashReceipt(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_GeneralLedgerByLocation
                    strCommandText = "SELECT  * FROM tbl_generalledgerbylocation"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertGeneralLedger(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                ElseIf ImportDataType.Contains("Expense-Income") Then

                    'tbl_DailyExpense
                    strCommandText = "SELECT  * FROM tbl_DailyExpense"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertDailyExpense(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If

                    'tbl_DailyIncome
                    strCommandText = "SELECT  * FROM tbl_DailyIncome"
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt = New DataTable
                    da.Fill(tmpdt)
                    If tmpdt.Rows.Count > 0 Then
                        ImportInsertDailyIncome(Connstr, da, DBcomm, tmpdt, BranchID)
                    End If
                End If


            Catch ex As Exception
                WriteEventlogs("ImportData : " & ex.Message)
                Return False
            Finally
                If (Connstr.State = ConnectionState.Open) Then Connstr.Close()
            End Try

            Return True
        End Function

        Private Function ImportInsertGoldQuality(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteGoldQuality(dr)

                    strCommandText = "Insert into tbl_GoldQuality (GoldQualityID,GoldQuality,Prefix,IsGramRate, MultiplyBy, DividedBy, IsSolidGold,IsDelete,IsUpload,LocationID,LastModifiedDate,BarcodeStatus)"
                    strCommandText += " Values (@GoldQualityID,@GoldQuality,@Prefix,@IsGramRate, @MultiplyBy, @DividedBy, @IsSolidGold,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate,@BarcodeStatus)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQuality", DbType.String, dr.Item("GoldQuality"))
                    DB.AddInParameter(DBCommSQL, "@Prefix", DbType.String, dr.Item("Prefix"))
                    DB.AddInParameter(DBCommSQL, "@IsGramRate", DbType.Boolean, dr.Item("IsGramRate"))
                    DB.AddInParameter(DBCommSQL, "@MultiplyBy", DbType.Decimal, dr.Item("MultiplyBy"))
                    DB.AddInParameter(DBCommSQL, "@DividedBy", DbType.Decimal, dr.Item("DividedBy"))
                    DB.AddInParameter(DBCommSQL, "@IsSolidGold", DbType.Boolean, dr.Item("IsSolidGold"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@BarcodeStatus", DbType.Int32, dr.Item("BarcodeStatus"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertGoldQuality: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertGoldQuality : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertMeasurement(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteMeasurement(dr)

                    strCommandText = " INSERT INTO tbl_Measurement(FromMeasurement,ToMeasurement,Equivalent) VALUES (@FromMeasurement,@ToMeasurement,@Equivalent)"
                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@FromMeasurement", DbType.String, dr.Item("FromMeasurement"))
                    DB.AddInParameter(DBCommSQL, "@ToMeasurement", DbType.String, dr.Item("ToMeasurement"))
                    DB.AddInParameter(DBCommSQL, "@Equivalent", DbType.Decimal, dr.Item("Equivalent"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertMeasurement: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMeasurement : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertItemCategory(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteItemCategory(dr)

                    strCommandText = "Insert into tbl_ItemCategory(ItemCategoryID,ItemCategory,Prefix,ItemTaxPer,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@ItemCategoryID,@ItemCategory,@Prefix,@ItemTaxPer,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategory", DbType.String, dr.Item("ItemCategory"))
                    DB.AddInParameter(DBCommSQL, "@Prefix", DbType.String, dr.Item("Prefix"))
                    DB.AddInParameter(DBCommSQL, "@ItemTaxPer", DbType.Decimal, dr.Item("ItemTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertItemCategory: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertItemCategory : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertItemName(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteItemName(dr)

                    strCommandText = "Insert into tbl_ItemName (ItemNameID,ItemName,ItemCategoryID,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@ItemNameID,@ItemName,@ItemCategoryID,@IsDelete,@isUpload,@LocationID,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@ItemName", DbType.String, dr.Item("ItemName"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertItemName: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertItemName : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertGemsCategory(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteGemsCategory(dr)

                    strCommandText = "Insert into tbl_GemsCategory (GemsCategoryID,GemsCategory,StoneType,GemTaxPer,IsDelete,IsUpload,LocationID,LastModifiedDate,Prefix)"
                    strCommandText += " Values (@GemsCategoryID,@GemsCategory,@StoneType,@GemTaxPer,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate,@Prefix)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategory", DbType.String, dr.Item("GemsCategory"))
                    DB.AddInParameter(DBCommSQL, "@StoneType", DbType.String, dr.Item("StoneType"))
                    DB.AddInParameter(DBCommSQL, "@GemTaxPer", DbType.Decimal, dr.Item("GemTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@Prefix", DbType.String, dr.Item("Prefix"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertGemsCategory: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertGemsCategory : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertGoldSmith(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteGoldSmith(dr)

                    strCommandText = "Insert into tbl_GoldSmith ( GoldSmithID,GoldSmithCode,Name,Address,Phone,Remark,IsInactive,LastModifiedDate,IsDelete,IsUpload,LocationID)"
                    strCommandText += " Values (@GoldSmithID,@GoldSmithCode,@Name,@Address,@Phone,@Remark,@IsInactive,@LastModifiedDate,@IsDelete,@IsUpload,@LocationID)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@GoldSmithID", DbType.String, dr.Item("GoldSmithID"))
                    DB.AddInParameter(DBCommSQL, "@GoldSmithCode", DbType.String, dr.Item("GoldSmithCode"))
                    DB.AddInParameter(DBCommSQL, "@Name", DbType.String, dr.Item("Name"))
                    DB.AddInParameter(DBCommSQL, "@Address", DbType.String, dr.Item("Address"))
                    DB.AddInParameter(DBCommSQL, "@Phone", DbType.String, dr.Item("Phone"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsInactive", DbType.Boolean, dr.Item("IsInactive"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.Date, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertGoldSmith: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertGoldSmith : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertWaste(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteWaste(dr)

                    strCommandText = "Insert into tbl_WasteSetupHeader (WasteSetupHeaderID,ItemCategoryID,ItemNameID,IsUpload,IsDelete,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@WasteSetupHeaderID,@ItemCategoryID,@ItemNameID,@IsUpload,@IsDelete,@LocationID,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@WasteSetupHeaderID", DbType.String, dr.Item("WasteSetupHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertWaste: " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                   & " FROM tbl_WasteSetupDetail where WasteSetupHeaderID ='" & dr.Item("WasteSetupHeaderID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteWasteItem(dr)
                    ImportInsertWasteItem(Connstr, da, DBcomm, tmpdt2, dr.Item("WasteSetupHeaderID"), dr.Item("LocationID"))

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertWaste : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertWasteItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_WasteSetupDetail (WasteSetupHeaderID,WasteSetupDetailID,GoldQualityID,MinNetWeightTK,MinNetWeightTG,MaxNetWeightTK,MaxNetWeightTG,MinWeightTKForSale,MinWeightTGForSale )"
                    strCommandText += " Values (@WasteSetupHeaderID,@WasteSetupDetailID,@GoldQualityID,@MinNetWeightTK,@MinNetWeightTG,@MaxNetWeightTK,@MaxNetWeightTG,@MinWeightTKForSale,@MinWeightTGForSale)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@WasteSetupHeaderID", DbType.String, dr.Item("WasteSetupHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@WasteSetupDetailID", DbType.String, dr.Item("WasteSetupDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@MinNetWeightTK", DbType.Decimal, dr.Item("MinNetWeightTK"))
                    DB.AddInParameter(DBCommSQL, "@MinNetWeightTG", DbType.Decimal, dr.Item("MinNetWeightTG"))
                    DB.AddInParameter(DBCommSQL, "@MaxNetWeightTK", DbType.Decimal, dr.Item("MaxNetWeightTK"))
                    DB.AddInParameter(DBCommSQL, "@MaxNetWeightTG", DbType.Decimal, dr.Item("MaxNetWeightTG"))
                    DB.AddInParameter(DBCommSQL, "@MinWeightTKForSale", DbType.Decimal, dr.Item("MinWeightTKForSale"))
                    DB.AddInParameter(DBCommSQL, "@MinWeightTGForSale", DbType.Decimal, dr.Item("MinWeightTGForSale"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertWasteItem: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertWasteItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertLocation(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteLocation(dr)

                    strCommandText = "Insert into tbl_Location(LocationID,Location,Address,Phone,Remark15,RemarkDone,IsDelete,IsUpload,CurrentLocationID,LastModifiedDate,IsHeadOffice)"
                    strCommandText += " Values (@LocationID,@Location,@Address,@Phone,@Remark15,@RemarkDone,@IsDelete,@IsUpload,@CurrentLocationID,@LastModifiedDate,@IsHeadOffice)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@Location", DbType.String, dr.Item("Location"))
                    DB.AddInParameter(DBCommSQL, "@Address", DbType.String, dr.Item("Address"))
                    DB.AddInParameter(DBCommSQL, "@Phone", DbType.String, dr.Item("Phone"))
                    DB.AddInParameter(DBCommSQL, "@Remark15", DbType.String, dr.Item("Remark15"))
                    DB.AddInParameter(DBCommSQL, "@RemarkDone", DbType.String, dr.Item("RemarkDone"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@CurrentLocationID", DbType.String, dr.Item("CurrentLocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsHeadOffice", DbType.Boolean, dr.Item("IsHeadOffice"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertLocation: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertLocation : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertCustomer(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteCustomer(dr)

                    strCommandText = "Insert into tbl_Customer ( CustomerID,CustomerCode,CustomerName,CustomerAddress,CustomerTel,Remark,IsInactive,LastModifiedDate,IsDelete,IsUpload,DOB,LocationID,NRC,MemberCode)"
                    strCommandText += " Values (@CustomerID,@CustomerCode,@CustomerName,@CustomerAddress,@CustomerTel,@Remark,@IsInactive,@LastModifiedDate,@IsDelete,@IsUpload,@DOB,@LocationID,@NRC,@MemberCode)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerCode", DbType.String, dr.Item("CustomerCode"))
                    DB.AddInParameter(DBCommSQL, "@CustomerName", DbType.String, dr.Item("CustomerName"))
                    DB.AddInParameter(DBCommSQL, "@CustomerAddress", DbType.String, dr.Item("CustomerAddress"))
                    DB.AddInParameter(DBCommSQL, "@CustomerTel", DbType.String, dr.Item("CustomerTel"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsInactive", DbType.Boolean, dr.Item("IsInactive"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.Date, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@DOB", DbType.Date, dr.Item("DOB"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@NRC", DbType.String, dr.Item("NRC"))
                    DB.AddInParameter(DBCommSQL, "@MemberCode", DbType.String, dr.Item("MemberCode"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertCustomer: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertCustomer : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSupplier(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteSupplier(dr)

                    strCommandText = "Insert into tbl_Supplier ( SupplierID, SupplierCode, SupplierName, SupplierAddress, Email, Website, PhoneNo, Remark,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@SupplierID, @SupplierCode, @SupplierName, @SupplierAddress, @Email, @Website, @PhoneNo, @Remark,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SupplierID", DbType.String, dr.Item("SupplierID"))
                    DB.AddInParameter(DBCommSQL, "@SupplierCode", DbType.String, dr.Item("SupplierCode"))
                    DB.AddInParameter(DBCommSQL, "@SupplierName", DbType.String, dr.Item("SupplierName"))
                    DB.AddInParameter(DBCommSQL, "@SupplierAddress", DbType.String, dr.Item("SupplierAddress"))
                    DB.AddInParameter(DBCommSQL, "@Email", DbType.String, dr.Item("Email"))
                    DB.AddInParameter(DBCommSQL, "@Website", DbType.String, dr.Item("Website"))
                    DB.AddInParameter(DBCommSQL, "@PhoneNo", DbType.String, dr.Item("PhoneNo"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertSupplier: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSupplier : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertStaff(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteStaff(dr)

                    strCommandText = "Insert into tbl_Staff (StaffID,Staff,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@StaffID,@Staff,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@Staff", DbType.String, dr.Item("Staff"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertStaff: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertStaff : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertCurrentPrice(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteCurrentPrice(dr)

                    strCommandText = "Insert into tbl_StandardRate ( DefineID,DefineDateTime,GoldQualityID,SalesRate,PurchaseRate,ExchangeRate,Remark,PercentPurchaseRate,PercentExchangeRate,PercentDamageRate,DamageRate,SaleRatePerGram,IsDelete,IsUpload,LocationID,LastModifiedDate)"
                    strCommandText += " Values (@DefineID,@DefineDateTime,@GoldQualityID,@SalesRate,@PurchaseRate,@ExchangeRate,@Remark,@PercentPurchaseRate,@PercentExchangeRate,@PercentDamageRate,@DamageRate,@SaleRatePerGram,@IsDelete,@IsUpload,@LocationID,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@DefineID", DbType.String, dr.Item("DefineID"))
                    DB.AddInParameter(DBCommSQL, "@DefineDateTime", DbType.Date, dr.Item("DefineDateTime"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Decimal, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseRate", DbType.Decimal, dr.Item("PurchaseRate"))
                    DB.AddInParameter(DBCommSQL, "@ExchangeRate", DbType.Decimal, dr.Item("ExchangeRate"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@PercentPurchaseRate", DbType.Decimal, dr.Item("PercentPurchaseRate"))
                    DB.AddInParameter(DBCommSQL, "@PercentExchangeRate", DbType.Decimal, dr.Item("PercentExchangeRate"))
                    DB.AddInParameter(DBCommSQL, "@PercentDamageRate", DbType.Decimal, dr.Item("PercentDamageRate"))
                    DB.AddInParameter(DBCommSQL, "@DamageRate", DbType.Decimal, dr.Item("DamageRate"))
                    DB.AddInParameter(DBCommSQL, "@SaleRatePerGram", DbType.Decimal, dr.Item("SaleRatePerGram"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertCurrentPrice: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertCurrentPrice : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertDiamondPrice(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteDiamondPrice(dr)

                    strCommandText = "Insert into tbl_DiamondPriceRate (DefineID,DefineDateTime,CaratFrom,CaratTo,PriceRate,WholeSaleRate,PercentDirectChange,PercentReturn,IsDelete,LastModifiedDate,LastModifiedUserName,PurchaseRate)"
                    strCommandText += " Values (@DefineID,@DefineDateTime,@CaratFrom,@CaratTo,@PriceRate,@WholeSaleRate,@PercentDirectChange,@PercentReturn,@IsDelete,@LastModifiedDate,@LastModifiedUserName,@PurchaseRate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@DefineID", DbType.String, dr.Item("DefineID"))
                    DB.AddInParameter(DBCommSQL, "@DefineDateTime", DbType.Date, dr.Item("DefineDateTime"))
                    DB.AddInParameter(DBCommSQL, "@CaratFrom", DbType.Decimal, dr.Item("CaratFrom"))
                    DB.AddInParameter(DBCommSQL, "@CaratTo", DbType.Decimal, dr.Item("CaratTo"))
                    DB.AddInParameter(DBCommSQL, "@PriceRate", DbType.Decimal, dr.Item("PriceRate"))
                    DB.AddInParameter(DBCommSQL, "@WholeSaleRate", DbType.Decimal, dr.Item("WholeSaleRate"))
                    DB.AddInParameter(DBCommSQL, "@PercentDirectChange", DbType.Int32, dr.Item("PercentDirectChange"))
                    DB.AddInParameter(DBCommSQL, "@PercentReturn", DbType.Int32, dr.Item("PercentReturn"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.Date, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedUserName", DbType.String, dr.Item("LastModifiedUserName"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseRate", DbType.Decimal, dr.Item("PurchaseRate"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertDiamondPrice: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertDiamondPrice : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertTransfer(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    'Dim dtsale As New DataTable
                    ImportDeleteTransfer(dr)

                    strCommandText = "Insert into tbl_Transfer ( TransferID,TransferDate,LocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync,IsConfirm)"
                    strCommandText += " Values (@TransferID,@TransferDate,@LocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@IsConfirm)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferID", DbType.String, dr.Item("TransferID"))
                    DB.AddInParameter(DBCommSQL, "@TransferDate", DbType.DateTime, dr.Item("TransferDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@IsConfirm", DbType.Boolean, dr.Item("IsConfirm"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransfer : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                 & " FROM tbl_TransferItem where TransferID ='" & dr.Item("TransferID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteTransferItem(dr)
                    ImportInsertTransferItem(Connstr, da, dr.Item("TransferID"), CDate(dr.Item("TransferDate")), dr.Item("LocationID"), DBcomm, tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransfer : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertTransferItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal TransferID As String, ByVal TransferDate As DateTime, ByVal LocationID As String, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows


                    strCommandText = "Insert into tbl_TransferItem ( TransferItemID,TransferID,ForSaleID,OriginalFixedPrice,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,PriceCode,FixPrice,IsReturn)"
                    strCommandText += " Values (@TransferItemID,@TransferID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@PriceCode,@FixPrice,@IsReturn)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferItemID", DbType.String, dr.Item("TransferItemID"))
                    DB.AddInParameter(DBCommSQL, "@TransferID", DbType.String, dr.Item("TransferID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int32, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceGram", DbType.Int32, dr.Item("OriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceTK", DbType.Int32, dr.Item("OriginalPriceTK"))
                    DB.AddInParameter(DBCommSQL, "@OriginalGemsPrice", DbType.Int32, dr.Item("OriginalGemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@PriceCode", DbType.String, dr.Item("PriceCode"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int32, dr.Item("FixPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransferItem : " & ex.Message)
                    End Try
                    strCommandText = "SELECT  * " _
                                 & " FROM tbl_ForSale where ForSaleID ='" & dr.Item("ForSaleID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    'ImportDeleteForSale(dr)
                    ImportInsertForSale(Connstr, da, dr.Item("ForSaleID"), DBcomm, tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransferItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertTransferDiamond(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    'Dim dtsale As New DataTable
                    ImportDeleteTransferDiamond(dr)

                    strCommandText = "Insert into tbl_TransferLooseDiamond ( TransferID,TransferDate,LocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync,IsConfirm)"
                    strCommandText += " Values (@TransferID,@TransferDate,@LocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@IsConfirm)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferID", DbType.String, dr.Item("TransferID"))
                    DB.AddInParameter(DBCommSQL, "@TransferDate", DbType.DateTime, dr.Item("TransferDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@IsConfirm", DbType.Boolean, dr.Item("IsConfirm"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransferDiamond : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                 & " FROM tbl_TransferLooseDiamondItem where TransferID ='" & dr.Item("TransferID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteTransferDiamondItem(dr)
                    ImportInsertTransferDiamondItem(Connstr, da, dr.Item("TransferID"), CDate(dr.Item("TransferDate")), dr.Item("LocationID"), DBcomm, tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransfer : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertTransferDiamondItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal TransferID As String, ByVal TransferDate As DateTime, ByVal LocationID As String, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows


                    strCommandText = "Insert into tbl_TransferLooseDiamondItem ( TransferItemID,TransferID,ForSaleID,OriginalFixedPrice,OriginalPriceCarat,PriceCode,FixPrice,IsReturn)"
                    strCommandText += " Values (@TransferItemID,@TransferID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceCarat,@PriceCode,@FixPrice,@IsReturn)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferItemID", DbType.String, dr.Item("TransferItemID"))
                    DB.AddInParameter(DBCommSQL, "@TransferID", DbType.String, dr.Item("TransferID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int32, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceCarat", DbType.Int32, dr.Item("OriginalPriceCarat"))
                    DB.AddInParameter(DBCommSQL, "@PriceCode", DbType.String, dr.Item("PriceCode"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int32, dr.Item("FixPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransferDiamondItem : " & ex.Message)
                    End Try
                    strCommandText = "SELECT  * " _
                                 & " FROM tbl_ForSale where ForSaleID ='" & dr.Item("ForSaleID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    'ImportDeleteForSale(dr)
                    ImportInsertForSale(Connstr, da, dr.Item("ForSaleID"), DBcomm, tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransferDiamondItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertForSale(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal ForSaleID As String, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim strCommandUpdate As String
                Dim DBCommSQL As DbCommand
                Dim Global_isHeadOffice As Boolean

                'Dim infoLocation As CommonInfo.LocationInfo = _objLocation.GetLocationByID(CurrentCompanyID)
                Dim infoLocation As CommonInfo.LocationInfo = _objLocation.GetLocationByID(Global_CurrentLocationID)
                Global_isHeadOffice = infoLocation.IsHeadOffice

                Dim Global_isHOToBranch As Boolean

                'Dim infoLocation As CommonInfo.LocationInfo = _objLocation.GetLocationByID(CurrentCompanyID)
                Dim globalInfo As CommonInfo.GlobalSettingInfo = _objLocation.CheckTransferInfo()
                Global_isHOToBranch = globalInfo.IsHoToBranch

                'Dim CurrentCompanyID As String = AppConfiguration.ReadAppSettings("CurrentCompanyID")
                'Dim CurrentCompanyID As String = config.AppSettings.Settings("CurrentCompanyID").Value

                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteForSale(dr)

                    strCommandText = "Insert into tbl_ForSale (ForSaleID,ItemCode,ItemNameID,Length,GoldQualityID,ItemCategoryID,GivenDate,GoldTK,GoldTG,GemsTK,GemsTG,WasteTK,WasteTG,ItemTK,ItemTG,TotalTK,TotalTG,IsExit,LastModifiedLoginUserName,LastModifiedDate,Width,IsFixPrice,FixPrice,DesignCharges,PlatingCharges,MountingCharges,WhiteCharges,IsOriginalFixedPrice,OriginalFixedPrice,IsOriginalPriceGram,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,OriginalOtherPrice,Photo,SellingPrice,LocationID, IsClosed, IsOrder, IsVolume, QTY, StaffID, LossQTY, LossItemTK, LossItemTG,TotalGemPrice, PurchaseWasteTK, PurchaseWasteTG,OrderReceiveDetailID, GoldSmith, Remark,IsDiamond,OriginalCode,PriceCode,Color,IsDelete,IsSync,SupplierID,SupplierVou,GoldSmithID,ExitDate,WReturnDate,IsSolidVolume,SellingRate,IsCheck,WSFixPrice,Shape,Clarity,OriginalPriceCarat,SDYOrCOrG,IsOriginalPriceCarat,SDGemsTW,IsLooseDiamond,SDGemsCategoryID,SDGemsName,TotalCost)"
                    strCommandText += " Values (@ForSaleID,@ItemCode,@ItemNameID,@Length,@GoldQualityID,@ItemCategoryID,@GivenDate,@GoldTK,@GoldTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@ItemTK,@ItemTG,@TotalTK,@TotalTG,@IsExit,@LastModifiedLoginUserName,@LastModifiedDate,@Width,@IsFixPrice,@FixPrice,@DesignCharges,@PlatingCharges,@MountingCharges,@WhiteCharges,@IsOriginalFixedPrice,@OriginalFixedPrice,@IsOriginalPriceGram,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@OriginalOtherPrice,@Photo,@SellingPrice, @LocationID, @IsClosed, @IsOrder, @IsVolume, @QTY, @StaffID, @LossQTY, @LossItemTK, @LossItemTG,@TotalGemPrice, @PurchaseWasteTK, @PurchaseWasteTG, @OrderReceiveDetailID, @GoldSmith, @Remark,@IsDiamond,@OriginalCode,@PriceCode,@Color,@IsDelete,@IsSync,@SupplierID,@SupplierVou,@GoldSmithID,@ExitDate,@WReturnDate,@IsSolidVolume,@SellingRate,@IsCheck,@WSFixPrice,@Shape,@Clarity,@OriginalPriceCarat,@SDYOrCOrG,@IsOriginalPriceCarat,@SDGemsTW,@IsLooseDiamond,@SDGemsCategoryID,@SDGemsName,@TotalCost)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    If Global_isHOToBranch = True Then
                        DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                        DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                        DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                        DB.AddInParameter(DBCommSQL, "@Length", DbType.String, dr.Item("Length"))
                        DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                        DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                        DB.AddInParameter(DBCommSQL, "@GivenDate", DbType.DateTime, dr.Item("GivenDate"))
                        DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                        DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                        DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                        DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                        DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                        DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                        DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                        DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                        DB.AddInParameter(DBCommSQL, "@TotalTK", DbType.Decimal, dr.Item("TotalTK"))
                        DB.AddInParameter(DBCommSQL, "@TotalTG", DbType.Decimal, dr.Item("TotalTG"))
                        DB.AddInParameter(DBCommSQL, "@IsExit", DbType.Boolean, dr.Item("IsExit"))
                        DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                        DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                        DB.AddInParameter(DBCommSQL, "@Width", DbType.String, dr.Item("Width"))
                        DB.AddInParameter(DBCommSQL, "@IsFixPrice", DbType.Boolean, dr.Item("IsFixPrice"))
                        DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int64, dr.Item("FixPrice"))
                        DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int64, dr.Item("DesignCharges"))
                        DB.AddInParameter(DBCommSQL, "@PlatingCharges", DbType.Int64, dr.Item("PlatingCharges"))
                        DB.AddInParameter(DBCommSQL, "@MountingCharges", DbType.Int64, dr.Item("MountingCharges"))
                        DB.AddInParameter(DBCommSQL, "@WhiteCharges", DbType.Int64, dr.Item("WhiteCharges"))
                        DB.AddInParameter(DBCommSQL, "@IsOriginalFixedPrice", DbType.Boolean, dr.Item("IsOriginalFixedPrice"))
                        DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int64, dr.Item("OriginalFixedPrice"))
                        DB.AddInParameter(DBCommSQL, "@IsOriginalPriceGram", DbType.Boolean, dr.Item("IsOriginalPriceGram"))
                        DB.AddInParameter(DBCommSQL, "@OriginalPriceGram", DbType.Int64, dr.Item("OriginalPriceGram"))
                        DB.AddInParameter(DBCommSQL, "@OriginalPriceTK", DbType.Int64, dr.Item("OriginalPriceTK"))
                        DB.AddInParameter(DBCommSQL, "@OriginalGemsPrice", DbType.Int64, dr.Item("OriginalGemsPrice"))
                        DB.AddInParameter(DBCommSQL, "@OriginalOtherPrice", DbType.Int64, dr.Item("OriginalOtherPrice"))
                        DB.AddInParameter(DBCommSQL, "@Photo", DbType.String, dr.Item("Photo"))
                        DB.AddInParameter(DBCommSQL, "@SellingPrice", DbType.String, dr.Item("SellingPrice"))
                        'DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, CurrentCompanyID)
                        DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, Global_CurrentLocationID)
                        DB.AddInParameter(DBCommSQL, "@IsClosed", DbType.Boolean, dr.Item("IsClosed"))
                        DB.AddInParameter(DBCommSQL, "@IsOrder", DbType.Boolean, dr.Item("IsOrder"))
                        DB.AddInParameter(DBCommSQL, "@IsVolume", DbType.Boolean, dr.Item("IsVolume"))
                        DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                        DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                        DB.AddInParameter(DBCommSQL, "@LossQTY", DbType.Int32, dr.Item("LossQTY"))
                        DB.AddInParameter(DBCommSQL, "@LossItemTK", DbType.Decimal, dr.Item("LossItemTK"))
                        DB.AddInParameter(DBCommSQL, "@LossItemTG", DbType.Decimal, dr.Item("LossItemTG"))
                        DB.AddInParameter(DBCommSQL, "@TotalGemPrice", DbType.Int64, dr.Item("TotalGemPrice"))
                        DB.AddInParameter(DBCommSQL, "@PurchaseWasteTK", DbType.Decimal, dr.Item("PurchaseWasteTK"))
                        DB.AddInParameter(DBCommSQL, "@PurchaseWasteTG", DbType.Decimal, dr.Item("PurchaseWasteTG"))
                        DB.AddInParameter(DBCommSQL, "@OrderReceiveDetailID", DbType.String, dr.Item("OrderReceiveDetailID"))
                        DB.AddInParameter(DBCommSQL, "@GoldSmith", DbType.String, dr.Item("GoldSmith"))
                        DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                        DB.AddInParameter(DBCommSQL, "@IsDiamond", DbType.Boolean, dr.Item("IsDiamond"))
                        DB.AddInParameter(DBCommSQL, "@OriginalCode", DbType.String, dr.Item("OriginalCode"))
                        DB.AddInParameter(DBCommSQL, "@PriceCode", DbType.String, dr.Item("PriceCode"))
                        DB.AddInParameter(DBCommSQL, "@Color", DbType.String, dr.Item("Color"))
                        DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                        DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                        DB.AddInParameter(DBCommSQL, "@SupplierID", DbType.String, dr.Item("SupplierID"))
                        DB.AddInParameter(DBCommSQL, "@SupplierVou", DbType.String, dr.Item("SupplierVou"))
                        DB.AddInParameter(DBCommSQL, "@GoldSmithID", DbType.String, dr.Item("GoldSmithID"))
                        DB.AddInParameter(DBCommSQL, "@ExitDate", DbType.DateTime, dr.Item("ExitDate"))
                        DB.AddInParameter(DBCommSQL, "@WReturnDate", DbType.DateTime, dr.Item("WReturnDate"))
                        DB.AddInParameter(DBCommSQL, "@IsSolidVolume", DbType.Boolean, dr.Item("IsSolidVolume"))
                        DB.AddInParameter(DBCommSQL, "@SellingRate", DbType.Int32, dr.Item("SellingRate"))
                        DB.AddInParameter(DBCommSQL, "@IsCheck", DbType.Boolean, dr.Item("IsCheck"))
                        DB.AddInParameter(DBCommSQL, "@WSFixPrice", DbType.Int32, dr.Item("WSFixPrice"))
                        DB.AddInParameter(DBCommSQL, "@Shape", DbType.String, dr.Item("Shape"))
                        DB.AddInParameter(DBCommSQL, "@Clarity", DbType.String, dr.Item("Clarity"))
                        DB.AddInParameter(DBCommSQL, "@OriginalPriceCarat", DbType.Int32, dr.Item("OriginalPriceCarat"))
                        DB.AddInParameter(DBCommSQL, "@SDYOrCOrG", DbType.String, dr.Item("SDYOrCOrG"))
                        DB.AddInParameter(DBCommSQL, "@IsOriginalPriceCarat", DbType.Boolean, dr.Item("IsOriginalPriceCarat"))
                        DB.AddInParameter(DBCommSQL, "@SDGemsTW", DbType.Decimal, dr.Item("SDGemsTW"))
                        DB.AddInParameter(DBCommSQL, "@IsLooseDiamond", DbType.Boolean, dr.Item("IsLooseDiamond"))
                        DB.AddInParameter(DBCommSQL, "@SDGemsCategoryID", DbType.String, dr.Item("SDGemsCategoryID"))
                        DB.AddInParameter(DBCommSQL, "@SDGemsName", DbType.String, dr.Item("SDGemsName"))
                        DB.AddInParameter(DBCommSQL, "@TotalCost", DbType.Int32, dr.Item("TotalCost"))
                    Else
                        DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                        DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                        DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                        DB.AddInParameter(DBCommSQL, "@Length", DbType.String, dr.Item("Length"))
                        DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                        DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                        DB.AddInParameter(DBCommSQL, "@GivenDate", DbType.DateTime, dr.Item("GivenDate"))
                        DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                        DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                        DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                        DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                        DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                        DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                        DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                        DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                        DB.AddInParameter(DBCommSQL, "@TotalTK", DbType.Decimal, dr.Item("TotalTK"))
                        DB.AddInParameter(DBCommSQL, "@TotalTG", DbType.Decimal, dr.Item("TotalTG"))
                        DB.AddInParameter(DBCommSQL, "@IsExit", DbType.Boolean, dr.Item("IsExit"))
                        DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                        DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, Now)
                        DB.AddInParameter(DBCommSQL, "@Width", DbType.String, dr.Item("Width"))
                        DB.AddInParameter(DBCommSQL, "@IsFixPrice", DbType.Boolean, dr.Item("IsFixPrice"))
                        DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int64, dr.Item("FixPrice"))
                        DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int64, dr.Item("DesignCharges"))
                        DB.AddInParameter(DBCommSQL, "@PlatingCharges", DbType.Int64, dr.Item("PlatingCharges"))
                        DB.AddInParameter(DBCommSQL, "@MountingCharges", DbType.Int64, dr.Item("MountingCharges"))
                        DB.AddInParameter(DBCommSQL, "@WhiteCharges", DbType.Int64, dr.Item("WhiteCharges"))
                        DB.AddInParameter(DBCommSQL, "@IsOriginalFixedPrice", DbType.Boolean, dr.Item("IsOriginalFixedPrice"))
                        DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int64, dr.Item("OriginalFixedPrice"))
                        DB.AddInParameter(DBCommSQL, "@IsOriginalPriceGram", DbType.Boolean, dr.Item("IsOriginalPriceGram"))
                        DB.AddInParameter(DBCommSQL, "@OriginalPriceGram", DbType.Int64, dr.Item("OriginalPriceGram"))
                        DB.AddInParameter(DBCommSQL, "@OriginalPriceTK", DbType.Int64, dr.Item("OriginalPriceTK"))
                        DB.AddInParameter(DBCommSQL, "@OriginalGemsPrice", DbType.Int64, dr.Item("OriginalGemsPrice"))
                        DB.AddInParameter(DBCommSQL, "@OriginalOtherPrice", DbType.Int64, dr.Item("OriginalOtherPrice"))
                        DB.AddInParameter(DBCommSQL, "@Photo", DbType.String, dr.Item("Photo"))
                        DB.AddInParameter(DBCommSQL, "@SellingPrice", DbType.String, dr.Item("SellingPrice"))
                        'DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, CurrentCompanyID)
                        DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, Global_CurrentLocationID)
                        DB.AddInParameter(DBCommSQL, "@IsClosed", DbType.Boolean, dr.Item("IsClosed"))
                        DB.AddInParameter(DBCommSQL, "@IsOrder", DbType.Boolean, dr.Item("IsOrder"))
                        DB.AddInParameter(DBCommSQL, "@IsVolume", DbType.Boolean, dr.Item("IsVolume"))
                        DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                        DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                        DB.AddInParameter(DBCommSQL, "@LossQTY", DbType.Int32, dr.Item("LossQTY"))
                        DB.AddInParameter(DBCommSQL, "@LossItemTK", DbType.Decimal, dr.Item("LossItemTK"))
                        DB.AddInParameter(DBCommSQL, "@LossItemTG", DbType.Decimal, dr.Item("LossItemTG"))
                        DB.AddInParameter(DBCommSQL, "@TotalGemPrice", DbType.Int64, dr.Item("TotalGemPrice"))
                        DB.AddInParameter(DBCommSQL, "@PurchaseWasteTK", DbType.Decimal, dr.Item("PurchaseWasteTK"))
                        DB.AddInParameter(DBCommSQL, "@PurchaseWasteTG", DbType.Decimal, dr.Item("PurchaseWasteTG"))
                        DB.AddInParameter(DBCommSQL, "@OrderReceiveDetailID", DbType.String, dr.Item("OrderReceiveDetailID"))
                        DB.AddInParameter(DBCommSQL, "@GoldSmith", DbType.String, dr.Item("GoldSmith"))
                        DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                        DB.AddInParameter(DBCommSQL, "@IsDiamond", DbType.Boolean, dr.Item("IsDiamond"))
                        DB.AddInParameter(DBCommSQL, "@OriginalCode", DbType.String, dr.Item("OriginalCode"))
                        DB.AddInParameter(DBCommSQL, "@PriceCode", DbType.String, dr.Item("PriceCode"))
                        DB.AddInParameter(DBCommSQL, "@Color", DbType.String, dr.Item("Color"))
                        DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                        DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                        DB.AddInParameter(DBCommSQL, "@SupplierID", DbType.String, dr.Item("SupplierID"))
                        DB.AddInParameter(DBCommSQL, "@SupplierVou", DbType.String, dr.Item("SupplierVou"))
                        DB.AddInParameter(DBCommSQL, "@GoldSmithID", DbType.String, dr.Item("GoldSmithID"))
                        DB.AddInParameter(DBCommSQL, "@ExitDate", DbType.DateTime, dr.Item("ExitDate"))
                        DB.AddInParameter(DBCommSQL, "@WReturnDate", DbType.DateTime, dr.Item("WReturnDate"))
                        DB.AddInParameter(DBCommSQL, "@IsSolidVolume", DbType.Boolean, dr.Item("IsSolidVolume"))
                        DB.AddInParameter(DBCommSQL, "@SellingRate", DbType.Int32, dr.Item("SellingRate"))
                        DB.AddInParameter(DBCommSQL, "@IsCheck", DbType.Boolean, dr.Item("IsCheck"))
                        DB.AddInParameter(DBCommSQL, "@WSFixPrice", DbType.Int32, dr.Item("WSFixPrice"))
                        DB.AddInParameter(DBCommSQL, "@Shape", DbType.String, dr.Item("Shape"))
                        DB.AddInParameter(DBCommSQL, "@Clarity", DbType.String, dr.Item("Clarity"))
                        DB.AddInParameter(DBCommSQL, "@OriginalPriceCarat", DbType.Int32, dr.Item("OriginalPriceCarat"))
                        DB.AddInParameter(DBCommSQL, "@SDYOrCOrG", DbType.String, dr.Item("SDYOrCOrG"))
                        DB.AddInParameter(DBCommSQL, "@IsOriginalPriceCarat", DbType.Boolean, dr.Item("IsOriginalPriceCarat"))
                        DB.AddInParameter(DBCommSQL, "@SDGemsTW", DbType.Decimal, dr.Item("SDGemsTW"))
                        DB.AddInParameter(DBCommSQL, "@IsLooseDiamond", DbType.Boolean, dr.Item("IsLooseDiamond"))
                        DB.AddInParameter(DBCommSQL, "@SDGemsCategoryID", DbType.String, dr.Item("SDGemsCategoryID"))
                        DB.AddInParameter(DBCommSQL, "@SDGemsName", DbType.String, dr.Item("SDGemsName"))
                        DB.AddInParameter(DBCommSQL, "@TotalCost", DbType.Int32, dr.Item("TotalCost"))
                    End If
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertForSale : " & ex.Message)
                    End Try

                    strCommandUpdate = "Update tbl_ForSale Set IsExit='0' ,ExitDate=Null where ForSaleID ='" & dr.Item("ForSaleID") & "'"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandUpdate)
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("UpdateExitForSale : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_forSaleGemsItem where ForSaleID ='" & dr.Item("ForSaleID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteForSaleGemsItem(dr)
                    ImportInsertForSaleGemsItem(Connstr, da, DBcomm, dr.Item("ForSaleID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertForSaleGemsItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertForSaleGemsItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ForSaleID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_ForSaleGemsItem ( ForSaleGemsItemID,ForSaleID,GemsCategoryID,GemsName,GemsTK,GemsTG,YOrCOrG,GemsTW,Qty,Type,UnitPrice,Amount,GemsRemark)"
                    strCommandText += " Values (@ForSaleGemsItemID,@ForSaleID,@GemsCategoryID,@GemsName,@GemsTK,@GemsTG,@YOrCOrG,@GemsTW,@Qty,@Type,@UnitPrice,@Amount,@GemsRemark)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ForSaleGemsItemID", DbType.String, dr.Item("ForSaleGemsItemID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTW", DbType.Decimal, dr.Item("GemsTW"))
                    DB.AddInParameter(DBCommSQL, "@Qty", DbType.Int32, dr.Item("Qty"))
                    DB.AddInParameter(DBCommSQL, "@Type", DbType.String, dr.Item("Type"))
                    DB.AddInParameter(DBCommSQL, "@UnitPrice", DbType.Int64, dr.Item("UnitPrice"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@GemsRemark", DbType.String, dr.Item("GemsRemark"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertForSaleGemsItem: " & ex.Message)
                    End Try
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertForSaleGemsItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertTransferReturn(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    'Dim dtsale As New DataTable
                    ImportDeleteTransferReturn(dr)

                    strCommandText = "Insert into tbl_TransferReturn ( TransferReturnID,TransferReturnDate,CurrentLocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsUpload)"
                    strCommandText += " Values (@TransferReturnID,@TransferReturnDate,@CurrentLocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsUpload)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferReturnID", DbType.String, dr.Item("TransferReturnID"))
                    DB.AddInParameter(DBCommSQL, "@TransferReturnDate", DbType.DateTime, dr.Item("TransferReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@CurrentLocationID", DbType.String, dr.Item("CurrentLocationID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    GlobalTransferReturn_LocationID = dr.Item("CurrentLocationID")
                    GlobalTransferReturnDeleteStatus = dr.Item("IsDelete")
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransferReturn : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                 & " FROM tbl_TransferReturnItem where TransferReturnID ='" & dr.Item("TransferReturnID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteTransferReturnItem(dr.Item("TransferReturnID"))
                    ImportInsertTransferReturnItem(Connstr, da, dr.Item("TransferReturnID"), CDate(dr.Item("TransferReturnDate")), GlobalTransferReturn_LocationID, DBcomm, tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransferReturn : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertTransferReturnItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal TransferReturnID As String, ByVal TransferDate As DateTime, ByVal LocationID As String, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim strCommandUpdate As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows


                    strCommandText = "Insert into tbl_TransferReturnItem ( TransferReturnItemID,TransferReturnID,ForSaleID,OriginalFixedPrice,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,PriceCode,FixPrice)"
                    strCommandText += " Values (@TransferReturnItemID,@TransferReturnID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@PriceCode,@FixPrice)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferReturnItemID", DbType.String, dr.Item("TransferReturnItemID"))
                    DB.AddInParameter(DBCommSQL, "@TransferReturnID", DbType.String, dr.Item("TransferReturnID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int32, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceGram", DbType.Int32, dr.Item("OriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceTK", DbType.Int32, dr.Item("OriginalPriceTK"))
                    DB.AddInParameter(DBCommSQL, "@OriginalGemsPrice", DbType.Int32, dr.Item("OriginalGemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@PriceCode", DbType.String, dr.Item("PriceCode"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int32, dr.Item("FixPrice"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransferReturnItem : " & ex.Message)
                    End Try
                 


                    strCommandUpdate = "Update tbl_ForSale Set IsExit='0' ,ExitDate=Null,IsSync=0,LocationID= " & "'" & Global_CurrentLocationID & "'" & " where ForSaleID ='" & dr.Item("ForSaleID") & "'"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandUpdate)
                    DB.ExecuteNonQuery(DBCommSQL)


                    If GlobalTransferReturnDeleteStatus = True Then
                        'Update isReturn in TransferItem 
                        strCommandText = "Update tbl_TransferItem set isReturn=0" & _
                                       " From tbl_TransferItem TI " & _
                                       " Inner Join tbl_Transfer T On TI.TransferID=T.TransferID " & _
                                       " Where T.LocationID=@LocationID And TI.forsaleid=@ForSaleID "

                    Else
                        'Update isReturn in TransferItem 
                        strCommandText = "Update tbl_TransferItem set isReturn=1" & _
                                       " From tbl_TransferItem TI " & _
                                       " Inner Join tbl_Transfer T On TI.TransferID=T.TransferID " & _
                                       " Where T.LocationID=@LocationID And TI.forsaleid=@ForSaleID "
                    End If


                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, GlobalTransferReturn_LocationID)
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.ExecuteNonQuery(DBCommSQL)
                    'If DB.ExecuteNonQuery(DBCommSQL) > 0 Then
                    '    Return True
                    'Else
                    '    Return False
                    'End If

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransferReturnItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertTransferDiamondReturn(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    'Dim dtsale As New DataTable
                    ImportDeleteTransferReturn(dr)

                    strCommandText = "Insert into tbl_TransferReturnDiamond ( TransferReturnID,TransferReturnDate,CurrentLocationID,StaffID,Remark,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsUpload)"
                    strCommandText += " Values (@TransferReturnID,@TransferReturnDate,@CurrentLocationID,@StaffID,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsUpload)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferReturnID", DbType.String, dr.Item("TransferReturnID"))
                    DB.AddInParameter(DBCommSQL, "@TransferReturnDate", DbType.DateTime, dr.Item("TransferReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@CurrentLocationID", DbType.String, dr.Item("CurrentLocationID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    GlobalTransferReturn_LocationID = dr.Item("CurrentLocationID")
                    GlobalTransferReturnDeleteStatus = dr.Item("IsDelete")
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransferDiamondReturn : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                 & " FROM tbl_TransferReturnDiamondItem where TransferReturnID ='" & dr.Item("TransferReturnID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteTransferDiamondReturnItem(dr.Item("TransferReturnID"))
                    ImportInsertTransferDiamondReturnItem(Connstr, da, dr.Item("TransferReturnID"), CDate(dr.Item("TransferReturnDate")), GlobalTransferReturn_LocationID, DBcomm, tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransferDiamondReturn : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertTransferDiamondReturnItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal TransferReturnID As String, ByVal TransferDate As DateTime, ByVal LocationID As String, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim strCommandUpdate As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows


                    strCommandText = "Insert into tbl_TransferReturnDiamondItem ( TransferReturnItemID,TransferReturnID,ForSaleID,OriginalFixedPrice,OriginalPriceCarat,PriceCode,FixPrice)"
                    strCommandText += " Values (@TransferReturnItemID,@TransferReturnID,@ForSaleID,@OriginalFixedPrice,@OriginalPriceCarat,@PriceCode,@FixPrice)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@TransferReturnItemID", DbType.String, dr.Item("TransferReturnItemID"))
                    DB.AddInParameter(DBCommSQL, "@TransferReturnID", DbType.String, dr.Item("TransferReturnID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int32, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceCarat", DbType.Int32, dr.Item("OriginalPriceCarat"))
                    DB.AddInParameter(DBCommSQL, "@PriceCode", DbType.String, dr.Item("PriceCode"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int32, dr.Item("FixPrice"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertTransferDiamondReturnItem : " & ex.Message)
                    End Try



                    strCommandUpdate = "Update tbl_ForSale Set IsExit='0' ,ExitDate=Null,IsSync=0,LocationID= " & "'" & Global_CurrentLocationID & "'" & " where ForSaleID ='" & dr.Item("ForSaleID") & "'"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandUpdate)
                    DB.ExecuteNonQuery(DBCommSQL)


                    If GlobalTransferReturnDeleteStatus = True Then
                        'Update isReturn in TransferLooseDiamondItem 
                        strCommandText = "Update tbl_TransferLooseDiamondItem set isReturn=0" & _
                                       " From tbl_TransferLooseDiamondItem TI " & _
                                       " Inner Join tbl_Transfer T On TI.TransferID=T.TransferID " & _
                                       " Where T.LocationID=@LocationID And TI.forsaleid=@ForSaleID "

                    Else
                        'Update isReturn in TransferItem 
                        strCommandText = "Update tbl_TransferLooseDiamondItem set isReturn=1" & _
                                       " From tbl_TransferLooseDiamondItem TI " & _
                                       " Inner Join tbl_Transfer T On TI.TransferID=T.TransferID " & _
                                       " Where T.LocationID=@LocationID And TI.forsaleid=@ForSaleID "
                    End If


                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, GlobalTransferReturn_LocationID)
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.ExecuteNonQuery(DBCommSQL)
                    'If DB.ExecuteNonQuery(DBCommSQL) > 0 Then
                    '    Return True
                    'Else
                    '    Return False
                    'End If

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertTransferDiamondReturnItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSaleInvoiceHeader(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteSaleInvoiceHeader(dr)

                    strCommandText = "INSERT INTO tbl_SaleInvoiceHeader(SaleInvoiceHeaderID, StaffID, SaleDate, CustomerID, TotalAmount, AddOrSub, DiscountAmount, PaidAmount, Remark, PromotionDiscount,  LastModifiedLoginUserName,LastModifiedDate, LocationID, PurchaseHeaderID, PurchaseAmount, IsAdvance, EntryAdvanceDate, AllAdvanceAmount, IsCancel, CancelDate, IsOtherCash, OtherCashAmount, IsUpload,IsSync, IsDelete,AllTaxAmt,SRTaxPer,SRTaxAmt,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " VALUES(@SaleInvoiceHeaderID, @StaffID, @SaleDate, @CustomerID, @TotalAmount, @AddOrSub, @DiscountAmount,@PaidAmount,@Remark, @PromotionDiscount, @LastModifiedLoginUserName,@LastModifiedDate, @LocationID, @PurchaseHeaderID, @PurchaseAmount, @IsAdvance, @EntryAdvanceDate, @AllAdvanceAmount, @IsCancel, @CancelDate, @IsOtherCash, @OtherCashAmount,@IsUpload,@IsSync,@IsDelete,@AllTaxAmt,@SRTaxPer, @SRTaxAmt,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SaleInvoiceHeaderID", DbType.String, dr.Item("SaleInvoiceHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@SaleDate", DbType.DateTime, dr.Item("SaleDate"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int32, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@DiscountAmount", DbType.Int32, dr.Item("DiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@PromotionDiscount", DbType.Int32, dr.Item("PromotionDiscount"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseAmount", DbType.Int64, dr.Item("PurchaseAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsAdvance", DbType.Boolean, dr.Item("IsAdvance"))
                    DB.AddInParameter(DBCommSQL, "@EntryAdvanceDate", DbType.DateTime, dr.Item("EntryAdvanceDate"))
                    DB.AddInParameter(DBCommSQL, "@AllAdvanceAmount", DbType.Int64, dr.Item("AllAdvanceAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsCancel", DbType.Boolean, dr.Item("IsCancel"))
                    DB.AddInParameter(DBCommSQL, "@CancelDate", DbType.DateTime, dr.Item("CancelDate"))
                    DB.AddInParameter(DBCommSQL, "@IsOtherCash", DbType.Boolean, dr.Item("IsOtherCash"))
                    DB.AddInParameter(DBCommSQL, "@OtherCashAmount", DbType.Int32, dr.Item("OtherCashAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@AllTaxAmt", DbType.Int32, dr.Item("AllTaxAmt"))
                    DB.AddInParameter(DBCommSQL, "@SRTaxPer", DbType.Decimal, dr.Item("SRTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@SRTaxAmt", DbType.Int32, dr.Item("SRTaxAmt"))
                    DB.AddInParameter(DBCommSQL, "@MemberID", DbType.String, dr.Item("MemberID"))
                    DB.AddInParameter(DBCommSQL, "@MemberName", DbType.String, dr.Item("MemberName"))
                    DB.AddInParameter(DBCommSQL, "@MemberCode", DbType.String, dr.Item("MemberCode"))
                    DB.AddInParameter(DBCommSQL, "@RedeemID", DbType.String, dr.Item("RedeemID"))
                    DB.AddInParameter(DBCommSQL, "@TopupPoint", DbType.Int32, dr.Item("TopupPoint"))
                    DB.AddInParameter(DBCommSQL, "@TopupValue", DbType.Int32, dr.Item("TopupValue"))
                    DB.AddInParameter(DBCommSQL, "@RedeemPoint", DbType.Int32, dr.Item("RedeemPoint"))
                    DB.AddInParameter(DBCommSQL, "@RedeemValue", DbType.Int32, dr.Item("RedeemValue"))
                    DB.AddInParameter(DBCommSQL, "@IsRedeemInvoice", DbType.Boolean, dr.Item("IsRedeemInvoice"))
                    DB.AddInParameter(DBCommSQL, "@MemberDis", DbType.Int32, dr.Item("MemberDis"))
                    DB.AddInParameter(DBCommSQL, "@MemberDiscountAmt", DbType.Int32, dr.Item("MemberDiscountAmt"))
                    DB.AddInParameter(DBCommSQL, "@TransactionID", DbType.String, dr.Item("TransactionID"))
                    DB.AddInParameter(DBCommSQL, "@InvoiceStatus", DbType.Int32, dr.Item("InvoiceStatus"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportSaleInvoiceHeader : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  *  " _
                                & " FROM tbl_SaleInvoiceDetail where SaleInvoiceHeaderID ='" & dr.Item("SaleInvoiceHeaderID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteSaleInvoiceDetail(dr)
                    ImportInsertSaleInvoiceDetail(Connstr, da, DBcomm, dr.Item("SaleInvoiceHeaderID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSaleInvoiceHeader : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertWholeSaleReturn(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteWholeSaleReturn(dr)

                    strCommandText = "Insert into tbl_WholesaleReturn ( WholesaleReturnID,WReturnDate,WholeSaleInvoiceID,ConsignmentSaleID,StaffID,CustomerID,Remark,SaleAmount,SaleReturnAmount,TotalAmount,AddOrSub,PaidAmount,Discount,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsUpload,IsDelete)"
                    strCommandText += " Values (@WholesaleReturnID,@WReturnDate,@WholeSaleInvoiceID,@ConsignmentSaleID,@StaffID,@CustomerID,@Remark,@SaleAmount,@SaleReturnAmount,@TotalAmount,@AddOrSub,@PaidAmount,@Discount,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsUpload,@IsDelete)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@WholesaleReturnID", DbType.String, dr.Item("WholesaleReturnID"))
                    DB.AddInParameter(DBCommSQL, "@WReturnDate", DbType.DateTime, dr.Item("WReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@WholeSaleInvoiceID", DbType.String, dr.Item("WholeSaleInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@ConsignmentSaleID", DbType.String, dr.Item("ConsignmentSaleID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@SaleAmount", DbType.Int64, dr.Item("SaleAmount"))
                    DB.AddInParameter(DBCommSQL, "@SaleReturnAmount", DbType.Int64, dr.Item("SaleReturnAmount"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@Discount", DbType.Int64, dr.Item("Discount"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertWholeSaleReturn : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_WholeSaleReturnItem where WholeSaleReturnID ='" & dr.Item("WholeSaleReturnID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteWholeSaleReturnItem(dr)
                    ImportInsertWholeSaleReturnItem(Connstr, da, DBcomm, dr.Item("WholeSaleReturnID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertWholeSaleReturn : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertWholeSaleReturnItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal WholeSaleReturnID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_WholesaleReturnItem ( WholesaleReturnItemID,WholesaleReturnID,ForSaleID,ItemNameID,GoldQualityID,ItemCode,IsReturn,IsSale,SalesRate,ItemTG,ItemTK,GoldTG,GoldTK,GemsTG,GemsTK,WasteTG,WasteTK,GoldPrice,FixPrice)"
                    strCommandText += " Values (@WholesaleReturnItemID,@WholesaleReturnID,@ForSaleID,@ItemNameID,@GoldQualityID,@ItemCode,@IsReturn,@IsSale,@SalesRate,@ItemTG,@ItemTK,@GoldTG,@GoldTK,@GemsTG,@GemsTK,@WasteTG,@WasteTK,@GoldPrice,@FixPrice)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@WholesaleReturnItemID", DbType.String, dr.Item("WholesaleReturnItemID"))
                    DB.AddInParameter(DBCommSQL, "@WholesaleReturnID", DbType.String, dr.Item("WholesaleReturnID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))
                    DB.AddInParameter(DBCommSQL, "@IsSale", DbType.Boolean, dr.Item("IsSale"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Int64, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int32, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.String, dr.Item("FixPrice"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertWholeSaleReturnItem : " & ex.Message)
                    End Try

                    If GlobalWholeSaleReturnDeleteStatus = True Then
                        strCommandText = "update tbl_Wholesaleinvoiceitem  set isReturn=0  " & _
                            " From tbl_Wholesaleinvoiceitem A  " & _
                            " inner  join tbl_Wholesalereturn B on A.Wholesaleinvoiceid=B.Wholesaleinvoiceid " & _
                            " inner join tbl_Wholesalereturnitem C on B.Wholesalereturnid=C.wholesalereturnid and A.forsaleid=C.forsaleid " & _
                            " where C.wholesalereturnitemid=@WholeSaleReturnItemID "
                    Else
                        strCommandText = "update tbl_Wholesaleinvoiceitem  set isReturn=1  " & _
                            " From tbl_Wholesaleinvoiceitem A  " & _
                            " inner  join tbl_Wholesalereturn B on A.Wholesaleinvoiceid=B.Wholesaleinvoiceid " & _
                            " inner join tbl_Wholesalereturnitem C on B.Wholesalereturnid=C.wholesalereturnid and A.forsaleid=C.forsaleid " & _
                            " where C.wholesalereturnitemid=@WholeSaleReturnItemID "
                    End If

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@WholeSaleReturnItemID", DbType.String, dr.Item("WholeSaleReturnItemID"))
                    DB.ExecuteNonQuery(DBCommSQL)


                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertWholeSaleReturnItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSaleLooseDiamondHeader(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteSaleInvoiceHeader(dr)

                    strCommandText = "INSERT INTO tbl_SaleLooseDiamondHeader(SaleLooseDiamondID,SaleDate,CustomerID,StaffID,Remark,TotalAmount,AddOrSub,DiscountAmount,PaidAmount,PromotionDiscount,LocationID,LastModifiedLoginUserName,LastModifiedDate,PurchaseHeaderID,PurchaseAmount,IsOtherCash,OtherCashAmount,IsDelete,IsUpload,AllTaxAmt,SRTaxPer,SRTaxAmt,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " VALUES(@SaleLooseDiamondID,@SaleDate,@CustomerID,@StaffID,@Remark,@TotalAmount,@AddOrSub,@DiscountAmount,@PaidAmount,@PromotionDiscount,@LocationID,@LastModifiedLoginUserName,@LastModifiedDate,@PurchaseHeaderID,@PurchaseAmount,@IsOtherCash,@OtherCashAmount,@IsDelete,@IsUpload,@AllTaxAmt,@SRTaxPer,@SRTaxAmt,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SaleLooseDiamondID", DbType.String, dr.Item("SaleLooseDiamondID"))
                    DB.AddInParameter(DBCommSQL, "@SaleDate", DbType.DateTime, dr.Item("SaleDate"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int32, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@DiscountAmount", DbType.Int32, dr.Item("DiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@PromotionDiscount", DbType.Int32, dr.Item("PromotionDiscount"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseAmount", DbType.Int64, dr.Item("PurchaseAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsOtherCash", DbType.Boolean, dr.Item("IsOtherCash"))
                    DB.AddInParameter(DBCommSQL, "@OtherCashAmount", DbType.Int32, dr.Item("OtherCashAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@AllTaxAmt", DbType.Int32, dr.Item("AllTaxAmt"))
                    DB.AddInParameter(DBCommSQL, "@SRTaxPer", DbType.Decimal, dr.Item("SRTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@SRTaxAmt", DbType.Int32, dr.Item("SRTaxAmt"))
                    DB.AddInParameter(DBCommSQL, "@MemberID", DbType.String, dr.Item("MemberID"))
                    DB.AddInParameter(DBCommSQL, "@MemberName", DbType.String, dr.Item("MemberName"))
                    DB.AddInParameter(DBCommSQL, "@MemberCode", DbType.String, dr.Item("MemberCode"))
                    DB.AddInParameter(DBCommSQL, "@RedeemID", DbType.String, dr.Item("RedeemID"))
                    DB.AddInParameter(DBCommSQL, "@TopupPoint", DbType.Int32, dr.Item("TopupPoint"))
                    DB.AddInParameter(DBCommSQL, "@TopupValue", DbType.Int32, dr.Item("TopupValue"))
                    DB.AddInParameter(DBCommSQL, "@RedeemPoint", DbType.Int32, dr.Item("RedeemPoint"))
                    DB.AddInParameter(DBCommSQL, "@RedeemValue", DbType.Int32, dr.Item("RedeemValue"))
                    DB.AddInParameter(DBCommSQL, "@IsRedeemInvoice", DbType.Boolean, dr.Item("IsRedeemInvoice"))
                    DB.AddInParameter(DBCommSQL, "@MemberDis", DbType.Int32, dr.Item("MemberDis"))
                    DB.AddInParameter(DBCommSQL, "@MemberDiscountAmt", DbType.Int32, dr.Item("MemberDiscountAmt"))
                    DB.AddInParameter(DBCommSQL, "@TransactionID", DbType.String, dr.Item("TransactionID"))
                    DB.AddInParameter(DBCommSQL, "@InvoiceStatus", DbType.Int32, dr.Item("InvoiceStatus"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportSaleLooseDiamondHeader : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  *  " _
                                & " FROM tbl_SaleLooseDiamondDetail where SaleLooseDiamondID ='" & dr.Item("SaleLooseDiamondID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteSaleLooseDiamondDetail(dr)
                    ImportInsertSaleLooseDiamondDetail(Connstr, da, DBcomm, dr.Item("SaleLooseDiamondID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSaleLooseDiamondHeader : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertSaleInvoiceDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ForSaleID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                Dim strCommandUpdate As String

                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "INSERT INTO tbl_SaleInvoiceDetail ( SaleInvoiceDetailID, SaleInvoiceHeaderID, ForSaleID, ItemCode, SalesRate, ItemTK, ItemTG, GemsTK, GemsTG, WasteTK, WasteTG, GoldPrice, GemsPrice, IsFixPrice, TotalAmount, AddOrSub, IsOriginalFixedPrice, OriginalFixedPrice, IsOriginalPriceGram, OriginalPriceGram, OriginalPriceTK, OriginalGemsPrice, OriginalOtherPrice, PurchaseWasteTK, PurchaseWasteTG, IsReturn,ItemTaxPer,ItemTax, IsSaleReturn, WhiteCharges, PlatingCharges, MountingCharges, DesignCharges,DesignChargesRate,SellingRate,SellingAmt)"
                    strCommandText += " VALUES(@SaleInvoiceDetailID, @SaleInvoiceHeaderID, @ForSaleID, @ItemCode, @SalesRate, @ItemTK, @ItemTG, @GemsTK, @GemsTG, @WasteTK, @WasteTG, @GoldPrice, @GemsPrice, @IsFixPrice, @TotalAmount, @AddOrSub, @IsOriginalFixedPrice, @OriginalFixedPrice, @IsOriginalPriceGram, @OriginalPriceGram, @OriginalPriceTK, @OriginalGemsPrice, @OriginalOtherPrice, @PurchaseWasteTK, @PurchaseWasteTG, @IsReturn,@ItemTaxPer,@ItemTax, @IsSaleReturn, @WhiteCharges, @PlatingCharges, @MountingCharges, @DesignCharges,@DesignChargesRate,@SellingRate,@SellingAmt)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SaleInvoiceDetailID", DbType.String, dr.Item("SaleInvoiceDetailID"))
                    DB.AddInParameter(DBCommSQL, "@SaleInvoiceHeaderID", DbType.String, dr.Item("SaleInvoiceHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Int32, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int32, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@GemsPrice", DbType.Int32, dr.Item("GemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsFixPrice", DbType.Boolean, dr.Item("IsFixPrice"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int32, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalFixedPrice", DbType.Boolean, dr.Item("IsOriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int64, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalPriceGram", DbType.Boolean, dr.Item("IsOriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceGram", DbType.Int64, dr.Item("OriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceTK", DbType.Int64, dr.Item("OriginalPriceTK"))
                    DB.AddInParameter(DBCommSQL, "@OriginalGemsPrice", DbType.Int64, dr.Item("OriginalGemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalOtherPrice", DbType.Int64, dr.Item("OriginalOtherPrice"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseWasteTK", DbType.Decimal, dr.Item("PurchaseWasteTK"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseWasteTG", DbType.Decimal, dr.Item("PurchaseWasteTG"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))
                    DB.AddInParameter(DBCommSQL, "@ItemTaxPer", DbType.Decimal, dr.Item("ItemTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@ItemTax", DbType.Int32, dr.Item("ItemTax"))
                    DB.AddInParameter(DBCommSQL, "@IsSaleReturn", DbType.Boolean, dr.Item("IsSaleReturn"))
                    DB.AddInParameter(DBCommSQL, "@WhiteCharges", DbType.Int32, dr.Item("WhiteCharges"))
                    DB.AddInParameter(DBCommSQL, "@PlatingCharges", DbType.Int32, dr.Item("PlatingCharges"))
                    DB.AddInParameter(DBCommSQL, "@MountingCharges", DbType.Int32, dr.Item("MountingCharges"))
                    DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int32, dr.Item("DesignCharges"))
                    DB.AddInParameter(DBCommSQL, "@DesignChargesRate", DbType.Int32, dr.Item("DesignChargesRate"))
                    DB.AddInParameter(DBCommSQL, "@SellingRate", DbType.Int32, dr.Item("SellingRate"))
                    DB.AddInParameter(DBCommSQL, "@SellingAmt", DbType.Int32, dr.Item("SellingAmt"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportSaleInvoiceDetail : " & ex.Message)
                    End Try

                  
                    strCommandText = "SELECT  * " _
                                & " FROM tbl_SalesInvoiceGemItem where SaleInvoiceDetailID ='" & dr.Item("SaleInvoiceDetailID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)
                    For Each dr1 As DataRow In tmpdt2.Rows
                        ImportDeleteSalesInvoiceGemItem(dr1)
                        ImportInsertSalesInvoiceGemItem(Connstr, da, DBcomm, dr1.Item("SaleInvoiceDetailID"), tmpdt2)
                    Next
                   
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSaleInvoiceDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSaleLooseDiamondDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ForSaleID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                Dim strCommandUpdate As String

                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "INSERT INTO tbl_SaleLooseDiamondDetail ( SaleLooseDiamondDetailID,SaleLooseDiamondID,ForSaleID,ItemCode,GemsCategoryID,Shape,Clarity,Color,GemsName,SalesRate,QTY,ItemTK,ItemTG,GemsTW,YOrCOrG,IsFixPrice,FixPrice,GemsPrice,TotalAmount,AddOrSub,DesignCharges,DesignChargesRate,WhiteCharges,PlatingCharges,MountingCharges,IsSaleReturn,SellingRate,SellingAmt,IsOriginalFixedPrice,OriginalFixedPrice,IsOriginalPriceCarat,OriginalPriceCarat,OriginalCode,IsReturn)"
                    strCommandText += " VALUES(@SaleLooseDiamondDetailID,@SaleLooseDiamondID,@ForSaleID,@ItemCode,@GemsCategoryID,@Shape,@Clarity,@Color,@GemsName,@SalesRate,@QTY,@ItemTK,@ItemTG,@GemsTW,@YOrCOrG,@IsFixPrice,@FixPrice,@GemsPrice,@TotalAmount,@AddOrSub,@DesignCharges,@DesignChargesRate,@WhiteCharges,@PlatingCharges,@MountingCharges,@IsSaleReturn,@SellingRate,@SellingAmt,@IsOriginalFixedPrice,@OriginalFixedPrice,@IsOriginalPriceCarat,@OriginalPriceCarat,@OriginalCode,@IsReturn)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SaleLooseDiamondDetailID", DbType.String, dr.Item("SaleLooseDiamondDetailID"))
                    DB.AddInParameter(DBCommSQL, "@SaleLooseDiamondID", DbType.String, dr.Item("SaleLooseDiamondID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@Shape", DbType.String, dr.Item("Shape"))
                    DB.AddInParameter(DBCommSQL, "@Clarity", DbType.String, dr.Item("Clarity"))
                    DB.AddInParameter(DBCommSQL, "@Color", DbType.String, dr.Item("Color"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Int32, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTW", DbType.Decimal, dr.Item("GemsTW"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@IsFixPrice", DbType.Boolean, dr.Item("IsFixPrice"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int32, dr.Item("FixPrice"))
                    DB.AddInParameter(DBCommSQL, "@GemsPrice", DbType.Int64, dr.Item("GemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int64, dr.Item("DesignCharges"))
                    DB.AddInParameter(DBCommSQL, "@DesignChargesRate", DbType.Int32, dr.Item("DesignChargesRate"))
                    DB.AddInParameter(DBCommSQL, "@WhiteCharges", DbType.Int32, dr.Item("WhiteCharges"))
                    DB.AddInParameter(DBCommSQL, "@PlatingCharges", DbType.Int32, dr.Item("PlatingCharges"))
                    DB.AddInParameter(DBCommSQL, "@MountingCharges", DbType.Int32, dr.Item("MountingCharges"))
                    DB.AddInParameter(DBCommSQL, "@IsSaleReturn", DbType.Boolean, dr.Item("IsSaleReturn"))
                    DB.AddInParameter(DBCommSQL, "@SellingRate", DbType.Int32, dr.Item("SellingRate"))
                    DB.AddInParameter(DBCommSQL, "@SellingAmt", DbType.Int32, dr.Item("SellingAmt"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalFixedPrice", DbType.Boolean, dr.Item("IsOriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int32, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalPriceCarat", DbType.Boolean, dr.Item("IsOriginalPriceCarat"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceCarat", DbType.Int32, dr.Item("OriginalPriceCarat"))
                    DB.AddInParameter(DBCommSQL, "@OriginalCode", DbType.String, dr.Item("OriginalCode"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportSaleLooseDiamondDetail : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSaleLooseDiamondDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertMortgagePaybackItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ForSaleID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
       
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_MortgagePaybackItem( MortgagePaybackItemID,MortgagePaybackID,MortgageItemID,GoldQualityID,ItemCategoryID,ItemName,GoldTK,GoldTG,Amount,MortgageRate,IsDone,DonePercent)"
                    strCommandText += " Values (@MortgagePaybackItemID,@MortgagePaybackID,@MortgageItemID,@GoldQualityID,@ItemCategoryID,@ItemName,@GoldTK,@GoldTG, @Amount,@MortgageRate, @IsDone,@DonePercent)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@MortgagePaybackItemID", DbType.String, dr.Item("MortgagePaybackItemID"))
                    DB.AddInParameter(DBCommSQL, "@MortgagePaybackID", DbType.String, dr.Item("MortgagePaybackID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageItemID", DbType.String, dr.Item("MortgageItemID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))

                    DB.AddInParameter(DBCommSQL, "@ItemName", DbType.String, dr.Item("ItemName"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int32, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@MortgageRate", DbType.Int32, dr.Item("MortgageRate"))
                    DB.AddInParameter(DBCommSQL, "@IsDone", DbType.Boolean, dr.Item("IsDone"))
                    DB.AddInParameter(DBCommSQL, "@DonePercent", DbType.Int32, dr.Item("DonePercent"))


                    
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMortgagePaybackItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertMortgageReturnItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ForSaleID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand

                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_MortgageReturnItem( MortgageReturnItemID,MortgageReturnID,MortgageItemID,GoldQualityID,ItemCategoryID,ItemName,GoldTK,GoldTG,Amount,IsDone,DonePercent)"
                    strCommandText += " Values (@MortgageReturnItemID,@MortgageReturnID,@MortgageItemID,@GoldQualityID,@ItemCategoryID,@ItemName,@GoldTK,@GoldTG, @Amount, @IsDone,@DonePercent)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)
                    DB.AddInParameter(DBCommSQL, "@MortgageReturnItemID", DbType.String, dr.Item("MortgageReturnItemID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageReturnID", DbType.String, dr.Item("MortgageReturnID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageItemID", DbType.String, dr.Item("MortgageItemID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@ItemName", DbType.String, dr.Item("ItemName"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int32, dr.Item("Amount"))

                    DB.AddInParameter(DBCommSQL, "@IsDone", DbType.Boolean, dr.Item("IsDone"))
                    DB.AddInParameter(DBCommSQL, "@DonePercent", DbType.Int32, dr.Item("DonePercent"))



                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMortgageReturnItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function


        Private Function ImportInsertSalesInvoiceGemItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ForSaleID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "INSERT INTO tbl_SalesInvoiceGemItem ( SalesInvoiceGemItemID, SaleInvoiceDetailID, GemsCategoryID, GemsName, GemsTK, GemsTG, YOrCOrG, GemsTW, Qty, Type, UnitPrice, Amount, GemsRemark,GemTaxPer,GemTax)"
                    strCommandText += " VALUES(@SalesInvoiceGemItemID, @SaleInvoiceDetailID, @GemsCategoryID, @GemsName, @GemsTK, @GemsTG, @YOrCOrG, @GemsTW, @Qty, @Type, @UnitPrice, @Amount, @GemsRemark,@GemTaxPer,@GemTax)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SalesInvoiceGemItemID", DbType.String, dr.Item("SalesInvoiceGemItemID"))
                    DB.AddInParameter(DBCommSQL, "@SaleInvoiceDetailID", DbType.String, dr.Item("SaleInvoiceDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTW", DbType.Decimal, dr.Item("GemsTW"))
                    DB.AddInParameter(DBCommSQL, "@Qty", DbType.Int32, dr.Item("Qty"))
                    DB.AddInParameter(DBCommSQL, "@Type", DbType.String, dr.Item("Type"))
                    DB.AddInParameter(DBCommSQL, "@UnitPrice", DbType.Int64, dr.Item("UnitPrice"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@GemsRemark", DbType.String, dr.Item("GemsRemark"))
                    DB.AddInParameter(DBCommSQL, "@GemTaxPer", DbType.Decimal, dr.Item("GemTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@GemTax", DbType.Int32, dr.Item("GemTax"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportSalesInvoiceGemItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportSalesInvoiceGemItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertWholeSaleInvoice(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteWholeSaleInvoice(dr)

                    strCommandText = "Insert into tbl_WholesaleInvoice ( WholesaleInvoiceID,WDate,StaffID,CustomerID,NetAmount,AddOrSub,Discount,PaidAmount,DueDate,PayType,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsUpload,IsDelete,JC_IsUpload,Remark,TotalDesignCharges,DisPercent,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " Values (@WholesaleInvoiceID,@WDate,@StaffID,@CustomerID,@NetAmount,@AddOrSub,@Discount,@PaidAmount,@DueDate,@PayType,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsUpload,@IsDelete,@JC_IsUpload,@Remark,@TotalDesignCharges,@DisPercent,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@WholesaleInvoiceID", DbType.String, dr.Item("WholesaleInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@WDate", DbType.DateTime, dr.Item("WDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@NetAmount", DbType.Int64, dr.Item("NetAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@Discount", DbType.Int64, dr.Item("Discount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@DueDate", DbType.DateTime, dr.Item("DueDate"))
                    DB.AddInParameter(DBCommSQL, "@PayType", DbType.Int32, dr.Item("PayType"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@JC_IsUpload", DbType.Boolean, dr.Item("JC_IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@TotalDesignCharges", DbType.Int64, dr.Item("TotalDesignCharges"))
                    DB.AddInParameter(DBCommSQL, "@DisPercent", DbType.Int64, dr.Item("DisPercent"))
                    DB.AddInParameter(DBCommSQL, "@MemberID", DbType.String, dr.Item("MemberID"))
                    DB.AddInParameter(DBCommSQL, "@MemberName", DbType.String, dr.Item("MemberName"))
                    DB.AddInParameter(DBCommSQL, "@MemberCode", DbType.String, dr.Item("MemberCode"))
                    DB.AddInParameter(DBCommSQL, "@RedeemID", DbType.String, dr.Item("RedeemID"))
                    DB.AddInParameter(DBCommSQL, "@TopupPoint", DbType.Int32, dr.Item("TopupPoint"))
                    DB.AddInParameter(DBCommSQL, "@TopupValue", DbType.Int32, dr.Item("TopupValue"))
                    DB.AddInParameter(DBCommSQL, "@RedeemPoint", DbType.Int32, dr.Item("RedeemPoint"))
                    DB.AddInParameter(DBCommSQL, "@RedeemValue", DbType.Int32, dr.Item("RedeemValue"))
                    DB.AddInParameter(DBCommSQL, "@IsRedeemInvoice", DbType.Boolean, dr.Item("IsRedeemInvoice"))
                    DB.AddInParameter(DBCommSQL, "@MemberDis", DbType.Int32, dr.Item("MemberDis"))
                    DB.AddInParameter(DBCommSQL, "@MemberDiscountAmt", DbType.Int32, dr.Item("MemberDiscountAmt"))
                    DB.AddInParameter(DBCommSQL, "@TransactionID", DbType.String, dr.Item("TransactionID"))
                    DB.AddInParameter(DBCommSQL, "@InvoiceStatus", DbType.Int32, dr.Item("InvoiceStatus"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertWholeSaleInvoice : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_WholeSaleInvoiceItem where WholeSaleInvoiceID ='" & dr.Item("WholeSaleInvoiceID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteWholeSaleInvoiceItem(dr)
                    ImportInsertWholeSaleInvoiceItem(Connstr, da, DBcomm, dr.Item("WholeSaleInvoiceID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertWholeSaleInvoice : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertWholeSaleInvoiceItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal WholeSaleReturnID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_WholesaleInvoiceItem ( WholesaleInvoiceItemID,WholesaleInvoiceID,ForSaleID,ItemNameID,GoldQualityID,ItemCode,IsReturn,IsSale,SalesRate,ItemTK,ItemTG,GemsTK,GemsTG,WasteTK,WasteTG,GoldTK,GoldTG,GoldPrice,FixPrice,DesignCharges,DesignChargesRate,ItemDisPercent,ItemDisAmount,GemsPrice)"
                    strCommandText += " Values (@WholesaleInvoiceItemID,@WholesaleInvoiceID,@ForSaleID,@ItemNameID,@GoldQualityID,@ItemCode,@IsReturn,@IsSale,@SalesRate,@ItemTK,@ItemTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@GoldTK,@GoldTG,@GoldPrice,@FixPrice,@DesignCharges,@DesignChargesRate,@ItemDisPercent,@ItemDisAmount,@GemsPrice)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@WholesaleInvoiceItemID", DbType.String, dr.Item("WholesaleInvoiceItemID"))
                    DB.AddInParameter(DBCommSQL, "@WholesaleInvoiceID", DbType.String, dr.Item("WholesaleInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))
                    DB.AddInParameter(DBCommSQL, "@IsSale", DbType.Boolean, dr.Item("IsSale"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Int32, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int32, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int32, dr.Item("FixPrice"))
                    DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int32, dr.Item("DesignCharges"))
                    DB.AddInParameter(DBCommSQL, "@DesignChargesRate", DbType.Int32, dr.Item("DesignChargesRate"))
                    DB.AddInParameter(DBCommSQL, "@ItemDisPercent", DbType.Int32, dr.Item("ItemDisPercent"))
                    DB.AddInParameter(DBCommSQL, "@ItemDisAmount", DbType.Int32, dr.Item("ItemDisAmount"))
                    DB.AddInParameter(DBCommSQL, "@GemsPrice", DbType.Int32, dr.Item("GemsPrice"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertWholeSaleInvoiceItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertWholeSaleInvoiceItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSalesVolume(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteSalesVolume(dr)

                    strCommandText = "INSERT INTO tbl_SalesVolume(SalesVolumeID, SaleDate, StaffID, CustomerID, Remark, TotalAmount, AddOrSub, DiscountAmount, PromotionDiscount, PaidAmount, LocationID, LastModifiedLoginUserName, LastModifiedDate, PurchaseHeaderID, PurchaseAmount,IsSync,IsDelete,IsSolidVolume,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " VALUES(@SalesVolumeID, @SaleDate, @StaffID, @CustomerID, @Remark, @TotalAmount, @AddOrSub, @DiscountAmount, @PromotionDiscount, @PaidAmount, @LocationID, @LastModifiedLoginUserName, @LastModifiedDate, @PurchaseHeaderID, @PurchaseAmount,@IsSync,@IsDelete,@IsSolidVolume,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SalesVolumeID", DbType.String, dr.Item("SalesVolumeID"))
                    DB.AddInParameter(DBCommSQL, "@SaleDate", DbType.DateTime, dr.Item("SaleDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@DiscountAmount", DbType.Int64, dr.Item("DiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@PromotionDiscount", DbType.Int32, dr.Item("PromotionDiscount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseAmount", DbType.String, dr.Item("PurchaseAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSolidVolume", DbType.Boolean, dr.Item("IsSolidVolume"))
                    DB.AddInParameter(DBCommSQL, "@MemberID", DbType.String, dr.Item("MemberID"))
                    DB.AddInParameter(DBCommSQL, "@MemberName", DbType.String, dr.Item("MemberName"))
                    DB.AddInParameter(DBCommSQL, "@MemberCode", DbType.String, dr.Item("MemberCode"))
                    DB.AddInParameter(DBCommSQL, "@RedeemID", DbType.String, dr.Item("RedeemID"))
                    DB.AddInParameter(DBCommSQL, "@TopupPoint", DbType.Int32, dr.Item("TopupPoint"))
                    DB.AddInParameter(DBCommSQL, "@TopupValue", DbType.Int32, dr.Item("TopupValue"))
                    DB.AddInParameter(DBCommSQL, "@RedeemPoint", DbType.Int32, dr.Item("RedeemPoint"))
                    DB.AddInParameter(DBCommSQL, "@RedeemValue", DbType.Int32, dr.Item("RedeemValue"))
                    DB.AddInParameter(DBCommSQL, "@IsRedeemInvoice", DbType.Boolean, dr.Item("IsRedeemInvoice"))
                    DB.AddInParameter(DBCommSQL, "@MemberDis", DbType.Int32, dr.Item("MemberDis"))
                    DB.AddInParameter(DBCommSQL, "@MemberDiscountAmt", DbType.Int32, dr.Item("MemberDiscountAmt"))
                    DB.AddInParameter(DBCommSQL, "@TransactionID", DbType.String, dr.Item("TransactionID"))
                    DB.AddInParameter(DBCommSQL, "@InvoiceStatus", DbType.Int32, dr.Item("InvoiceStatus"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertSalesVolume : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_SalesVolumeDetail where SalesVolumeID ='" & dr.Item("SalesVolumeID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteSalesVolumeDetail(dr)
                    ImportInsertSalesVolumeDetail(Connstr, da, DBcomm, dr.Item("SalesVolumeID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSalesVolume : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSalesVolumeDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal SalesVolumeID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "INSERT INTO tbl_SalesVolumeDetail ( SalesVolumeDetailID, SalesVolumeID, ForSaleID, ItemCode, ItemCategoryID, GoldQualityID, ItemNameID, Length, SalesRate, QTY, ItemTK, ItemTG, WasteTK, WasteTG, IsFixPrice, FixPrice, GoldPrice, TotalAmount, AddOrSub,DesignCharges)"
                    strCommandText += " VALUES(@SalesVolumeDetailID, @SalesVolumeID, @ForSaleID, @ItemCode, @ItemCategoryID, @GoldQualityID, @ItemNameID, @Length, @SalesRate, @QTY, @ItemTK, @ItemTG, @WasteTK, @WasteTG, @IsFixPrice, @FixPrice, @GoldPrice, @TotalAmount, @AddOrSub,@DesignCharges)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SalesVolumeDetailID", DbType.String, dr.Item("SalesVolumeDetailID"))
                    DB.AddInParameter(DBCommSQL, "@SalesVolumeID", DbType.String, dr.Item("SalesVolumeID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@Length", DbType.String, dr.Item("Length"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Int64, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@IsFixPrice", DbType.Boolean, dr.Item("IsFixPrice"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int64, dr.Item("FixPrice"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int64, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int32, dr.Item("DesignCharges"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertSalesVolumeDetail : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSalesVolumeDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSaleGems(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteSaleGems(dr)

                    strCommandText = "Insert into tbl_SaleGems ( SaleGemsID,SDate,StaffID,CustomerID,TotalAmount,AddOrSub,PaidAmount,DiscountAmount,PromotionDiscount,Remark,LastModifiedLoginUserName,LastModifiedDate,LocationID,PurchaseHeaderID,PurchaseAmount,IsOtherCash,OtherCashAmount,IsDelete,IsSync)"
                    strCommandText += " Values (@SaleGemsID,@SDate,@StaffID,@CustomerID,@TotalAmount,@AddOrSub,@PaidAmount,@DiscountAmount,@PromotionDiscount,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@PurchaseHeaderID,@PurchaseAmount,@IsOtherCash,@OtherCashAmount,@IsDelete,@IsSync)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SaleGemsID", DbType.String, dr.Item("SaleGemsID"))
                    DB.AddInParameter(DBCommSQL, "@SDate", DbType.DateTime, dr.Item("SDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@DiscountAmount", DbType.Int64, dr.Item("DiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@PromotionDiscount", DbType.Int32, dr.Item("PromotionDiscount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseAmount", DbType.Int64, dr.Item("PurchaseAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsOtherCash", DbType.Boolean, dr.Item("IsOtherCash"))
                    DB.AddInParameter(DBCommSQL, "@OtherCashAmount", DbType.Int64, dr.Item("OtherCashAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertSaleGems : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_SaleGemsItem where SaleGemsID ='" & dr.Item("SaleGemsID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteSaleGemsItem(dr)
                    ImportInsertSaleGemsItem(Connstr, da, DBcomm, dr.Item("SaleGemsID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSaleGems : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertSaleGemsItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal SaleGemsID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_SaleGemsItem ( SaleGemsItemID,SaleGemsID,GemsCategoryID,GemsName,Clarity,SizeMM,GemsTK,GemsTG,YOrCOrG,GemsTW,Qty,FixType,SaleRate,Amount,IsReturn)"
                    strCommandText += " Values (@SaleGemsItemID,@SaleGemsID,@GemsCategoryID,@GemsName,@Clarity,@SizeMM,@GemsTK,@GemsTG,@YOrCOrG,@GemsTW,@Qty,@FixType,@SaleRate,@Amount,@IsReturn)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@SaleGemsItemID", DbType.String, dr.Item("SaleGemsItemID"))
                    DB.AddInParameter(DBCommSQL, "@SaleGemsID", DbType.String, dr.Item("SaleGemsID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@Clarity", DbType.String, dr.Item("Clarity"))
                    DB.AddInParameter(DBCommSQL, "@SizeMM", DbType.String, dr.Item("SizeMM"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTW", DbType.Decimal, dr.Item("GemsTW"))
                    DB.AddInParameter(DBCommSQL, "@Qty", DbType.Int32, dr.Item("Qty"))
                    DB.AddInParameter(DBCommSQL, "@FixType", DbType.Int32, dr.Item("FixType"))
                    DB.AddInParameter(DBCommSQL, "@SaleRate", DbType.Int64, dr.Item("SaleRate"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertSaleGemsItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertSaleGemsItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertReturnAdvance(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteReturnAdvance(dr)

                    strCommandText = "Insert into tbl_ReturnAdvance ( ReturnAdvanceID,ReturnAdvanceDate,StaffID,CustomerID,TotalAmount,TotalTG,Discount,NetAmount,Remark,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsDelete,IsSync)"
                    strCommandText += " Values (@ReturnAdvanceID,@ReturnAdvanceDate,@StaffID,@CustomerID,@TotalAmount,@TotalTG,@Discount,@NetAmount,@Remark,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsDelete,@IsSync)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ReturnAdvanceID", DbType.String, dr.Item("ReturnAdvanceID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnAdvanceDate", DbType.DateTime, dr.Item("ReturnAdvanceDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@TotalTG", DbType.Decimal, dr.Item("TotalTG"))
                    DB.AddInParameter(DBCommSQL, "@Discount", DbType.Int64, dr.Item("Discount"))
                    DB.AddInParameter(DBCommSQL, "@NetAmount", DbType.Int64, dr.Item("NetAmount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertReturnAdvance : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_ReturnAdvanceItem where ReturnAdvanceID ='" & dr.Item("ReturnAdvanceID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteReturnAdvanceItem(dr)
                    ImportInsertReturnAdvanceItem(Connstr, da, DBcomm, dr.Item("ReturnAdvanceID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertReturnAdvance : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertReturnAdvanceItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ReturnAdvanceID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_ReturnAdvanceItem ( ReturnAdvanceItemID,ReturnAdvanceID,ItemTG,Qty,SaleRate,Amount,Remark,IsUsed)"
                    strCommandText += " Values (@ReturnAdvanceItemID,@ReturnAdvanceID,@ItemTG,@Qty,@SaleRate,@Amount,@Remark,@IsUsed)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ReturnAdvanceItemID", DbType.String, dr.Item("ReturnAdvanceItemID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnAdvanceID", DbType.String, dr.Item("ReturnAdvanceID"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@Qty", DbType.Int32, dr.Item("Qty"))
                    DB.AddInParameter(DBCommSQL, "@SaleRate", DbType.Int64, dr.Item("SaleRate"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsUsed", DbType.Boolean, dr.Item("IsUsed"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertReturnAdvanceItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertReturnAdvanceItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertRepairHeader(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteRepairHeader(dr)

                    strCommandText = "INSERT INTO tbl_RepairHeader(RepairID, RepairDate, CustomerID, StaffID, Remark, AdvanceRepairAmount, DueDate, IsAllReturn, LastModifiedLoginUserName, LastModifiedDate, LocationID,IsDelete,IsSync)"
                    strCommandText += " VALUES(@RepairID, @RepairDate, @CustomerID, @StaffID, @Remark, @AdvanceRepairAmount, @DueDate,@IsAllReturn, @LastModifiedLoginUserName, @LastModifiedDate, @LocationID,@IsDelete,@IsSync)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@RepairID", DbType.String, dr.Item("RepairID"))
                    DB.AddInParameter(DBCommSQL, "@RepairDate", DbType.DateTime, dr.Item("RepairDate"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@AdvanceRepairAmount", DbType.Int64, dr.Item("AdvanceRepairAmount"))
                    DB.AddInParameter(DBCommSQL, "@DueDate", DbType.DateTime, dr.Item("DueDate"))
                    DB.AddInParameter(DBCommSQL, "@IsAllReturn", DbType.Boolean, dr.Item("IsAllReturn"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertRepairHeader : " & ex.Message)
                    End Try

                    'strCommandText = "SELECT  * " _
                    '          & " FROM tbl_ReturnRepairHeader where RepairID ='" & dr.Item("RepairID") & "'"
                    'Dim tmpdt3 As DataTable
                    'DBcomm = Nothing
                    'DBcomm = Connstr.CreateCommand
                    'DBcomm.CommandType = CommandType.Text
                    'DBcomm.CommandText = strCommandText
                    'da = New OleDbDataAdapter
                    'da.SelectCommand = DBcomm
                    'tmpdt3 = New DataTable
                    'da.Fill(tmpdt3)

                    'ImportDeleteReturnRepairHeader(dr)
                    'ImportInsertReturnRepairHeader(Connstr, da, DBcomm, dr.Item("RepairID"), tmpdt3)

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_RepairDetail where RepairID ='" & dr.Item("RepairID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteRepairDetail(dr)
                    ImportInsertRepairDetail(Connstr, da, DBcomm, dr.Item("RepairID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertRepairHeader : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertReturnRepairHeader(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand

                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteReturnRepairHeader(dr)

                    strCommandText = "INSERT INTO tbl_ReturnRepairHeader(ReturnRepairID,RepairID,ReturnDate,AllReturnTotalAmount, AllReturnAddOrSub, ReturnDiscountAmount, ReturnPaidAmount, Remark, LastModifiedLoginUserName, LastModifiedDate, AdvanceAmount, BalanceAmount, StaffID,IsDelete,IsSync,LocationID)"
                    strCommandText += " VALUES(@ReturnRepairID,@RepairID,@ReturnDate,@AllReturnTotalAmount,@AllReturnAddOrSub,@ReturnDiscountAmount,@ReturnPaidAmount,@Remark,@LastModifiedLoginUserName, @LastModifiedDate, @AdvanceAmount, @BalanceAmount, @StaffID,@IsDelete,@IsSync,@LocationID)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ReturnRepairID", DbType.String, dr.Item("ReturnRepairID"))
                    DB.AddInParameter(DBCommSQL, "@RepairID", DbType.String, dr.Item("RepairID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnDate", DbType.DateTime, dr.Item("ReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@AllReturnTotalAmount", DbType.String, dr.Item("AllReturnTotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AllReturnAddOrSub", DbType.Int64, dr.Item("AllReturnAddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@ReturnDiscountAmount", DbType.Int64, dr.Item("ReturnDiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@ReturnPaidAmount", DbType.Int64, dr.Item("ReturnPaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@AdvanceAmount", DbType.Int64, dr.Item("AdvanceAmount"))
                    DB.AddInParameter(DBCommSQL, "@BalanceAmount", DbType.Int64, dr.Item("BalanceAmount"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertReturnRepairHeader : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                    & " FROM tbl_ReturnRepairDetail where ReturnRepairID ='" & dr.Item("ReturnRepairID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    'ImportDeleteReturnRepairDetail(dr)
                    ImportInsertReturnRepairDetail(Connstr, da, DBcomm, dr.Item("ReturnRepairID"), tmpdt2)

                    Dim dtreceive As DataTable
                    Dim dtreturn As New DataTable
                    Dim ReceiveQTY As Integer = 0
                    Dim ReturnQTY As Integer = 0

                    dtreceive = _objRepairDA.GetRepairReceiveDetail(dr.Item("RepairID"))
                    ReceiveQTY = dtreceive.Rows.Count
                    dtreturn = _objRepairReturnDA.GetRepairReturnDetailByRepairID(dr.Item("RepairID"))
                    ReturnQTY = dtreturn.Rows.Count

                    If (ReceiveQTY = ReturnQTY) Then
                        strCommandText = "update tbl_RepairHeader  set IsAllReturn=1  " & _
                                      " Where RepairID=@RepairID "

                        DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                        DB.AddInParameter(DBCommSQL, "@RepairID", DbType.String, dr.Item("RepairID"))
                        DB.ExecuteNonQuery(DBCommSQL)
                    End If
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertReturnRepairHeader : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertRepairDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal RepairID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_RepairDetail ( RepairDetailID,RepairID,IsFromShop,BarcodeNo,ItemCategoryID,ItemNameID,GoldQualityID,LengthOrWidth,CurrentPrice,Design,ItemTK,ItemTG,IsExit,DetailRemark)"
                    strCommandText += " Values (@RepairDetailID,@RepairID,@IsFromShop,@BarcodeNo,@ItemCategoryID,@ItemNameID,@GoldQualityID,@LengthOrWidth,@CurrentPrice,@Design,@ItemTK,@ItemTG,@IsExit,@DetailRemark)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@RepairDetailID", DbType.String, dr.Item("RepairDetailID"))
                    DB.AddInParameter(DBCommSQL, "@RepairID", DbType.String, dr.Item("RepairID"))
                    DB.AddInParameter(DBCommSQL, "@IsFromShop", DbType.Boolean, dr.Item("IsFromShop"))
                    DB.AddInParameter(DBCommSQL, "@BarcodeNo", DbType.String, dr.Item("BarcodeNo"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@LengthOrWidth", DbType.String, dr.Item("LengthOrWidth"))
                    DB.AddInParameter(DBCommSQL, "@CurrentPrice", DbType.Int64, dr.Item("CurrentPrice"))
                    DB.AddInParameter(DBCommSQL, "@Design", DbType.String, dr.Item("Design"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@IsExit", DbType.Boolean, dr.Item("IsExit"))
                    DB.AddInParameter(DBCommSQL, "@DetailRemark", DbType.String, dr.Item("DetailRemark"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertRepairDetail : " & ex.Message)
                    End Try

                    'strCommandText = "SELECT  * " _
                    '& " FROM tbl_ReturnRepairDetail where RepairDetailID ='" & dr.Item("RepairDetailID") & "'"
                    'Dim tmpdt2 As DataTable
                    'DBcomm = Nothing
                    'DBcomm = Connstr.CreateCommand
                    'DBcomm.CommandType = CommandType.Text
                    'DBcomm.CommandText = strCommandText
                    'da = New OleDbDataAdapter
                    'da.SelectCommand = DBcomm
                    'tmpdt2 = New DataTable
                    'da.Fill(tmpdt2)

                    'ImportDeleteReturnRepairDetail(dr)
                    'ImportInsertReturnRepairDetail(Connstr, da, DBcomm, dr.Item("RepairDetailID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertRepairDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertReturnRepairDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal RepairDetailID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                'Dim strgetId As String
                'Dim id As Integer = 0

                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteReturnRepairDetail(dr)

                    'strgetId = "Select Max(ReturnRepairID) from tbl_ReturnRepairHeader"
                    'DBcomm = DB.GetSqlStringCommand(strgetId)
                    'id = CInt(DB.ExecuteScalar(DBcomm))

                    strCommandText = "Insert into tbl_ReturnRepairDetail ( ReturnRepairDetailID,ReturnRepairID,RepairDetailID,ChangeSaleRate,ReturnItemTK,ReturnItemTG,ReturnGoldTK,ReturnGoldTG,ReturnGemTK,ReturnGemTG,OrgGoldTK,OrgGoldTG,OrgGemTK,OrgGemTG,WasteTK,WasteTG, DesignCharges, WhiteCharges, PlatingCharges,MountingCharges,ReturnGoldPrice,ReturnGemPrice,ReturnTotalAmount,ReturnAddOrSub)"
                    strCommandText += " Values (@ReturnRepairDetailID,@ReturnRepairID,@RepairDetailID,@ChangeSaleRate,@ReturnItemTK,@ReturnItemTG,@ReturnGoldTK,@ReturnGoldTG,@ReturnGemTK,@ReturnGemTG,@OrgGoldTK,@OrgGoldTG,@OrgGemTK,@OrgGemTG,@WasteTK,@WasteTG,@DesignCharges, @WhiteCharges, @PlatingCharges,@MountingCharges,@ReturnGoldPrice,@ReturnGemPrice,@ReturnTotalAmount,@ReturnAddOrSub)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ReturnRepairDetailID", DbType.String, dr.Item("ReturnRepairDetailID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnRepairID", DbType.String, dr.Item("ReturnRepairID"))
                    DB.AddInParameter(DBCommSQL, "@RepairDetailID", DbType.String, dr.Item("RepairDetailID"))
                    DB.AddInParameter(DBCommSQL, "@ChangeSaleRate", DbType.Int64, dr.Item("ChangeSaleRate"))
                    DB.AddInParameter(DBCommSQL, "@ReturnItemTK", DbType.Decimal, dr.Item("ReturnItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ReturnItemTG", DbType.Decimal, dr.Item("ReturnItemTG"))
                    DB.AddInParameter(DBCommSQL, "@ReturnGoldTK", DbType.Decimal, dr.Item("ReturnGoldTK"))
                    DB.AddInParameter(DBCommSQL, "@ReturnGoldTG", DbType.Decimal, dr.Item("ReturnGoldTG"))
                    DB.AddInParameter(DBCommSQL, "@ReturnGemTK", DbType.Decimal, dr.Item("ReturnGemTK"))
                    DB.AddInParameter(DBCommSQL, "@ReturnGemTG", DbType.Decimal, dr.Item("ReturnGemTG"))
                    DB.AddInParameter(DBCommSQL, "@OrgGoldTK", DbType.Decimal, dr.Item("OrgGoldTK"))
                    DB.AddInParameter(DBCommSQL, "@OrgGoldTG", DbType.Decimal, dr.Item("OrgGoldTG"))
                    DB.AddInParameter(DBCommSQL, "@OrgGemTK", DbType.Decimal, dr.Item("OrgGemTK"))
                    DB.AddInParameter(DBCommSQL, "@OrgGemTG", DbType.Decimal, dr.Item("OrgGemTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int64, dr.Item("DesignCharges"))
                    DB.AddInParameter(DBCommSQL, "@WhiteCharges", DbType.Int64, dr.Item("WhiteCharges"))
                    DB.AddInParameter(DBCommSQL, "@PlatingCharges", DbType.Int64, dr.Item("PlatingCharges"))
                    DB.AddInParameter(DBCommSQL, "@MountingCharges", DbType.Int64, dr.Item("MountingCharges"))
                    DB.AddInParameter(DBCommSQL, "@ReturnGoldPrice", DbType.Int64, dr.Item("ReturnGoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@ReturnGemPrice", DbType.Int64, dr.Item("ReturnGemPrice"))
                    DB.AddInParameter(DBCommSQL, "@ReturnTotalAmount", DbType.Int64, dr.Item("ReturnTotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@ReturnAddOrSub", DbType.Int64, dr.Item("ReturnAddOrSub"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertReturnRepairDetail : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_ReturnRepairGem where ReturnRepairDetailID ='" & dr.Item("ReturnRepairDetailID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    'ImportDeleteReturnRepairGems(dr)
                    ImportInsertReturnRepairGems(Connstr, da, DBcomm, dr.Item("ReturnRepairDetailID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertReturnRepairDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertReturnRepairGems(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ReturnRepairDetailID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteReturnRepairGems(dr)

                    strCommandText = "INSERT INTO tbl_ReturnRepairGem ( ReturnRepairGemID, ReturnRepairDetailID, GemsCategoryID, Description, GemsTK, GemsTG, YOrCOrG, GemsTW, QTY, Type, UnitPrice, Amount, IsNewGems)"
                    strCommandText += " VALUES(@ReturnRepairGemID, @ReturnRepairDetailID, @GemsCategoryID, @Description, @GemsTK, @GemsTG, @YOrCOrG, @GemsTW, @QTY, @Type, @UnitPrice, @Amount, @IsNewGems)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ReturnRepairGemID", DbType.String, dr.Item("ReturnRepairGemID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnRepairDetailID", DbType.String, dr.Item("ReturnRepairDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@Description", DbType.String, dr.Item("Description"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTW", DbType.Decimal, dr.Item("GemsTW"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@Type", DbType.String, dr.Item("Type"))
                    DB.AddInParameter(DBCommSQL, "@UnitPrice", DbType.Int64, dr.Item("UnitPrice"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@IsNewGems", DbType.Boolean, dr.Item("IsNewGems"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertReturnRepairGems: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertReturnRepairGems : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertPurchaseOutItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeletePurchaseOutItem(dr)

                    strCommandText = "INSERT INTO tbl_PurchaseOutItem(PurchaseOutID, OutDate, StaffID, PurchaseHeaderID, Remark, LocationID,LastModifiedLoginUserName, LastModifiedDate,IsSync)"
                    strCommandText += " VALUES(@PurchaseOutID, @OutDate, @StaffID, @PurchaseHeaderID, @Remark, @LocationID,@LastModifiedLoginUserName, @LastModifiedDate,@IsSync)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@PurchaseOutID", DbType.String, dr.Item("PurchaseOutID"))
                    DB.AddInParameter(DBCommSQL, "@OutDate", DbType.DateTime, dr.Item("OutDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertPurchaseOutItem : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_PurchaseOutItemDetail where PurchaseOutID ='" & dr.Item("PurchaseOutID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeletePurchaseOutItemDetail(dr)
                    ImportInsertPurchaseOutItemDetail(Connstr, da, DBcomm, dr.Item("PurchaseOutID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertPurchaseOutItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertPurchaseOutItemDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal PurchaseOutID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_PurchaseOutItemDetail ( PurchaseOutDetailID,PurchaseOutID,PurchaseDetailID,GemsCategoryID,GemsName,DivideType,Qty,GemsTK,GemsTG,YOrCOrG,GemTW)"
                    strCommandText += " Values (@PurchaseOutDetailID,@PurchaseOutID,@PurchaseDetailID,@GemsCategoryID,@GemsName,@DivideType,@Qty,@GemsTK,@GemsTG,@YOrCOrG,@GemTW)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@PurchaseOutDetailID", DbType.String, dr.Item("PurchaseOutDetailID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseOutID", DbType.String, dr.Item("PurchaseOutID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseDetailID", DbType.String, dr.Item("PurchaseDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@DivideType", DbType.String, dr.Item("DivideType"))
                    DB.AddInParameter(DBCommSQL, "@Qty", DbType.Int32, dr.Item("Qty"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemTW", DbType.Decimal, dr.Item("GemTW"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertPurchaseOutItemDetail : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertPurchaseOutItemDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertPurchaseHeader(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeletePurchaseHeader(dr)

                    strCommandText = "Insert into tbl_PurchaseHeader ( PurchaseHeaderID,PurchaseDate,StaffID,CustomerID,Address,Remark,AllTotalAmount,AllAddOrSub,AllPaidAmount,GoldPrice,GemsPrice,IsGem,LocationID, IsChange,IsDelete,IsSync,IsUpload,LastModifiedLoginUserName,LastModifiedDate)"
                    strCommandText += " Values (@PurchaseHeaderID,@PurchaseDate,@StaffID,@CustomerID,@Address,@Remark,@AllTotalAmount,@AllAddOrSub,@AllPaidAmount,@GoldPrice,@GemsPrice,@IsGem,@LocationID, @IsChange,@IsDelete,@isSync,@IsUpload,@LastModifiedLoginUserName,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseDate", DbType.DateTime, dr.Item("PurchaseDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@Address", DbType.String, dr.Item("Address"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@AllTotalAmount", DbType.Int64, dr.Item("AllTotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AllAddOrSub", DbType.Int32, dr.Item("AllAddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@AllPaidAmount", DbType.Int64, dr.Item("AllPaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int64, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@GemsPrice", DbType.Int64, dr.Item("GemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsGem", DbType.Boolean, dr.Item("IsGem"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@IsChange", DbType.Boolean, dr.Item("IsChange"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertPurchaseHeader : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_PurchaseDetail where PurchaseHeaderID ='" & dr.Item("PurchaseHeaderID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeletePurchaseDetail(dr)
                    ImportInsertPurchaseDetail(Connstr, da, DBcomm, dr.Item("PurchaseHeaderID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertPurchaseHeader : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertPurchaseDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal PurchaseHeaderID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_PurchaseDetail ( PurchaseDetailID,PurchaseHeaderID, SaleInvoiceDetailID,SaleGemsItemID, ForSaleID,BarcodeNo,OldSaleAmount,ItemCategoryID,ItemNameID,GoldQualityID,CurrentPrice,TotalTK,TotalTG,GoldTK,GoldTG,TotalGemTK,TotalGemTG,Length,QTY,IsDamage,IsChange,TotalAmount, IsClose, YOrCOrG, GemTW, FixType, ItemName, GoldPrice, GemsPrice, WasteTK, WasteTG,  PWasteTK, PWasteTG, SaleRate, IsDone, DoneAmount, IsSalePercent, SalePercent, SalePercentAmount, AddSub, IsShop, IsOrder,ConsignmentSaleItemID)"
                    strCommandText += " Values (@PurchaseDetailID,@PurchaseHeaderID, @SaleInvoiceDetailID,@SaleGemsItemID, @ForSaleID, @BarcodeNo, @OldSaleAmount, @ItemCategoryID, @ItemNameID, @GoldQualityID, @CurrentPrice, @TotalTK, @TotalTG, @GoldTK, @GoldTG, @TotalGemTK, @TotalGemTG, @Length, @QTY, @IsDamage, @IsChange, @TotalAmount, @IsClose, @YOrCOrG, @GemTW, @FixType, @ItemName, @GoldPrice, @GemsPrice, @WasteTK, @WasteTG,  @PWasteTK, @PWasteTG, @SaleRate, @IsDone, @DoneAmount, @IsSalePercent, @SalePercent, @SalePercentAmount, @AddSub , @IsShop, @IsOrder,@ConsignmentSaleItemID)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@PurchaseDetailID", DbType.String, dr.Item("PurchaseDetailID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@SaleInvoiceDetailID", DbType.String, dr.Item("SaleInvoiceDetailID"))
                    DB.AddInParameter(DBCommSQL, "@SaleGemsItemID", DbType.String, dr.Item("SaleGemsItemID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@BarcodeNo", DbType.String, dr.Item("BarcodeNo"))
                    DB.AddInParameter(DBCommSQL, "@OldSaleAmount", DbType.Int64, dr.Item("OldSaleAmount"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@CurrentPrice", DbType.Int32, dr.Item("CurrentPrice"))
                    DB.AddInParameter(DBCommSQL, "@TotalTK", DbType.Decimal, dr.Item("TotalTK"))
                    DB.AddInParameter(DBCommSQL, "@TotalTG", DbType.Decimal, dr.Item("TotalTG"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@TotalGemTK", DbType.Decimal, dr.Item("TotalGemTK"))
                    DB.AddInParameter(DBCommSQL, "@TotalGemTG", DbType.Decimal, dr.Item("TotalGemTG"))
                    DB.AddInParameter(DBCommSQL, "@Length", DbType.String, dr.Item("Length"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@IsDamage", DbType.Boolean, dr.Item("IsDamage"))
                    DB.AddInParameter(DBCommSQL, "@IsChange", DbType.Boolean, dr.Item("IsChange"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsClose", DbType.Boolean, dr.Item("IsClose"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemTW", DbType.Decimal, dr.Item("GemTW"))
                    DB.AddInParameter(DBCommSQL, "@FixType", DbType.String, dr.Item("FixType"))
                    DB.AddInParameter(DBCommSQL, "@ItemName", DbType.String, dr.Item("ItemName"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int64, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@GemsPrice", DbType.Int64, dr.Item("GemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@PWasteTK", DbType.Decimal, dr.Item("PWasteTK"))
                    DB.AddInParameter(DBCommSQL, "@PWasteTG", DbType.Decimal, dr.Item("PWasteTG"))
                    DB.AddInParameter(DBCommSQL, "@SaleRate", DbType.Int32, dr.Item("SaleRate"))
                    DB.AddInParameter(DBCommSQL, "@IsDone", DbType.Boolean, dr.Item("IsDone"))
                    DB.AddInParameter(DBCommSQL, "@DoneAmount", DbType.Int64, dr.Item("DoneAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsSalePercent", DbType.Boolean, dr.Item("IsSalePercent"))
                    DB.AddInParameter(DBCommSQL, "@SalePercent", DbType.Int32, dr.Item("SalePercent"))
                    DB.AddInParameter(DBCommSQL, "@SalePercentAmount", DbType.Int64, dr.Item("SalePercentAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddSub", DbType.Int64, dr.Item("AddSub"))
                    DB.AddInParameter(DBCommSQL, "@IsShop", DbType.Boolean, dr.Item("IsShop"))
                    DB.AddInParameter(DBCommSQL, "@IsOrder", DbType.Boolean, dr.Item("IsOrder"))
                    DB.AddInParameter(DBCommSQL, "@ConsignmentSaleItemID", DbType.String, dr.Item("ConsignmentSaleItemID"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertPurchaseDetail : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_PurchaseGem where PurchaseDetailID ='" & dr.Item("PurchaseDetailID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeletePurchaseGems(dr)
                    ImportInsertPurchaseGems(Connstr, da, DBcomm, dr.Item("PurchaseDetailID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertPurchaseDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertPurchaseGems(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal PurchaseDetailID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_PurchaseGem ( PurchaseGemID,PurchaseDetailID,GemsCategoryID,GemsName,GemsTK,GemsTG,YOrCOrG,GemTW,QTY,FixType, PurchaseRate, Amount, Discount,IsOutGem)"
                    strCommandText += " Values (@PurchaseGemID,@PurchaseDetailID,@GemsCategoryID,@GemsName,@GemsTK,@GemsTG,@YOrCOrG,@GemTW,@QTY,@FixType, @PurchaseRate, @Amount, @Discount,@IsOutGem)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@PurchaseGemID", DbType.String, dr.Item("PurchaseGemID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseDetailID", DbType.String, dr.Item("PurchaseDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemTW", DbType.Decimal, dr.Item("GemTW"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@FixType", DbType.String, dr.Item("FixType"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseRate", DbType.Decimal, dr.Item("PurchaseRate"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@Discount", DbType.Int32, dr.Item("Discount"))
                    DB.AddInParameter(DBCommSQL, "@IsOutGem", DbType.Boolean, dr.Item("IsOutGem"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertPurchaseGems : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertPurchaseGems : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertPurchaseFromSupplier(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeletePurchaseFromSupplier(dr)

                    strCommandText = "Insert into tbl_PurchaseFromSupplier ( PurchaseFromSupplierID,PDate,StaffID,SupplierID,Remark,Voucher,ExchangeRate,TotalAmount,AddOrSub,PaidAmount,DiscountRate,Expense,CommissionRate,PayType,DueDate,LocationID,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync)"
                    strCommandText += " Values (@PurchaseFromSupplierID,@PDate,@StaffID,@SupplierID,@Remark,@Voucher,@ExchangeRate,@TotalAmount,@AddOrSub,@PaidAmount,@DiscountRate,@Expense,@CommissionRate,@PayType,@DueDate,@LocationID,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@PurchaseFromSupplierID", DbType.String, dr.Item("PurchaseFromSupplierID"))
                    DB.AddInParameter(DBCommSQL, "@PDate", DbType.DateTime, dr.Item("PDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@SupplierID", DbType.String, dr.Item("SupplierID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@Voucher", DbType.String, dr.Item("Voucher"))
                    DB.AddInParameter(DBCommSQL, "@ExchangeRate", DbType.Int64, dr.Item("ExchangeRate"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@DiscountRate", DbType.Int32, dr.Item("DiscountRate"))
                    DB.AddInParameter(DBCommSQL, "@Expense", DbType.Int64, dr.Item("Expense"))
                    DB.AddInParameter(DBCommSQL, "@CommissionRate", DbType.Int32, dr.Item("CommissionRate"))
                    DB.AddInParameter(DBCommSQL, "@PayType", DbType.Int32, dr.Item("PayType"))
                    DB.AddInParameter(DBCommSQL, "@DueDate", DbType.DateTime, dr.Item("DueDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertPurchaseFromSupplier : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_PurchaseFromSupplierItem where PurchaseFromSupplierID ='" & dr.Item("PurchaseFromSupplierID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeletePurchaseFromSupplierItem(dr)
                    ImportInsertPurchaseFromSupplierItem(Connstr, da, DBcomm, dr.Item("PurchaseFromSupplierID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertPurchaseFromSupplier : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertPurchaseFromSupplierItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal PurchaseFromSupplierID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_PurchaseFromSupplierItem ( PurchaseFromSupplierItemID,PurchaseFromSupplierID,OriginalCode,GramWeight,QTY,Rate,Amount,IsReject)"
                    strCommandText += " Values (@PurchaseFromSupplierItemID,@PurchaseFromSupplierID,@OriginalCode,@GramWeight,@QTY,@Rate,@Amount,@IsReject)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@PurchaseFromSupplierItemID", DbType.String, dr.Item("PurchaseFromSupplierItemID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseFromSupplierID", DbType.String, dr.Item("PurchaseFromSupplierID"))
                    DB.AddInParameter(DBCommSQL, "@OriginalCode", DbType.String, dr.Item("OriginalCode"))
                    DB.AddInParameter(DBCommSQL, "@GramWeight", DbType.Decimal, dr.Item("GramWeight"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@Rate", DbType.Decimal, dr.Item("Rate"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Decimal, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@IsReject", DbType.Boolean, dr.Item("IsReject"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertPurchaseFromSupplierItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertPurchaseFromSupplierItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertOrderInvoice(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteOrderInvoice(dr)

                    strCommandText = "Insert into tbl_OrderInvoice ( OrderInvoiceID, OrderDate, DueDate, StaffID, CustomerID, PayGoldQualityID, PayGoldTK, PayGoldTG, Remark, AllTotalAmount, AllAddOrSub, AdvanceAmount, SecondAdvanceAmount, SecondAdvanceDate, IsCancel, IsRetrieved, LocationID, LastModifiedLoginUserName, LastModifiedDate,IsDelete,IsSync,OrderRetrieveDate,IsRepayment,RepaymentDate)"
                    strCommandText += " Values (@OrderInvoiceID, @OrderDate, @DueDate, @StaffID, @CustomerID, @PayGoldQualityID, @PayGoldTK, @PayGoldTG, @Remark, @AllTotalAmount, @AllAddOrSub, @AdvanceAmount, @SecondAdvanceAmount, @SecondAdvanceDate, @IsCancel, @IsRetrieved, @LocationID, @LastModifiedLoginUserName, @LastModifiedDate,@IsDelete,@IsSync,@OrderRetrieveDate,@IsRepayment,@RepaymentDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@OrderInvoiceID", DbType.String, dr.Item("OrderInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@OrderDate", DbType.DateTime, dr.Item("OrderDate"))
                    DB.AddInParameter(DBCommSQL, "@DueDate", DbType.DateTime, dr.Item("DueDate"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@PayGoldQualityID", DbType.String, dr.Item("PayGoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@PayGoldTK", DbType.Decimal, dr.Item("PayGoldTK"))
                    DB.AddInParameter(DBCommSQL, "@PayGoldTG", DbType.Decimal, dr.Item("PayGoldTG"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@AllTotalAmount", DbType.Int64, dr.Item("AllTotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AllAddOrSub", DbType.Int64, dr.Item("AllAddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@AdvanceAmount", DbType.Int64, dr.Item("AdvanceAmount"))
                    DB.AddInParameter(DBCommSQL, "@SecondAdvanceAmount", DbType.Int64, dr.Item("SecondAdvanceAmount"))
                    DB.AddInParameter(DBCommSQL, "@SecondAdvanceDate", DbType.DateTime, dr.Item("SecondAdvanceDate"))
                    DB.AddInParameter(DBCommSQL, "@IsCancel", DbType.Boolean, dr.Item("IsCancel"))
                    DB.AddInParameter(DBCommSQL, "@IsRetrieved", DbType.Boolean, dr.Item("IsRetrieved"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@OrderRetrieveDate", DbType.DateTime, dr.Item("OrderRetrieveDate"))
                    DB.AddInParameter(DBCommSQL, "@IsRepayment", DbType.Boolean, dr.Item("IsRepayment"))
                    DB.AddInParameter(DBCommSQL, "@RepaymentDate", DbType.DateTime, dr.Item("RepaymentDate"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertOrderInvoice : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_OrderReceiveDetail where OrderInvoiceID ='" & dr.Item("OrderInvoiceID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteOrderReceiveDetail(dr)
                    ImportInsertOrderReceiveDetail(Connstr, da, DBcomm, dr.Item("OrderInvoiceID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertOrderInvoice : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertOrderReceiveDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal OrderInvoiceID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_OrderReceiveDetail ( OrderReceiveDetailID,OrderInvoiceID,Length,Width,ItemCategoryID,GoldSmithID,ItemNameID,GoldQualityID,GoldTK,GoldTG,WasteTK,WasteTG,TotalGemTK,TotalGemTG,OrderRate,GoldPrice,GemPrice,DesignCharges,PlatingFee,WhiteCharges,MountingFee,TotalAmount,AddOrSub,IsBarcode, Design,IsDiamond)"
                    strCommandText += " Values (@OrderReceiveDetailID,@OrderInvoiceID,@Length,@Width,@ItemCategoryID,@GoldSmithID,@ItemNameID,@GoldQualityID,@GoldTK,@GoldTG,@WasteTK,@WasteTG,@TotalGemTK,@TotalGemTG,@OrderRate,@GoldPrice,@GemPrice,@DesignCharges,@PlatingFee,@WhiteCharges,@MountingFee,@TotalAmount,@AddOrSub,@IsBarcode, @Design,@IsDiamond)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@OrderReceiveDetailID", DbType.String, dr.Item("OrderReceiveDetailID"))
                    DB.AddInParameter(DBCommSQL, "@OrderInvoiceID", DbType.String, dr.Item("OrderInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@Length", DbType.String, dr.Item("Length"))
                    DB.AddInParameter(DBCommSQL, "@Width", DbType.String, dr.Item("Width"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GoldSmithID", DbType.String, dr.Item("GoldSmithID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@TotalGemTK", DbType.Decimal, dr.Item("TotalGemTK"))
                    DB.AddInParameter(DBCommSQL, "@TotalGemTG", DbType.Decimal, dr.Item("TotalGemTG"))
                    DB.AddInParameter(DBCommSQL, "@OrderRate", DbType.Int32, dr.Item("OrderRate"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int64, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@GemPrice", DbType.Int64, dr.Item("GemPrice"))
                    DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int64, dr.Item("DesignCharges"))
                    DB.AddInParameter(DBCommSQL, "@PlatingFee", DbType.Int64, dr.Item("PlatingFee"))
                    DB.AddInParameter(DBCommSQL, "@WhiteCharges", DbType.Int64, dr.Item("WhiteCharges"))
                    DB.AddInParameter(DBCommSQL, "@MountingFee", DbType.Int64, dr.Item("MountingFee"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@IsBarcode", DbType.Boolean, dr.Item("IsBarcode"))
                    DB.AddInParameter(DBCommSQL, "@Design", DbType.String, dr.Item("Design"))
                    DB.AddInParameter(DBCommSQL, "@IsDiamond", DbType.Boolean, dr.Item("IsDiamond"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertOrderReceiveDetail : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_OrderInvoiceGemsItem where OrderReceiveDetailID ='" & dr.Item("OrderReceiveDetailID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteOrderInvoiceGemsItem(dr)
                    ImportInsertOrderInvoiceGemsItem(Connstr, da, DBcomm, dr.Item("OrderReceiveDetailID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertOrderReceiveDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertOrderInvoiceGemsItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal OrderInvoiceDetailID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_OrderInvoiceGemsItem ( OrderInvoiceGemsItemID,OrderReceiveDetailID,GemsCategoryID,GemsName,GemsTK,YOrCOrG,GemsTW,GemsTG,Qty,UnitPrice,Type,Amount,IsCustomerGem)"
                    strCommandText += " Values (@OrderInvoiceGemsItemID,@OrderReceiveDetailID,@GemsCategoryID,@GemsName,@GemsTK,@YOrCOrG,@GemsTW,@GemsTG,@Qty,@UnitPrice,@Type,@Amount,@IsCustomerGem)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@OrderInvoiceGemsItemID", DbType.String, dr.Item("OrderInvoiceGemsItemID"))
                    DB.AddInParameter(DBCommSQL, "@OrderReceiveDetailID", DbType.String, dr.Item("OrderReceiveDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTW", DbType.Decimal, dr.Item("GemsTW"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@UnitPrice", DbType.Int64, dr.Item("UnitPrice"))
                    DB.AddInParameter(DBCommSQL, "@Type", DbType.String, dr.Item("Type"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@IsCustomerGem", DbType.Boolean, dr.Item("IsCustomerGem"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertOrderInvoiceGemsItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertOrderInvoiceGemsItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertOrderReturnHeader(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try
                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteOrderReturnHeader(dr)

                    strCommandText = "Insert into tbl_OrderReturnHeader (OrderReturnHeaderID,ReturnDate, OrderInvoiceID, AllTotalAmount, AllAddOrSub, FromGoldAmount, StaffID, IsAddGold, Remark, DiscountAmount, BalanceAmount, PaidAmount, AdvanceAmount, LocationID, LastModifiedLoginUserName, LastModifiedDate,AllTaxAmt,IsDelete,IsSync,AddGoldTaxPer,AddGoldTax)"
                    strCommandText += " Values (@OrderReturnHeaderID,@ReturnDate, @OrderInvoiceID, @AllTotalAmount, @AllAddOrSub, @FromGoldAmount, @StaffID, @IsAddGold, @Remark, @DiscountAmount, @BalanceAmount, @PaidAmount,  @AdvanceAmount, @LocationID, @LastModifiedLoginUserName, @LastModifiedDate,@AllTaxAmt,@isDelete,@IsSync,@AddGoldTaxPer,@AddGoldTax)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@OrderReturnHeaderID", DbType.String, dr.Item("OrderReturnHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnDate", DbType.DateTime, dr.Item("ReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@OrderInvoiceID", DbType.String, dr.Item("OrderInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@AllTotalAmount", DbType.Int64, dr.Item("AllTotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AllAddOrSub", DbType.Int64, dr.Item("AllAddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@FromGoldAmount", DbType.Int64, dr.Item("FromGoldAmount"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@IsAddGold", DbType.Boolean, dr.Item("IsAddGold"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@DiscountAmount", DbType.Int64, dr.Item("DiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@BalanceAmount", DbType.Int64, dr.Item("BalanceAmount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@AdvanceAmount", DbType.Int64, dr.Item("AdvanceAmount"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@AllTaxAmt", DbType.Int32, dr.Item("AllTaxAmt"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@AddGoldTaxPer", DbType.Decimal, dr.Item("AddGoldTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@AddGoldTax", DbType.Int32, dr.Item("AddGoldTax"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertOrderReturnHeader : " & ex.Message)
                    End Try

                    Dim dtreceive As DataTable
                    Dim dtreturn As New DataTable
                    Dim ReceiveQTY As Integer = 0
                    Dim ReturnQTY As Integer = 0
                    dtreceive = _objOrderInvoiceDA.GetOrderReceiveDetail(dr.Item("OrderInvoiceID"))
                    ReceiveQTY = dtreceive.Rows.Count
                    dtreturn = _objOrderInvoiceDA.GetOrderReturnDetailByOrderInvoiceID(dr.Item("OrderInvoiceID"))
                    ReturnQTY = dtreturn.Rows.Count

                    If (ReceiveQTY = ReturnQTY) Then
                        strCommandText = "update tbl_orderinvoice  set isRetrieved=1  " & _
                                                            " Where OrderInvoiceID=@OrderInvoiceID "

                        DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                        DB.AddInParameter(DBCommSQL, "@OrderInvoiceID", DbType.String, dr.Item("OrderInvoiceID"))
                        DB.ExecuteNonQuery(DBCommSQL)
                    End If


                   

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_OrderReturnDetail where OrderReturnHeaderID ='" & dr.Item("OrderReturnHeaderID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteOrderReturnDetail(dr)
                    ImportInsertOrderReturnDetail(Connstr, da, DBcomm, dr.Item("OrderReturnHeaderID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertOrderReturnHeader : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertOrderReturnDetail(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal OrderReturnHeaderID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                Dim strgetId As String
                Dim id As Integer = 0

                ' strgetId = "Select Max(OrderReturnHeaderID) from tbl_OrderReturnHeader"
                'DBcomm = DB.GetSqlStringCommand(strgetId)
                ' id = CInt(DB.ExecuteScalar(DBcomm))

                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_OrderReturnDetail ( OrderInvoiceDetailID, OrderReturnHeaderID, ForSaleID, ItemCode, SalesRate, GoldPrice, GemsPrice, TotalAmount, AddOrSub, IsOriginalFixedPrice, OriginalFixedPrice, IsOriginalPriceGram, OriginalPriceGram, OriginalPriceTK, OriginalGemsPrice, OriginalOtherPrice, PurchaseWasteTK, PurchaseWasteTG, IsReturn,ItemTaxPer,ItemTax)"
                    strCommandText += " Values (@OrderInvoiceDetailID, @OrderReturnHeaderID, @ForSaleID, @ItemCode, @SalesRate, @GoldPrice, @GemsPrice, @TotalAmount, @AddOrSub, @IsOriginalFixedPrice, @OriginalFixedPrice, @IsOriginalPriceGram, @OriginalPriceGram, @OriginalPriceTK, @OriginalGemsPrice, @OriginalOtherPrice, @PurchaseWasteTK, @PurchaseWasteTG, @IsReturn,@ItemTaxPer,@ItemTax)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@OrderInvoiceDetailID", DbType.String, dr.Item("OrderInvoiceDetailID"))
                    DB.AddInParameter(DBCommSQL, "@OrderReturnHeaderID", DbType.String, dr.Item("OrderReturnHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Int32, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int32, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@GemsPrice", DbType.Int32, dr.Item("GemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int32, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalFixedPrice", DbType.Boolean, dr.Item("IsOriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int64, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalPriceGram", DbType.Boolean, dr.Item("IsOriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceGram", DbType.Int64, dr.Item("OriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceTK", DbType.Int64, dr.Item("OriginalPriceTK"))
                    DB.AddInParameter(DBCommSQL, "@OriginalGemsPrice", DbType.Int64, dr.Item("OriginalGemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalOtherPrice", DbType.Int64, dr.Item("OriginalOtherPrice"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseWasteTK", DbType.Decimal, dr.Item("PurchaseWasteTK"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseWasteTG", DbType.Decimal, dr.Item("PurchaseWasteTG"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))
                    DB.AddInParameter(DBCommSQL, "@ItemTaxPer", DbType.Decimal, dr.Item("ItemTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@ItemTax", DbType.Int32, dr.Item("ItemTax"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertOrderReturnDetail : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                              & " FROM tbl_OrderReturnGemsItem where OrderInvoiceDetailID ='" & dr.Item("OrderInvoiceDetailID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteOrderReturnGemsItem(dr)
                    ImportInsertOrderReturnGemsItem(Connstr, da, DBcomm, dr.Item("OrderInvoiceDetailID"), tmpdt2)
                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertOrderReturnDetail : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertOrderReturnGemsItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal OrderReturnDetailID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "INSERT INTO tbl_OrderReturnGemsItem ( OrderReturnGemID, OrderInvoiceDetailID, GemsCategoryID, GemsName, GemsTK, GemsTG, YOrCOrG, GemsTW, Qty, SaleType, UnitPrice, Amount, GemsRemark,GemTaxPer,GemTax)"
                    strCommandText += " VALUES(@OrderReturnGemID, @OrderInvoiceDetailID, @GemsCategoryID, @GemsName, @GemsTK, @GemsTG, @YOrCOrG, @GemsTW, @Qty, @SaleType, @UnitPrice, @Amount, @GemsRemark,@GemTaxPer,@GemTax)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@OrderReturnGemID", DbType.String, dr.Item("OrderReturnGemID"))
                    DB.AddInParameter(DBCommSQL, "@OrderInvoiceDetailID", DbType.String, dr.Item("OrderInvoiceDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GemsName", DbType.String, dr.Item("GemsName"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@YOrCOrG", DbType.String, dr.Item("YOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTW", DbType.Decimal, dr.Item("GemsTW"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@SaleType", DbType.String, dr.Item("SaleType"))
                    DB.AddInParameter(DBCommSQL, "@UnitPrice", DbType.Int64, dr.Item("UnitPrice"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@GemsRemark", DbType.String, dr.Item("GemsRemark"))
                    DB.AddInParameter(DBCommSQL, "@GemTaxPer", DbType.Decimal, dr.Item("GemTaxPer"))
                    DB.AddInParameter(DBCommSQL, "@GemTax", DbType.Int32, dr.Item("GemTax"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertOrderReturnGemsItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertOrderReturnGemsItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertMortgageInvoice(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteMortgageInvoice(dr)

                    strCommandText = "Insert into tbl_MortgageInvoice ( MortgageInvoiceID,ReceiveDate,MortgageStaff,InterestRate,CustomerID,TotalAmount,TotalQTY,Remark,IsReturn,InterestPeriod,IsPayback,LastModifiedLoginUserName,LastModifiedDate,LocationID,MortgageInvoiceCode,IsUpload,IsDelete,IsDisable,DisableDate,ReturnDate,InterestAmount,NetAmount,AddOrSub,PaidAmount,RRemark,IsRepayByHeadOffice,PaybackAmt,PaybackInterestAmt)"
                    strCommandText += " Values (@MortgageInvoiceID,@ReceiveDate,@MortgageStaff,@InterestRate,@CustomerID,@TotalAmount,@TotalQTY,@Remark,@IsReturn,@InterestPeriod,@IsPayback,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@MortgageInvoiceCode,@IsUpload,@IsDelete,@IsDisable,@DisableDate,@ReturnDate,@InterestAmount,@NetAmount,@AddOrSub,@PaidAmount,@RRemark,@IsRepayByHeadOffice,@PaybackAmt,@PaybackInterestAmt)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceID", DbType.String, dr.Item("MortgageInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@ReceiveDate", DbType.DateTime, dr.Item("ReceiveDate"))
                    DB.AddInParameter(DBCommSQL, "@MortgageStaff", DbType.String, dr.Item("MortgageStaff"))
                    DB.AddInParameter(DBCommSQL, "@InterestRate", DbType.Int32, dr.Item("InterestRate"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@TotalQTY", DbType.Int64, dr.Item("TotalQTY"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))
                    DB.AddInParameter(DBCommSQL, "@InterestPeriod", DbType.Int32, dr.Item("InterestPeriod"))
                    DB.AddInParameter(DBCommSQL, "@IsPayback", DbType.Boolean, dr.Item("IsPayback"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceCode", DbType.String, dr.Item("MortgageInvoiceCode"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsDisable", DbType.Boolean, dr.Item("IsDisable"))
                    DB.AddInParameter(DBCommSQL, "@DisableDate", DbType.DateTime, dr.Item("DisableDate"))
                    DB.AddInParameter(DBCommSQL, "@ReturnDate", DbType.DateTime, dr.Item("ReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@InterestAmount", DbType.Int64, dr.Item("InterestAmount"))
                    DB.AddInParameter(DBCommSQL, "@NetAmount", DbType.Int64, dr.Item("NetAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@RRemark", DbType.String, dr.Item("RRemark"))
                    DB.AddInParameter(DBCommSQL, "@IsRepayByHeadOffice", DbType.Boolean, dr.Item("IsRepayByHeadOffice"))
                    DB.AddInParameter(DBCommSQL, "@PaybackAmt", DbType.Int64, dr.Item("PaybackAmt"))
                    DB.AddInParameter(DBCommSQL, "@PaybackInterestAmt", DbType.Int64, dr.Item("PaybackInterestAmt"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertMortgageInvoice : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_MortgageInvoiceItem where MortgageInvoiceID ='" & dr.Item("MortgageInvoiceID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteMortgageInvoiceItem(dr)
                    ImportInsertMortgageInvoiceItem(Connstr, da, DBcomm, dr.Item("MortgageInvoiceID"), tmpdt2)

                    'strCommandText = "SELECT  * " _
                    '            & " FROM tbl_MortgagePayback where MortgageInvoiceID ='" & dr.Item("MortgageInvoiceID") & "'"
                    'Dim tmpdt3 As DataTable
                    'DBcomm = Nothing
                    'DBcomm = Connstr.CreateCommand
                    'DBcomm.CommandType = CommandType.Text
                    'DBcomm.CommandText = strCommandText
                    'da = New OleDbDataAdapter
                    'da.SelectCommand = DBcomm
                    'tmpdt3 = New DataTable
                    'da.Fill(tmpdt3)

                    ''ImportDeleteMortgagePayback(dr)
                    'ImportInsertMortgagePayback(Connstr, da, DBcomm, dr.Item("MortgageInvoiceID"), tmpdt3)

                    'strCommandText = "SELECT  * " _
                    '            & " FROM tbl_MortgageInterest where MortgageInvoiceID ='" & dr.Item("MortgageInvoiceID") & "'"
                    'Dim tmpdt4 As DataTable
                    'DBcomm = Nothing
                    'DBcomm = Connstr.CreateCommand
                    'DBcomm.CommandType = CommandType.Text
                    'DBcomm.CommandText = strCommandText
                    'da = New OleDbDataAdapter
                    'da.SelectCommand = DBcomm
                    'tmpdt4 = New DataTable
                    'da.Fill(tmpdt4)

                    'ImportDeleteMortgageInterest(dr)
                    'ImportInsertMortgageInterest(Connstr, da, DBcomm, dr.Item("MortgageInvoiceID"), tmpdt4)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMortgageInvoice : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertMortgageInvoiceItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal MortgageInvoiceID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_MortgageInvoiceItem ( MortgageItemID,MortgageInvoiceID,GoldQualityID,ItemCategoryID,ItemNameID,ItemName,QTY,GoldTK,GoldTG,Amount,MortgageRate,IsDone,DonePercent,isPayback,MortgageItemCode)"
                    strCommandText += " Values (@MortgageItemID,@MortgageInvoiceID,@GoldQualityID,@ItemCategoryID,@ItemNameID,@ItemName,@QTY,@GoldTK,@GoldTG,@Amount,@MortgageRate,@IsDone,@DonePercent,@isPayback,@MortgageItemCode)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@MortgageItemID", DbType.String, dr.Item("MortgageItemID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceID", DbType.String, dr.Item("MortgageInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@ItemName", DbType.String, dr.Item("ItemName"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@MortgageRate", DbType.Int32, dr.Item("MortgageRate"))
                    DB.AddInParameter(DBCommSQL, "@IsDone", DbType.Boolean, dr.Item("IsDone"))
                    DB.AddInParameter(DBCommSQL, "@DonePercent", DbType.String, dr.Item("DonePercent"))
                    DB.AddInParameter(DBCommSQL, "@isPayback", DbType.Boolean, dr.Item("isPayback"))
                    DB.AddInParameter(DBCommSQL, "@MortgageItemCode", DbType.String, dr.Item("MortgageItemCode"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertMortgageInvoiceItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMortgageInvoiceItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertMortgagePayback(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteMortgagePayback(dr)
                    strCommandText = "Insert into tbl_MortgagePayback ( MortgagePaybackID,MortgageInvoiceID,FromDate,ToDate,PaybackAmount,PaidAmount,LastModifiedLoginUserName,LastModifiedDate,LocationID,PaybackDate,DiscountAmount,Remark,IsUpload,InterestAmt,TotalAmount,isDelete)"
                    strCommandText += " Values (@MortgagePaybackID,@MortgageInvoiceID,@FromDate,@ToDate,@PaybackAmount,@PaidAmount, @LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@PaybackDate, @DiscountAmount,@Remark,@IsUpload,@InterestAmt,@TotalAmount,@isDelete)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@MortgagePaybackID", DbType.String, dr.Item("MortgagePaybackID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceID", DbType.String, dr.Item("MortgageInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@FromDate", DbType.DateTime, dr.Item("FromDate"))
                    DB.AddInParameter(DBCommSQL, "@ToDate", DbType.DateTime, dr.Item("ToDate"))
                    DB.AddInParameter(DBCommSQL, "@PaybackAmount", DbType.Int64, dr.Item("PaybackAmount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@PaybackDate", DbType.DateTime, dr.Item("PaybackDate"))
                    DB.AddInParameter(DBCommSQL, "@DiscountAmount", DbType.Int32, dr.Item("DiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@InterestAmt", DbType.Int64, dr.Item("InterestAmt"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertMortgagePayback : " & ex.Message)
                    End Try


                    strCommandText = "SELECT  *  " _
                                & " FROM tbl_MortgagePaybackItem where MortgagePaybackID ='" & dr.Item("MortgagePaybackID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteMortgagePaybackItem(dr)
                    ImportInsertMortgagePaybackItem(Connstr, da, DBcomm, dr.Item("MortgagePaybackID"), tmpdt2)


                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMortgagePayback : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertMortgageReturn(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteMortgageReturn(dr)
                    strCommandText = "Insert into tbl_MortgageReturn ( MortgageReturnID,MortgageInvoiceID,FromDate,ToDate,ReturnAmount,PaidAmount,InterestAmount,AddOrSub,LastLoginUserName,LastModifiedDate,LocationID,ReturnDate,IsUpload,Remark,IsDelete,TotalAmount)"
                    strCommandText += " Values (@MortgageReturnID,@MortgageInvoiceID,@FromDate,@ToDate,@ReturnAmount,@PaidAmount,@InterestAmount, @AddOrSub, @LastLoginUserName,@LastModifiedDate,@LocationID,@ReturnDate,@IsUpload,@Remark,@IsDelete,@TotalAmount)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@MortgageReturnID", DbType.String, dr.Item("MortgageReturnID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceID", DbType.String, dr.Item("MortgageInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@FromDate", DbType.DateTime, dr.Item("FromDate"))
                    DB.AddInParameter(DBCommSQL, "@ToDate", DbType.DateTime, dr.Item("ToDate"))
                    DB.AddInParameter(DBCommSQL, "@ReturnAmount", DbType.Int64, dr.Item("ReturnAmount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@InterestAmount", DbType.Int64, dr.Item("InterestAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@LastLoginUserName", DbType.String, dr.Item("LastLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnDate", DbType.DateTime, dr.Item("ReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertMortgageReturn : " & ex.Message)
                    End Try


                    strCommandText = "SELECT  *  " _
                                & " FROM tbl_MortgageReturnItem where MortgageReturnID ='" & dr.Item("MortgageReturnID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteMortgageReturnItem(dr)
                    ImportInsertMortgageReturnItem(Connstr, da, DBcomm, dr.Item("MortgageReturnID"), tmpdt2)


                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMortgageReturn : " & ex.Message)
                Return False
            End Try
            Return True
        End Function


        Private Function ImportInsertMortgageInterest(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)

            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteMortgageInterest(dr)
                    strCommandText = "Insert into tbl_MortgageInterest ( MortgageInterestID,MortgageInvoiceID,FromDate,ToDate,InterestAmount,PaidAmount,InterestPaidDate,DiscountAmount,LastModifiedLoginUserName,LastModifiedDate,LocationID,Remark,IsUpload,IsDelete,InterestMonth)"
                    strCommandText += " Values (@MortgageInterestID,@MortgageInvoiceID,@FromDate,@ToDate,@InterestAmount,@PaidAmount,@InterestPaidDate, @DiscountAmount, @LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@Remark,@IsUpload,@IsDelete,@InterestMonth)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@MortgageInterestID", DbType.String, dr.Item("MortgageInterestID"))
                    DB.AddInParameter(DBCommSQL, "@MortgageInvoiceID", DbType.String, dr.Item("MortgageInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@FromDate", DbType.DateTime, dr.Item("FromDate"))
                    DB.AddInParameter(DBCommSQL, "@ToDate", DbType.DateTime, dr.Item("ToDate"))
                    DB.AddInParameter(DBCommSQL, "@InterestAmount", DbType.Int64, dr.Item("InterestAmount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@InterestPaidDate", DbType.DateTime, dr.Item("InterestPaidDate"))
                    DB.AddInParameter(DBCommSQL, "@DiscountAmount", DbType.Int32, dr.Item("DiscountAmount"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@InterestMonth", DbType.Int32, dr.Item("InterestMonth"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertMortgageInterest : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertMortgageInterest : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertConsignmentSale(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteConsignmentSale(dr)

                    strCommandText = "Insert into tbl_ConsignmentSale ( ConsignmentSaleID,ConsignDate,WholesaleInvoiceID,StaffID,CustomerID,Remark,NetAmount,AddOrSub,Discount,PaidAmount,LastModifiedLoginUserName,LastModifiedDate,LocationID,IsUpload,IsDelete,JC_IsUpload,PurchaseHeaderID,PurchaseAmount,MemberID,MemberName,MemberCode,RedeemID,TopupPoint,TopupValue,RedeemPoint,RedeemValue,IsRedeemInvoice,MemberDis,MemberDiscountAmt,TransactionID,InvoiceStatus)"
                    strCommandText += " Values (@ConsignmentSaleID,@ConsignDate,@WholesaleInvoiceID,@StaffID,@CustomerID,@Remark,@NetAmount,@AddOrSub,@Discount,@PaidAmount,@LastModifiedLoginUserName,@LastModifiedDate,@LocationID,@IsUpload,@IsDelete,@JC_IsUpload,@PurchaseHeaderID,@PurchaseAmount,@MemberID,@MemberName,@MemberCode,@RedeemID,@TopupPoint,@TopupValue,@RedeemPoint,@RedeemValue,@IsRedeemInvoice,@MemberDis,@MemberDiscountAmt,@TransactionID,@InvoiceStatus)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ConsignmentSaleID", DbType.String, dr.Item("ConsignmentSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ConsignDate", DbType.DateTime, dr.Item("ConsignDate"))
                    DB.AddInParameter(DBCommSQL, "@WholesaleInvoiceID", DbType.String, dr.Item("WholesaleInvoiceID"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@CustomerID", DbType.String, dr.Item("CustomerID"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@NetAmount", DbType.Int64, dr.Item("NetAmount"))
                    DB.AddInParameter(DBCommSQL, "@AddOrSub", DbType.Int64, dr.Item("AddOrSub"))
                    DB.AddInParameter(DBCommSQL, "@Discount", DbType.Int32, dr.Item("Discount"))
                    DB.AddInParameter(DBCommSQL, "@PaidAmount", DbType.Int64, dr.Item("PaidAmount"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@IsUpload", DbType.Boolean, dr.Item("IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@JC_IsUpload", DbType.Boolean, dr.Item("JC_IsUpload"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseAmount", DbType.Int64, dr.Item("PurchaseAmount"))
                    DB.AddInParameter(DBCommSQL, "@MemberID", DbType.String, dr.Item("MemberID"))
                    DB.AddInParameter(DBCommSQL, "@MemberName", DbType.String, dr.Item("MemberName"))
                    DB.AddInParameter(DBCommSQL, "@MemberCode", DbType.String, dr.Item("MemberCode"))
                    DB.AddInParameter(DBCommSQL, "@RedeemID", DbType.String, dr.Item("RedeemID"))
                    DB.AddInParameter(DBCommSQL, "@TopupPoint", DbType.Int32, dr.Item("TopupPoint"))
                    DB.AddInParameter(DBCommSQL, "@TopupValue", DbType.Int32, dr.Item("TopupValue"))
                    DB.AddInParameter(DBCommSQL, "@RedeemPoint", DbType.Int32, dr.Item("RedeemPoint"))
                    DB.AddInParameter(DBCommSQL, "@RedeemValue", DbType.Int32, dr.Item("RedeemValue"))
                    DB.AddInParameter(DBCommSQL, "@IsRedeemInvoice", DbType.Boolean, dr.Item("IsRedeemInvoice"))
                    DB.AddInParameter(DBCommSQL, "@MemberDis", DbType.Int32, dr.Item("MemberDis"))
                    DB.AddInParameter(DBCommSQL, "@MemberDiscountAmt", DbType.Int32, dr.Item("MemberDiscountAmt"))
                    DB.AddInParameter(DBCommSQL, "@TransactionID", DbType.String, dr.Item("TransactionID"))
                    DB.AddInParameter(DBCommSQL, "@InvoiceStatus", DbType.Int32, dr.Item("InvoiceStatus"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertConsignmentSale : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_ConsignmentSaleItem where ConsignmentSaleID ='" & dr.Item("ConsignmentSaleID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteConsignmentSaleItem(dr)
                    ImportInsertConsignmentSaleItem(Connstr, da, DBcomm, dr.Item("ConsignmentSaleID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertConsignmentSale : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertConsignmentSaleItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal ConsignmentSaleID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "Insert into tbl_ConsignmentSaleItem ( ConsignmentSaleItemID,ConsignmentSaleID,ForSaleID,ItemNameID,GoldQualityID,ItemCode,IsReturn,IsSale,SalesRate,ItemTK,ItemTG,GemsTK,GemsTG,WasteTK,WasteTG,GoldTK,GoldTG,GoldPrice,FixPrice)"
                    strCommandText += " Values (@ConsignmentSaleItemID,@ConsignmentSaleID,@ForSaleID,@ItemNameID,@GoldQualityID,@ItemCode,@IsReturn,@IsSale,@SalesRate,@ItemTK,@ItemTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@GoldTK,@GoldTG,@GoldPrice,@FixPrice)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ConsignmentSaleItemID", DbType.String, dr.Item("ConsignmentSaleItemID"))
                    DB.AddInParameter(DBCommSQL, "@ConsignmentSaleID", DbType.String, dr.Item("ConsignmentSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@IsReturn", DbType.Boolean, dr.Item("IsReturn"))
                    DB.AddInParameter(DBCommSQL, "@IsSale", DbType.Boolean, dr.Item("IsSale"))
                    DB.AddInParameter(DBCommSQL, "@SalesRate", DbType.Int64, dr.Item("SalesRate"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@GoldPrice", DbType.Int64, dr.Item("GoldPrice"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int64, dr.Item("FixPrice"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertConsignmentSaleItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertConsignmentSaleItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertDailyExpense(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteDailyExpense(dr)

                    strCommandText = " INSERT INTO tbl_DailyExpense "
                    strCommandText += " (DailyExpenseID, ExpenseDate, Remark, TotalAmount, LocationID,ReturnAmount,LastModifiedLoginUserName, LastModifiedDate,IsDelete,IsSync,IsBank) "
                    strCommandText += " Values( @DailyExpenseID, @ExpenseDate, @Remark, @TotalAmount, @LocationID,@ReturnAmount,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@IsBank) "

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@DailyExpenseID", DbType.String, dr.Item("DailyExpenseID"))
                    DB.AddInParameter(DBCommSQL, "@ExpenseDate", DbType.DateTime, dr.Item("ExpenseDate"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@ReturnAmount", DbType.Int64, dr.Item("ReturnAmount"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@IsBank", DbType.Boolean, dr.Item("IsBank"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertDailyExpense : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                              & " FROM tbl_DailyExpenseItem where DailyExpenseID ='" & dr.Item("DailyExpenseID") & "'"
                    Dim tmpdt3 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt3 = New DataTable
                    da.Fill(tmpdt3)

                    ImportDeleteDailyExpenseItem(dr)
                    ImportInsertDailyExpenseItem(Connstr, da, DBcomm, dr.Item("DailyExpenseID"), tmpdt3)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertDailyExpense : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertDailyExpenseItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal DailyExpenseID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "INSERT INTO tbl_DailyExpenseItem "
                    strCommandText += " (DailyExpenseItemID, DailyExpenseID, Description, QTY, UnitPrice, Amount,Remark,LastModifiedDate,LastModifiedLoginUserName) "
                    strCommandText += " VALUES ( @DailyExpenseItemID, @DailyExpenseID, @Description, @QTY, @UnitPrice, @Amount,@Remark,@LastModifiedDate,@LastModifiedLoginUserName) "

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@DailyExpenseItemID", DbType.String, dr.Item("DailyExpenseItemID"))
                    DB.AddInParameter(DBCommSQL, "@DailyExpenseID", DbType.String, dr.Item("DailyExpenseID"))
                    DB.AddInParameter(DBCommSQL, "@Description", DbType.String, dr.Item("Description"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int64, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@UnitPrice", DbType.Int64, dr.Item("UnitPrice"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertDailyExpenseItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertDailyExpenseItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertDailyIncome(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteDailyIncome(dr)

                    strCommandText = " INSERT INTO tbl_DailyIncome "
                    strCommandText += " (DailyIncomeID, IncomeDate, Remark, TotalAmount,LocationID,LastModifiedDate,LastModifiedLoginUserName,IsDelete,IsSync,IsBank) "
                    strCommandText += " Values( @DailyIncomeID, @IncomeDate, @Remark, @TotalAmount,@LocationID,@LastModifiedDate,@LastModifiedLoginUserName,@IsDelete,@IsSync,@IsBank) "

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@DailyIncomeID", DbType.String, dr.Item("DailyIncomeID"))
                    DB.AddInParameter(DBCommSQL, "@IncomeDate", DbType.DateTime, dr.Item("IncomeDate"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@TotalAmount", DbType.Int64, dr.Item("TotalAmount"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@IsBank", DbType.Boolean, dr.Item("IsBank"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertDailyIncome : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                              & " FROM tbl_DailyIncomeItem where DailyIncomeID ='" & dr.Item("DailyIncomeID") & "'"
                    Dim tmpdt3 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt3 = New DataTable
                    da.Fill(tmpdt3)

                    ImportDeleteDailyIncomeItem(dr)
                    ImportInsertDailyIncomeItem(Connstr, da, DBcomm, dr.Item("DailyIncomeID"), tmpdt3)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertDailyIncome : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertDailyIncomeItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal DailyIncomeID As String, ByVal tmpdt As DataTable)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    strCommandText = "INSERT INTO tbl_DailyIncomeItem "
                    strCommandText += " (DailyIncomeItemID, DailyIncomeID,Description,QTY,UnitPrice,Amount,Remark,LastModifiedDate,LastModifiedLoginUserName) "
                    strCommandText += " VALUES ( @DailyIncomeItemID, @DailyIncomeID,@Description, @QTY,@UnitPrice, @Amount,@Remark,@LastModifiedDate,@LastModifiedLoginUserName) "

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@DailyIncomeItemID", DbType.String, dr.Item("DailyIncomeItemID"))
                    DB.AddInParameter(DBCommSQL, "@DailyIncomeID", DbType.String, dr.Item("DailyIncomeID"))
                    DB.AddInParameter(DBCommSQL, "@Description", DbType.String, dr.Item("Description"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int64, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@UnitPrice", DbType.Int64, dr.Item("UnitPrice"))
                    DB.AddInParameter(DBCommSQL, "@Amount", DbType.Int64, dr.Item("Amount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertDailyIncomeItem : " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertDailyIncomeItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Private Function ImportInsertCashReceipt(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteCashReceipt(dr)

                    strCommandText = "Insert into tbl_CashReceipt ( CashReceiptID,VoucherNo,PayDate,PayAmount,Remark,LocationID,Type,IsBank,LastModifiedLoginUserName,LastModifiedDate,IsDelete,IsSync,ReturnAdvanceID)"
                    strCommandText += " Values (@CashReceiptID,@VoucherNo,@PayDate,@PayAmount,@Remark,@LocationID,@Type,@IsBank,@LastModifiedLoginUserName,@LastModifiedDate,@IsDelete,@IsSync,@ReturnAdvanceID)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@CashReceiptID", DbType.String, dr.Item("CashReceiptID"))
                    DB.AddInParameter(DBCommSQL, "@VoucherNo", DbType.String, dr.Item("VoucherNo"))
                    DB.AddInParameter(DBCommSQL, "@PayDate", DbType.Date, dr.Item("PayDate"))
                    DB.AddInParameter(DBCommSQL, "@PayAmount", DbType.Int32, dr.Item("PayAmount"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@Type", DbType.String, dr.Item("Type"))
                    DB.AddInParameter(DBCommSQL, "@IsBank", DbType.Boolean, dr.Item("IsBank"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.Date, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@ReturnAdvanceID", DbType.String, dr.Item("ReturnAdvanceID"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertCashReceipt: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertCashReceipt : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Private Function ImportInsertGeneralLedger(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal LocationID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows
                    ImportDeleteGeneralLedger(dr)

                    strCommandText = "Insert into tbl_generalledgerbylocation ( GLByLocationID,LocationID,GLDate,Title,DebitAmount,CreditAmount,Type,MyanTitle,LastModifiedDate)"
                    strCommandText += " Values (@GLByLocationID,@LocationID,@GLDate,@Title,@DebitAmount,@CreditAmount,@Type,@MyanTitle,@LastModifiedDate)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@GLByLocationID", DbType.String, dr.Item("GLByLocationID"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@GLDate", DbType.Date, dr.Item("GLDate"))
                    DB.AddInParameter(DBCommSQL, "@Title", DbType.String, dr.Item("Title"))
                    DB.AddInParameter(DBCommSQL, "@DebitAmount", DbType.Int64, dr.Item("DebitAmount"))
                    DB.AddInParameter(DBCommSQL, "@CreditAmount", DbType.Int64, dr.Item("CreditAmount"))
                    DB.AddInParameter(DBCommSQL, "@Type", DbType.String, dr.Item("Type"))
                    DB.AddInParameter(DBCommSQL, "@MyanTitle", DbType.String, dr.Item("MyanTitle"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.Date, dr.Item("LastModifiedDate"))

                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertGeneralLedger: " & ex.Message)
                    End Try

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertGeneralLedger : " & ex.Message)
                Return False
            End Try
            Return True
        End Function
        Public Function ImportDeleteGoldQuality(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_GoldQuality WHERE GoldQualityID =@GoldQualityID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function

        Public Function ImportDeleteMeasurement(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_Measurement WHERE FromMeasurement =@FromMeasurement"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@FromMeasurement", DbType.String, dr.Item("FromMeasurement"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function

        Public Function ImportDeleteItemCategory(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ItemCategory WHERE ItemCategoryID=@ItemCategoryID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteItemName(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ItemName WHERE ItemNameID=@ItemNameID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteShopItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ForSale WHERE ForSaleID=@ForSaleID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function

        Public Function ImportDeleteGemsCategory(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_GemsCategory WHERE GemsCategoryID=@GemsCategoryID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@GemsCategoryID", DbType.String, dr.Item("GemsCategoryID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteGoldSmith(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_GoldSmith WHERE GoldSmithID=@GoldSmithID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@GoldSmithID", DbType.String, dr.Item("GoldSmithID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteWaste(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_WasteSetupHeader WHERE WasteSetupHeaderID=@WasteSetupHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@WasteSetupHeaderID", DbType.String, dr.Item("WasteSetupHeaderID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteWasteItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_WasteSetupDetail WHERE WasteSetupHeaderID=@WasteSetupHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@WasteSetupHeaderID", DbType.String, dr.Item("WasteSetupHeaderID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteLocation(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_Location WHERE LocationID=@LocationID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@LocationID", DbType.String, dr.Item("LocationID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteCustomer(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_Customer WHERE CustomerID=@CustomerID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@CustomerID", DbType.String, dr.Item("CustomerID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSupplier(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_Supplier WHERE SupplierID=@SupplierID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SupplierID", DbType.String, dr.Item("SupplierID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteStaff(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_Staff WHERE StaffID=@StaffID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@StaffID", DbType.String, dr.Item("StaffID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteCurrentPrice(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_StandardRate WHERE DefineID=@DefineID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@DefineID", DbType.String, dr.Item("DefineID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteDiamondPrice(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_diamondpricerate WHERE DefineID=@DefineID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@DefineID", DbType.String, dr.Item("DefineID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransfer(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_Transfer WHERE TransferID =@TransferID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferID", DbType.String, dr.Item("TransferID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransferReturn(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_TransferReturn WHERE TransferReturnID =@TransferReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferReturnID", DbType.String, dr.Item("TransferReturnID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransferReturnItem(ByVal TransferReturnID As String)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_TransferReturnItem WHERE TransferReturnID =@TransferReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferReturnID", DbType.String, "TransferReturnID")

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransferItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_TransferItem WHERE TransferID =@TransferID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferID", DbType.String, dr.Item("TransferID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransferDiamond(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_TransferLooseDiamond WHERE TransferID =@TransferID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferID", DbType.String, dr.Item("TransferID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransferDiamondReturn(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_TransferReturnDiamond WHERE TransferReturnID =@TransferReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferReturnID", DbType.String, dr.Item("TransferReturnID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransferDiamondReturnItem(ByVal TransferReturnID As String)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_TransferReturnDiamondItem WHERE TransferReturnID =@TransferReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferReturnID", DbType.String, "TransferReturnID")

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteTransferDiamondItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_TransferLooseDiamondItem WHERE TransferID =@TransferID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@TransferID", DbType.String, dr.Item("TransferID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteForSale(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ForSale WHERE ForSaleID =@ForSaleID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function

        Public Function DeleteForSaleFromDB(ByVal ForSaleID As String, ByVal DatabasePath As String)
            Dim Connstr As OleDbConnection = New OleDbConnection(Me.CreateAccessConnectionString(DatabasePath, DBPassword))

            Dim Command As OleDbCommand
            Connstr.Open()

            Try
                Dim strCommandText As String

                strCommandText = "DELETE FROM tbl_ForSale WHERE ForSaleID =@ForSaleID"

                Command = New OleDbCommand(strCommandText, Connstr)
                Dim objParam As OleDbParameter = Command.Parameters.Add("@ForSaleID", OleDbType.VarChar)
                objParam.Value = ForSaleID
                'Command.ExecuteNonQuery()

                'DBComm = DB.GetSqlStringCommand(strCommandText)

                'DB.AddInParameter(DBComm, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))

                If Command.ExecuteNonQuery() > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
            Connstr.Close()
        End Function

        Private Function ImportInsertShopItem(ByVal Connstr As OleDbConnection, ByVal da As OleDbDataAdapter, ByVal DBcomm As DbCommand, ByVal tmpdt As DataTable, ByVal CompanyID As String)
            Try

                Dim strCommandText As String
                Dim DBCommSQL As DbCommand
                For Each dr As DataRow In tmpdt.Rows

                    ImportDeleteShopItem(dr)

                    strCommandText = "Insert into tbl_ForSale (ForSaleID,ItemCode,ItemNameID,Length,GoldQualityID,ItemCategoryID,GivenDate,GoldTK,GoldTG,GemsTK,GemsTG,WasteTK,WasteTG,ItemTK,ItemTG,TotalTK,TotalTG,IsExit,LastModifiedLoginUserName,LastModifiedDate,Width,IsFixPrice,FixPrice,DesignCharges,PlatingCharges,MountingCharges,WhiteCharges,IsOriginalFixedPrice,OriginalFixedPrice,IsOriginalPriceGram,OriginalPriceGram,OriginalPriceTK,OriginalGemsPrice,OriginalOtherPrice,Photo,SellingPrice,LocationID, IsClosed, IsOrder, IsVolume, QTY, StaffID, LossQTY, LossItemTK, LossItemTG,TotalGemPrice, PurchaseWasteTK, PurchaseWasteTG,OrderReceiveDetailID, GoldSmith, Remark,IsDiamond,OriginalCode,PriceCode,Color,IsDelete,IsSync,SupplierID,SupplierVou,GoldSmithID,ExitDate,WReturnDate,IsSolidVolume,SellingRate,isCheck,WSFixPrice,Shape,Clarity,OriginalPriceCarat,SDYOrCOrG,IsOriginalPriceCarat,SDGemsTW,IsLooseDiamond,SDGemsCategoryID,SDGemsName,TotalCost)"
                    strCommandText += " Values (@ForSaleID,@ItemCode,@ItemNameID,@Length,@GoldQualityID,@ItemCategoryID,@GivenDate,@GoldTK,@GoldTG,@GemsTK,@GemsTG,@WasteTK,@WasteTG,@ItemTK,@ItemTG,@TotalTK,@TotalTG,@IsExit,@LastModifiedLoginUserName,@LastModifiedDate,@Width,@IsFixPrice,@FixPrice,@DesignCharges,@PlatingCharges,@MountingCharges,@WhiteCharges,@IsOriginalFixedPrice,@OriginalFixedPrice,@IsOriginalPriceGram,@OriginalPriceGram,@OriginalPriceTK,@OriginalGemsPrice,@OriginalOtherPrice,@Photo,@SellingPrice, @LocationID, @IsClosed, @IsOrder, @IsVolume, @QTY, @StaffID, @LossQTY, @LossItemTK, @LossItemTG,@TotalGemPrice, @PurchaseWasteTK, @PurchaseWasteTG, @OrderReceiveDetailID, @GoldSmith, @Remark,@IsDiamond,@OriginalCode,@PriceCode,@Color,@IsDelete,@IsSync,@SupplierID,@SupplierVou,@GoldSmithID,@ExitDate,@WReturnDate,@IsSolidVolume,@SellingRate,@IsCheck,@WSFixPrice,@Shape,@Clarity,@OriginalPriceCarat,@SDYOrCOrG,@IsOriginalPriceCarat,@SDGemsTW,@IsLooseDiamond,@SDGemsCategoryID,@SDGemsName,@TotalCost)"

                    DBCommSQL = DB.GetSqlStringCommand(strCommandText)

                    DB.AddInParameter(DBCommSQL, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCode", DbType.String, dr.Item("ItemCode"))
                    DB.AddInParameter(DBCommSQL, "@ItemNameID", DbType.String, dr.Item("ItemNameID"))
                    DB.AddInParameter(DBCommSQL, "@Length", DbType.String, dr.Item("Length"))
                    DB.AddInParameter(DBCommSQL, "@GoldQualityID", DbType.String, dr.Item("GoldQualityID"))
                    DB.AddInParameter(DBCommSQL, "@ItemCategoryID", DbType.String, dr.Item("ItemCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@GivenDate", DbType.DateTime, dr.Item("GivenDate"))
                    DB.AddInParameter(DBCommSQL, "@GoldTK", DbType.Decimal, dr.Item("GoldTK"))
                    DB.AddInParameter(DBCommSQL, "@GoldTG", DbType.Decimal, dr.Item("GoldTG"))
                    DB.AddInParameter(DBCommSQL, "@GemsTK", DbType.Decimal, dr.Item("GemsTK"))
                    DB.AddInParameter(DBCommSQL, "@GemsTG", DbType.Decimal, dr.Item("GemsTG"))
                    DB.AddInParameter(DBCommSQL, "@WasteTK", DbType.Decimal, dr.Item("WasteTK"))
                    DB.AddInParameter(DBCommSQL, "@WasteTG", DbType.Decimal, dr.Item("WasteTG"))
                    DB.AddInParameter(DBCommSQL, "@ItemTK", DbType.Decimal, dr.Item("ItemTK"))
                    DB.AddInParameter(DBCommSQL, "@ItemTG", DbType.Decimal, dr.Item("ItemTG"))
                    DB.AddInParameter(DBCommSQL, "@TotalTK", DbType.Decimal, dr.Item("TotalTK"))
                    DB.AddInParameter(DBCommSQL, "@TotalTG", DbType.Decimal, dr.Item("TotalTG"))
                    DB.AddInParameter(DBCommSQL, "@IsExit", DbType.Boolean, dr.Item("IsExit"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedLoginUserName", DbType.String, dr.Item("LastModifiedLoginUserName"))
                    DB.AddInParameter(DBCommSQL, "@LastModifiedDate", DbType.DateTime, dr.Item("LastModifiedDate"))
                    DB.AddInParameter(DBCommSQL, "@Width", DbType.String, dr.Item("Width"))
                    DB.AddInParameter(DBCommSQL, "@IsFixPrice", DbType.Boolean, dr.Item("IsFixPrice"))
                    DB.AddInParameter(DBCommSQL, "@FixPrice", DbType.Int64, dr.Item("FixPrice"))
                    DB.AddInParameter(DBCommSQL, "@DesignCharges", DbType.Int64, dr.Item("DesignCharges"))
                    DB.AddInParameter(DBCommSQL, "@PlatingCharges", DbType.Int64, dr.Item("PlatingCharges"))
                    DB.AddInParameter(DBCommSQL, "@MountingCharges", DbType.Int64, dr.Item("MountingCharges"))
                    DB.AddInParameter(DBCommSQL, "@WhiteCharges", DbType.Int64, dr.Item("WhiteCharges"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalFixedPrice", DbType.Boolean, dr.Item("IsOriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalFixedPrice", DbType.Int64, dr.Item("OriginalFixedPrice"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalPriceGram", DbType.Boolean, dr.Item("IsOriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceGram", DbType.Int64, dr.Item("OriginalPriceGram"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceTK", DbType.Int64, dr.Item("OriginalPriceTK"))
                    DB.AddInParameter(DBCommSQL, "@OriginalGemsPrice", DbType.Int64, dr.Item("OriginalGemsPrice"))
                    DB.AddInParameter(DBCommSQL, "@OriginalOtherPrice", DbType.Int64, dr.Item("OriginalOtherPrice"))
                    DB.AddInParameter(DBCommSQL, "@Photo", DbType.String, dr.Item("Photo"))
                    DB.AddInParameter(DBCommSQL, "@SellingPrice", DbType.String, dr.Item("SellingPrice"))
                    DB.AddInParameter(DBCommSQL, "@LocationID", DbType.String, dr.Item("LocationID"))
                    DB.AddInParameter(DBCommSQL, "@IsClosed", DbType.Boolean, dr.Item("IsClosed"))
                    DB.AddInParameter(DBCommSQL, "@IsOrder", DbType.Boolean, dr.Item("IsOrder"))
                    DB.AddInParameter(DBCommSQL, "@IsVolume", DbType.Boolean, dr.Item("IsVolume"))
                    DB.AddInParameter(DBCommSQL, "@QTY", DbType.Int32, dr.Item("QTY"))
                    DB.AddInParameter(DBCommSQL, "@StaffID", DbType.String, dr.Item("StaffID"))
                    DB.AddInParameter(DBCommSQL, "@LossQTY", DbType.Int32, dr.Item("LossQTY"))
                    DB.AddInParameter(DBCommSQL, "@LossItemTK", DbType.Decimal, dr.Item("LossItemTK"))
                    DB.AddInParameter(DBCommSQL, "@LossItemTG", DbType.Decimal, dr.Item("LossItemTG"))
                    DB.AddInParameter(DBCommSQL, "@TotalGemPrice", DbType.Int64, dr.Item("TotalGemPrice"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseWasteTK", DbType.Decimal, dr.Item("PurchaseWasteTK"))
                    DB.AddInParameter(DBCommSQL, "@PurchaseWasteTG", DbType.Decimal, dr.Item("PurchaseWasteTG"))
                    DB.AddInParameter(DBCommSQL, "@OrderReceiveDetailID", DbType.String, dr.Item("OrderReceiveDetailID"))
                    DB.AddInParameter(DBCommSQL, "@GoldSmith", DbType.String, dr.Item("GoldSmith"))
                    DB.AddInParameter(DBCommSQL, "@Remark", DbType.String, dr.Item("Remark"))
                    DB.AddInParameter(DBCommSQL, "@IsDiamond", DbType.Boolean, dr.Item("IsDiamond"))
                    DB.AddInParameter(DBCommSQL, "@OriginalCode", DbType.String, dr.Item("OriginalCode"))
                    DB.AddInParameter(DBCommSQL, "@PriceCode", DbType.String, dr.Item("PriceCode"))
                    DB.AddInParameter(DBCommSQL, "@Color", DbType.String, dr.Item("Color"))
                    DB.AddInParameter(DBCommSQL, "@IsDelete", DbType.Boolean, dr.Item("IsDelete"))
                    DB.AddInParameter(DBCommSQL, "@IsSync", DbType.Boolean, dr.Item("IsSync"))
                    DB.AddInParameter(DBCommSQL, "@SupplierID", DbType.String, dr.Item("SupplierID"))
                    DB.AddInParameter(DBCommSQL, "@SupplierVou", DbType.String, dr.Item("SupplierVou"))
                    DB.AddInParameter(DBCommSQL, "@GoldSmithID", DbType.String, dr.Item("GoldSmithID"))
                    DB.AddInParameter(DBCommSQL, "@ExitDate", DbType.DateTime, dr.Item("ExitDate"))
                    DB.AddInParameter(DBCommSQL, "@WReturnDate", DbType.DateTime, dr.Item("WReturnDate"))
                    DB.AddInParameter(DBCommSQL, "@IsSolidVolume", DbType.Boolean, dr.Item("IsSolidVolume"))
                    DB.AddInParameter(DBCommSQL, "@SellingRate", DbType.Int32, dr.Item("SellingRate"))
                    DB.AddInParameter(DBCommSQL, "@IsCheck", DbType.Boolean, dr.Item("IsCheck"))
                    DB.AddInParameter(DBCommSQL, "@WSFixPrice", DbType.Int32, dr.Item("WSFixPrice"))
                    DB.AddInParameter(DBCommSQL, "@Shape", DbType.String, dr.Item("Shape"))
                    DB.AddInParameter(DBCommSQL, "@Clarity", DbType.String, dr.Item("Clarity"))
                    DB.AddInParameter(DBCommSQL, "@OriginalPriceCarat", DbType.Int32, dr.Item("OriginalPriceCarat"))
                    DB.AddInParameter(DBCommSQL, "@SDYOrCOrG", DbType.String, dr.Item("SDYOrCOrG"))
                    DB.AddInParameter(DBCommSQL, "@IsOriginalPriceCarat", DbType.Boolean, dr.Item("IsOriginalPriceCarat"))
                    DB.AddInParameter(DBCommSQL, "@SDGemsTW", DbType.Decimal, dr.Item("SDGemsTW"))
                    DB.AddInParameter(DBCommSQL, "@IsLooseDiamond", DbType.Boolean, dr.Item("IsLooseDiamond"))
                    DB.AddInParameter(DBCommSQL, "@SDGemsCategoryID", DbType.String, dr.Item("SDGemsCategoryID"))
                    DB.AddInParameter(DBCommSQL, "@SDGemsName", DbType.String, dr.Item("SDGemsName"))
                    DB.AddInParameter(DBCommSQL, "@TotalCost", DbType.Int32, dr.Item("TotalCost"))
                    Try
                        DB.ExecuteNonQuery(DBCommSQL)
                    Catch ex As Exception
                        WriteEventlogs("ImportInsertForSale : " & ex.Message)
                    End Try

                    strCommandText = "SELECT  * " _
                                & " FROM tbl_forSaleGemsItem where ForSaleID ='" & dr.Item("ForSaleID") & "'"
                    Dim tmpdt2 As DataTable
                    DBcomm = Nothing
                    DBcomm = Connstr.CreateCommand
                    DBcomm.CommandType = CommandType.Text
                    DBcomm.CommandText = strCommandText
                    da = New OleDbDataAdapter
                    da.SelectCommand = DBcomm
                    tmpdt2 = New DataTable
                    da.Fill(tmpdt2)

                    ImportDeleteForSaleGemsItem(dr)
                    ImportInsertForSaleGemsItem(Connstr, da, DBcomm, dr.Item("ForSaleID"), tmpdt2)

                Next

            Catch ex As Exception
                WriteEventlogs("ImportInsertShopItem : " & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Public Function ImportDeleteForSaleGemsItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ForSaleGemsItem WHERE ForSaleID =@ForSaleID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@ForSaleID", DbType.String, dr.Item("ForSaleID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSaleInvoiceHeader(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SaleInvoiceHeader WHERE SaleInvoiceHeaderID=@SaleInvoiceHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SaleInvoiceHeaderID", DbType.String, dr.Item("SaleInvoiceHeaderID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSaleInvoiceDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SaleInvoiceDetail WHERE SaleInvoiceHeaderID =@SaleInvoiceHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@SaleInvoiceHeaderID", DbType.String, dr.Item("SaleInvoiceHeaderID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSaleLooseDiamondDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SaleLooseDiamondDetail WHERE SaleLooseDiamondID =@SaleLooseDiamondID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@SaleLooseDiamondID", DbType.String, dr.Item("SaleLooseDiamondID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSalesInvoiceGemItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SalesInvoiceGemItem WHERE SaleInvoiceDetailID =@SaleInvoiceDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@SaleInvoiceDetailID", DbType.String, dr.Item("SaleInvoiceDetailID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteMortgagePaybackItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_MortgagePaybackItem WHERE MortgagePaybackID =@MortgagePaybackID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@MortgagePaybackID", DbType.String, dr.Item("MortgagePaybackID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function

        Public Function ImportDeleteMortgageReturnItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_MortgageReturnItem WHERE MortgageReturnID =@MortgageReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@MortgageReturnID", DbType.String, dr.Item("MortgageReturnID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function


        Public Function ImportDeleteWholeSaleReturn(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_WholeSaleReturn WHERE WholeSaleReturnID=@WholeSaleReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@WholeSaleReturnID", DbType.String, dr.Item("WholeSaleReturnID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteWholeSaleReturnItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_WholeSaleReturnItem WHERE WholeSaleReturnID =@WholeSaleReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@WholeSaleReturnID", DbType.String, dr.Item("WholeSaleReturnID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteWholeSaleInvoice(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_WholeSaleInvoice WHERE WholeSaleInvoiceID=@WholeSaleInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@WholeSaleInvoiceID", DbType.String, dr.Item("WholeSaleInvoiceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteWholeSaleInvoiceItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_WholeSaleInvoiceItem WHERE WholeSaleInvoiceID =@WholeSaleInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@WholeSaleInvoiceID", DbType.String, dr.Item("WholeSaleInvoiceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSalesVolume(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SalesVolume WHERE SalesVolumeID=@SalesVolumeID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SalesVolumeID", DbType.String, dr.Item("SalesVolumeID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSalesVolumeDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SalesVolumeDetail WHERE SalesVolumeID =@SalesVolumeID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@SalesVolumeID", DbType.String, dr.Item("SalesVolumeID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSaleGems(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SaleGems WHERE SaleGemsID=@SaleGemsID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@SaleGemsID", DbType.String, dr.Item("SaleGemsID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteSaleGemsItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_SaleGemsItem WHERE SaleGemsID =@SaleGemsID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@SaleGemsID", DbType.String, dr.Item("SaleGemsID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteReturnAdvance(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ReturnAdvance WHERE ReturnAdvanceID=@ReturnAdvanceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ReturnAdvanceID", DbType.String, dr.Item("ReturnAdvanceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteReturnAdvanceItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ReturnAdvanceItem WHERE ReturnAdvanceID =@ReturnAdvanceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@ReturnAdvanceID", DbType.String, dr.Item("ReturnAdvanceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteReturnRepairHeader(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ReturnRepairHeader WHERE ReturnRepairID=@ReturnRepairID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ReturnRepairID", DbType.String, dr.Item("ReturnRepairID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        'Public Function ImportDeleteReturnRepairDetail(ByVal RepairDetailID As String)
        '    Try
        '        Dim strCommandText As String
        '        Dim DBComm As DbCommand

        '        strCommandText = "DELETE FROM tbl_ReturnRepairDetail WHERE RepairDetailID =@RepairDetailID"

        '        DBComm = DB.GetSqlStringCommand(strCommandText)

        '        DB.AddInParameter(DBComm, "@RepairDetailID", DbType.String, "RepairDetailID")

        '        If DB.ExecuteNonQuery(DBComm) > 0 Then
        '            Return True
        '        Else
        '            Return False
        '        End If

        '    Catch ex As Exception
        '        MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
        '        Return False
        '    End Try
        'End Function

        Public Function ImportDeleteReturnRepairDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ReturnRepairDetail WHERE ReturnRepairDetailID =@ReturnRepairDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@ReturnRepairDetailID", DbType.String, dr.Item("ReturnRepairDetailID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function

        Public Function ImportDeleteReturnRepairGems(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ReturnRepairGem WHERE ReturnRepairGemID =@ReturnRepairGemID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@ReturnRepairGemID", DbType.String, dr.Item("ReturnRepairGemID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteRepairHeader(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_RepairHeader WHERE RepairID=@RepairID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@RepairID", DbType.String, dr.Item("RepairID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteRepairDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_RepairDetail WHERE RepairID=@RepairID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@RepairID", DbType.String, dr.Item("RepairID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeletePurchaseOutItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_PurchaseOutItem WHERE PurchaseOutID=@PurchaseOutID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@PurchaseOutID", DbType.String, dr.Item("PurchaseOutID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeletePurchaseOutItemDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_PurchaseOutItemDetail WHERE PurchaseOutID=@PurchaseOutID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@PurchaseOutID", DbType.String, dr.Item("PurchaseOutID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeletePurchaseHeader(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_PurchaseHeader WHERE PurchaseHeaderID=@PurchaseHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeletePurchaseDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_PurchaseDetail WHERE PurchaseHeaderID=@PurchaseHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@PurchaseHeaderID", DbType.String, dr.Item("PurchaseHeaderID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeletePurchaseGems(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_PurchaseGem WHERE PurchaseDetailID=@PurchaseDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@PurchaseDetailID", DbType.String, dr.Item("PurchaseDetailID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeletePurchaseFromSupplier(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_PurchaseFromSupplier WHERE PurchaseFromSupplierID=@PurchaseFromSupplierID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@PurchaseFromSupplierID", DbType.String, dr.Item("PurchaseFromSupplierID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeletePurchaseFromSupplierItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_PurchaseFromSupplierItem WHERE PurchaseFromSupplierID=@PurchaseFromSupplierID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@PurchaseFromSupplierID", DbType.String, dr.Item("PurchaseFromSupplierID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteOrderInvoice(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_OrderInvoice WHERE OrderInvoiceID=@OrderInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@OrderInvoiceID", DbType.String, dr.Item("OrderInvoiceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteOrderReceiveDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_OrderReceiveDetail WHERE OrderInvoiceID=@OrderInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@OrderInvoiceID", DbType.String, dr.Item("OrderInvoiceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteOrderInvoiceGemsItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_OrderInvoiceGemsItem WHERE OrderReceiveDetailID=@OrderReceiveDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@OrderReceiveDetailID", DbType.String, dr.Item("OrderReceiveDetailID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteOrderReturnHeader(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_OrderReturnHeader WHERE OrderReturnHeaderID=@OrderReturnHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@OrderReturnHeaderID", DbType.String, dr.Item("OrderReturnHeaderID"))
                'DB.AddInParameter(DBComm, "@LocationID", DbType.String, dr.Item("LocationID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteOrderReturnDetail(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_OrderReturnDetail WHERE OrderReturnHeaderID=@OrderReturnHeaderID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@OrderReturnHeaderID", DbType.String, dr.Item("OrderReturnHeaderID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteOrderReturnGemsItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_OrderReturnGemsItem WHERE OrderInvoiceDetailID=@OrderInvoiceDetailID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@OrderInvoiceDetailID", DbType.String, dr.Item("OrderInvoiceDetailID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteMortgageInvoice(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_MortgageInvoice WHERE MortgageInvoiceID=@MortgageInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@MortgageInvoiceID", DbType.String, dr.Item("MortgageInvoiceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteMortgageInvoiceItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_MortgageInvoiceItem WHERE MortgageInvoiceID=@MortgageInvoiceID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@MortgageInvoiceID", DbType.String, dr.Item("MortgageInvoiceID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteMortgagePayback(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_MortgagePayback WHERE MortgagePaybackID=@MortgagePaybackID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@MortgagePaybackID", DbType.String, dr.Item("MortgagePaybackID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteMortgageReturn(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_MortgageReturn WHERE MortgageReturnID=@MortgageReturnID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@MortgageReturnID", DbType.String, dr.Item("MortgageReturnID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function

        Public Function ImportDeleteMortgageInterest(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_MortgageInterest WHERE MortgageInterestID=@MortgageInterestID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@MortgageInterestID", DbType.String, dr.Item("MortgageInterestID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteConsignmentSale(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ConsignmentSale WHERE ConsignmentSaleID=@ConsignmentSaleID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@ConsignmentSaleID", DbType.String, dr.Item("ConsignmentSaleID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteCashReceipt(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_CashReceipt WHERE CashReceiptID=@CashReceiptID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@CashReceiptID", DbType.String, dr.Item("CashReceiptID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteGeneralLedger(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_generalledgerbylocation WHERE GLByLocationID=@GLByLocationID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@GLByLocationID", DbType.String, dr.Item("GLByLocationID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteConsignmentSaleItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_ConsignmentSaleItem WHERE ConsignmentSaleID=@ConsignmentSaleID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@ConsignmentSaleID", DbType.String, dr.Item("ConsignmentSaleID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteDailyIncome(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_DailyIncome WHERE DailyIncomeID=@DailyIncomeID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@DailyIncomeID", DbType.String, dr.Item("DailyIncomeID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteDailyIncomeItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_DailyIncomeItem WHERE DailyIncomeID=@DailyIncomeID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@DailyIncomeID", DbType.String, dr.Item("DailyIncomeID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteDailyExpense(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_DailyExpense WHERE DailyExpenseID=@DailyExpenseID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@DailyExpenseID", DbType.String, dr.Item("DailyExpenseID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Function ImportDeleteDailyExpenseItem(ByVal dr As DataRow)
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand

                strCommandText = "DELETE FROM tbl_DailyExpenseItem WHERE DailyExpenseID=@DailyExpenseID"

                DBComm = DB.GetSqlStringCommand(strCommandText)

                DB.AddInParameter(DBComm, "@DailyExpenseID", DbType.String, dr.Item("DailyExpenseID"))

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
                Return False
            End Try
        End Function
        Public Sub WriteEventlogs(ByVal msg As String)
            eventLog1.WriteEntry(msg, EventLogEntryType.Error)
            SendEmail(msg, Global_CurrentLocationID, _MailServer, _FromEMail, _FromName, _User, _PWD, _ToEMail, _CCMail, _Port, _SMTP, _CompanyName)

        End Sub

        Public Function DeleteExportServiceData(ByVal cri As String) As Boolean Implements IDatabaseExportImportDA.DeleteExportServiceData
            Try
                Dim strCommandText As String
                Dim DBComm As DbCommand
                strCommandText = "DELETE FROM tbl_ExportServiceData WHERE 1=1 " & cri
                DBComm = DB.GetSqlStringCommand(strCommandText)
                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If

            Catch ex As Exception
                ''MsgBox(ex.ToString, MsgBoxStyle.Critical, "Point Of Sale")
                Return False
            End Try
        End Function
        Public Function InsertExportServiceData(ByVal objExport As CommonInfo.ExportDataInfo) As Boolean Implements IDatabaseExportImportDA.InsertExportServiceData
            Dim strCommandText As String
            Dim DBComm As DbCommand

            Try

                strCommandText = "Insert Into tbl_ExportServiceData (BranchID,OtherBranchID,TransactionType,BranchName,OtherBranchName,AllUse,ModifiedDate) Values  (@BranchID,@OtherBranchID,@TransactionType,@BranchName,@OtherBranchName,@AllUse,getdate())"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                '  DB.AddInParameter(DBComm, "@ExportID", DbType.String, objExport.ExportID)
                DB.AddInParameter(DBComm, "@ExportID", DbType.String, objExport.ExportID)
                DB.AddInParameter(DBComm, "@BranchID", DbType.String, objExport.LocationID)
                DB.AddInParameter(DBComm, "@OtherLocationID", DbType.String, objExport.OtherLocationID)
                DB.AddInParameter(DBComm, "@TransactionType", DbType.String, objExport.TransactionType)
                DB.AddInParameter(DBComm, "@LocationName", DbType.String, objExport.LocationName)
                DB.AddInParameter(DBComm, "@OtherLocationName", DbType.String, objExport.OtherLocationName)
                DB.AddInParameter(DBComm, "@AllUse", DbType.Boolean, objExport.AllUse)

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If
            Catch ex As Exception
                ''MsgBox(ex.Message, MsgBoxStyle.Critical, "Point Of Sale")
            End Try
        End Function
        
        Public Function GetExportServiceDataList(Optional ByVal cri As String = "") As System.Data.DataTable Implements IDatabaseExportImportDA.GetExportServiceDataList
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try

                strCommandText = " SELECT ExportID as [@ExportID], LocationID as [@BranchID],OtherLocationID as [@OtherBranchID],  LocationName as [Branch Name],OtherLocationName  as [Branch Lists],TransactionType as [Transaction Type],  AllUse as [All]    FROM  tbl_ExportData ESD WHERE 1=1  " & cri

                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetExportServiceDataList : " & ex.Message)
                Return New DataTable
            End Try
        End Function

        
        Public Function UpdateExportServiceData(ByVal objExport As CommonInfo.ExportDataInfo) As Boolean Implements IDatabaseExportImportDA.UpdateExportServiceData
            Dim strCommandText As String
            Dim DBComm As DbCommand

            Try

                strCommandText = "Update tbl_ExportData Set BranchID=@BranchID,OtherBranchID=@OtherBranchID,TransactionType=@TransactionType,BranchName=@BranchName,OtherBranchName=@OtherBranchName,AllUse=@AllUse,ModifiedDate=getdate() WHERE  ExportID=@ExportID"

                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@ExportID", DbType.String, objExport.ExportID)
                DB.AddInParameter(DBComm, "@BranchID", DbType.String, objExport.LocationID)
                DB.AddInParameter(DBComm, "@OtherLocationID", DbType.String, objExport.OtherLocationID)
                DB.AddInParameter(DBComm, "@TransactionType", DbType.String, objExport.TransactionType)
                DB.AddInParameter(DBComm, "@LocationName", DbType.String, objExport.LocationName)
                DB.AddInParameter(DBComm, "@OtherLocationName", DbType.String, objExport.OtherLocationName)
                DB.AddInParameter(DBComm, "@AllUse", DbType.Boolean, objExport.AllUse)

                If DB.ExecuteNonQuery(DBComm) > 0 Then
                    Return True
                Else
                    Return False
                End If
            Catch ex As Exception
                ''MsgBox(ex.Message, MsgBoxStyle.Critical, "Point Of Sale")
            End Try
        End Function

        Public Function SendEmail(ByVal msg As String, ByVal branchID As String, ByVal MailServer As String, ByVal FromEMail As String, ByVal FromName As String, ByVal User As String, ByVal PWD As String, ByVal ToEMail As String, ByVal CCMail As String, ByVal Port As String, ByVal SMTP As String, ByVal CompanyName As String) As Boolean Implements IDatabaseExportImportDA.SendEmail
            Dim mail As New Mail.MailMessage
            Dim SMTP_Msg As New Net.Mail.MailMessage
            Dim SMTP_Client As New Net.Mail.SmtpClient

            Dim toMail As String
            Dim EmailHeader As String = CompanyName & "(" & branchID & ")" & " GDrive Issues"

            Try


                If MailServer.Trim = "" Then
                    ' WriteMsg("Please Fill Mail Server")
                    Exit Function
                End If
                If FromEMail.Trim = "" Then
                    ' WriteMsg("Please Fill  From Mail")
                    Exit Function
                End If


                If User <> "" Then        '#SMTP Client Here
                    With SMTP_Client
                        .UseDefaultCredentials = False
                        .Credentials = New Net.NetworkCredential(User, PWD)
                        .EnableSsl = SMTP
                        .Host = MailServer
                        .TargetName = "STARTTLS/" & SMTP
                        .Port = Port
                    End With
                End If



                toMail = ToEMail
                If Not IsNothing(toMail) Then
                    If toMail <> "" Then
                        SMTP_Msg = New Net.Mail.MailMessage

                        Application.DoEvents()

                        With SMTP_Msg
                            .From = New Net.Mail.MailAddress(FromEMail)
                            .Subject = EmailHeader


                            .To.Add(CStr(ToEMail))


                            If CCMail <> "" Then
                                .CC.Add(New Net.Mail.MailAddress(CCMail))
                            End If

                            If msg <> "" Then

                                .Body = msg


                            End If

                            Try
                                SMTP_Client.Send(SMTP_Msg)      'Send Mail here


                            Catch ex As Exception

                            Finally

                            End Try
                        End With
                    Else

                    End If
                Else

                End If


            Catch Ex As Exception
                '   WriteMsg("Email cannot sent message : " & Ex.ToString)
            End Try


        End Function
        Public Function GetToMailCCMail(ByVal TransactionType As String) As CommonInfo.ExportDataInfo Implements IDatabaseExportImportDA.GetToMailCCMail
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim drResult As IDataReader
            Dim objExportDataInfo As New CommonInfo.ExportDataInfo
            Try
                strCommandText = " select ToMail,CCMail,CompanyName from tbl_ExportData where TransactionType= @TransactionType"
                DBComm = DB.GetSqlStringCommand(strCommandText)
                DB.AddInParameter(DBComm, "@TransactionType", DbType.String, TransactionType)
                drResult = DB.ExecuteReader(DBComm)
                If drResult.Read() Then
                    With objExportDataInfo
                        .ToMail = drResult("ToMail")
                        .CCMail = drResult("CCMail")
                        .CompanyName = drResult("CompanyName")

                    End With
                End If
                drResult.Close()
            Catch ex As Exception
                MsgBox(ex.ToString, MsgBoxStyle.Critical, "GoldSmith Management System")
            End Try
            Return objExportDataInfo
        End Function
        Public Function CreateDatabaseForMobileExportData(ByVal DatabasePath As String, ByVal posdate As DateTime, ByVal nowdate As DateTime, ByVal BranchID As String, ByVal FName As String) As Boolean Implements IDatabaseExportImportDA.CreateDatabaseForMobileExportData
            'Dim cat As New ADOX.Catalog
            'Dim FailIDStr As String = ""
            'Dim TransacionType As String = ""

            'Dim noupdate As Boolean = False
            'Dim cn As New SQLite.SQLiteConnection

            'Dim dtDailySale As DataTable
            'Dim dtMonthlySale As DataTable
            'Dim dtYearlySale As DataTable
            'Dim dtDebitAmt As DataTable
            'Global_CurrentLocationID = BranchID
            'Try

            '    dtDailySale = GetDailySale()
            '    dtMonthlySale = GetMonthlySale()
            '    dtYearlySale = GetYearlySale()
            '    dtDebitAmt = GetDebitAmount()

            '    cn = New SQLiteConnection(Me.CreateSQliteConnectionString(DatabasePath, DBPassword))

            '    SQLiteConnection.CreateFile(DatabasePath)

            '    Execute_SQlite_Script(Me.CreateSQliteConnectionString(DatabasePath, "global"), ScriptExportSQLite)

            '    If (cn.State = ConnectionState.Open) Then cn.Close()

            '    cn.Open()

            '    If dtDailySale.Rows.Count > 0 Then
            '        InsertDailySale(dtDailySale, DatabasePath)
            '    End If
            '    If dtMonthlySale.Rows.Count > 0 Then
            '        InsertMonthlySale(dtMonthlySale, DatabasePath)
            '    End If
            '    If dtYearlySale.Rows.Count > 0 Then
            '        InsertYearlySale(dtYearlySale, DatabasePath)
            '    End If
            '    If dtDebitAmt.Rows.Count > 0 Then
            '        InsertDebitAmt(dtDebitAmt, DatabasePath)
            '    End If


            'Catch ex As Exception
            '    WriteEventlogs("CreateDatabaseForMobileExportData : " & ex.Message)



            '    Return False
            'Finally
            '    Dim fiFile As New System.IO.FileInfo(DatabasePath)
            '    If fiFile.Exists = True Then
            '        fiFile.Refresh()
            '    End If
            'End Try

            'Return True
        End Function
        Public Function CreateSQliteConnectionString(ByVal FileName As String, ByVal PPassword As String) As String Implements IDatabaseExportImportDA.CreateSQliteConnectionString
            Dim str As String = ""
            If InStr(FileName, ".db", CompareMethod.Text) <= 0 Then
                FileName = FileName & ".db"
            End If
            str = String.Format("Data Source={0};Version=3;", FileName)
            If DBPassword <> "" Then
                str = str & String.Format("Jet SQLite:Database Password={0}", PPassword)
            End If
            Return str
        End Function
        Private Function Execute_SQlite_Script(ByVal dbConnectionString As String, ByVal scriptFileName As String) As Boolean

            'Dim sr As System.IO.StreamReader = Nothing
            'Dim sb As StringBuilder = Nothing

            'Dim line As String = ""

            'Dim sqlcmd As SQLiteCommand
            'Dim sqlcn As SQLiteConnection
            'Dim sqlTrans As SQLiteTransaction

            'sqlcn = New SQLiteConnection(dbConnectionString)
            'sqlcn.Open()
            'sqlTrans = sqlcn.BeginTransaction
            'sqlcmd = sqlcn.CreateCommand

            'Try
            '    sqlcmd.Transaction = sqlTrans
            '    sqlcmd.CommandType = CommandType.Text

            '    sr = New System.IO.StreamReader(scriptFileName)

            '    Do
            '        sb = New StringBuilder
            '        Do
            '            line = sr.ReadLine()
            '            If (line Is Nothing) Then
            '                Exit Do
            '            ElseIf (line = "GO" Or line = "Go") Then
            '                Exit Do
            '            Else
            '            End If
            '            sb.Append(ControlChars.CrLf & line)
            '        Loop

            '        If line Is Nothing Then Exit Do

            '        sqlcmd.CommandText = sb.ToString

            '        sqlcmd.ExecuteNonQuery()

            '    Loop Until line Is Nothing

            '    If Not sqlTrans Is Nothing Then
            '        sqlTrans.Commit()
            '    End If
            '    Execute_SQlite_Script = True
            'Catch ex As Exception
            '    If Not sqlTrans Is Nothing Then
            '        sqlTrans.Rollback()
            '    End If
            '    Execute_SQlite_Script = False
            '    '   ''MsgBox(ex.Message, MsgBoxStyle.Critical, "Data Base Connection Error")
            '    WriteEventlogs("Execute_SQlite_Script " & ex.Message)
            'Finally
            '    If IsNothing(sr) Then
            '        sr.Close()
            '    End If
            '    Reset()
            'End Try
        End Function
        Private Function Execute_ScriptSQLite(ByVal dbConnectionString As String, ByVal scriptFileName As String) As Boolean

            Dim sr As System.IO.StreamReader = Nothing
            Dim sb As StringBuilder = Nothing

            Dim line As String = ""

            Dim sqlcmd As OleDbCommand
            Dim sqlcn As OleDbConnection
            Dim sqlTrans As OleDbTransaction

            sqlcn = New OleDbConnection(dbConnectionString)
            sqlcn.Open()
            sqlTrans = sqlcn.BeginTransaction
            sqlcmd = sqlcn.CreateCommand

            Try
                sqlcmd.Transaction = sqlTrans
                sqlcmd.CommandType = CommandType.Text

                sr = New System.IO.StreamReader(scriptFileName)

                Do
                    sb = New StringBuilder
                    Do
                        line = sr.ReadLine()
                        If (line Is Nothing) Then
                            Exit Do
                        ElseIf (line = "GO" Or line = "Go") Then
                            Exit Do
                        Else
                        End If
                        sb.Append(ControlChars.CrLf & line)
                    Loop

                    If line Is Nothing Then Exit Do

                    sqlcmd.CommandText = sb.ToString

                    sqlcmd.ExecuteNonQuery()

                Loop Until line Is Nothing

                If Not sqlTrans Is Nothing Then
                    sqlTrans.Commit()
                End If
                Execute_ScriptSQLite = True
            Catch ex As Exception
                If Not sqlTrans Is Nothing Then
                    sqlTrans.Rollback()
                End If
                Execute_ScriptSQLite = False
                '   ''MsgBox(ex.Message, MsgBoxStyle.Critical, "Data Base Connection Error")
                WriteEventlogs("Execute_ScriptSQLite " & ex.Message)
            Finally
                If IsNothing(sr) Then
                    sr.Close()
                End If
                Reset()
            End Try
        End Function
        Private Function GetDailySale()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try


                strCommandText = " Select SDate,Type,SUM(TotalAmount) as TotalAmount,SUM(Cash) As Cash,SUM(Credit) as Credit,SUM(NetAmount) as NetAmount from( " & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))as NetAmount,1 as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (AllAdvanceAmount+OtherCashAmount) ELSE (H.PaidAmount+AllAdvanceAmount+OtherCashAmount) END AS Cash," & _
                                " CASE WHEN (IsAdvance=1 AND IsCancel=1) THEN 0 ELSE (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount+H.AllAdvanceAmount+H.OtherCashAmount)) END AS Credit " & _
                                " from tbl_SaleInvoiceHeader H Where LocationID=@LocationID and IsDelete=0 And saleDate Between @FromDate and @ToDate " & _
                                " UNION ALL" & _
                                " select CONVERT(VARCHAR(10),WDate,103) As SDate,H.NetAmount as TotalAmount,((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt)) AS  NetAmount,1 as Type," & _
                                " H.PaidAmount AS Cash,(((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount)) as Credit" & _
                                " from tbl_WholeSaleInvoice H Where LocationID=@LocationID and IsDelete=0 And WDate Between @FromDate and @ToDate  and PayType=2" & _
                                " Union All " & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))as NetAmount,1 as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                                " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                                " from tbl_SaleLooseDiamondHeader H Where LocationID=@LocationID and IsDelete=0 And saleDate Between @FromDate and @ToDate " & _
                                " Union All " & _
                                " select CONVERT(VARCHAR(10),SDate,103) As SDate,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))as NetAmount,1 as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                                " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                                " from tbl_SaleGems H Where LocationID=@LocationID and IsDelete=0 And Sdate Between @FromDate and @ToDate " & _
                                " Union All " & _
                                " select CONVERT(VARCHAR(10),ConsignDate,103) As SDate,H.NetAmount as TotalAmount,((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt)) as NetAmount,1 as Type," & _
                                " H.PaidAmount AS Cash,(((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount)) AS Credit " & _
                                " from tbl_ConsignmentSale H Where LocationID=@LocationID and IsDelete=0 And ConsignDate Between @FromDate and @ToDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,H.TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt)) as NetAmount,1 as Type," & _
                                " H.PaidAmount AS Cash,(((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount))  AS Credit " & _
                                " from tbl_SalesVolume H Where LocationID=@LocationID and IsDelete=0 And SaleDate Between @FromDate and @ToDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SDate,103) As SDate,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))as NetAmount,5  as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                                " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                                " from tbl_SaleGems H Where LocationID=@LocationID and IsDelete=0 And Sdate Between @FromDate and @ToDate " & _
                                " Union All " & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,6  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleLooseDiamondHeader H" & _
                                " Inner join tbl_SaleLooseDiamondDetail D on H.SaleLooseDiamondID=D.SaleLooseDiamondID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.isdiamond=0 and F.IsLooseDiamond =1" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                                " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.isdiamond=0 and G.IsGramRate =1" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,4 as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                                " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=1" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                                " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.isdiamond=0 and G.IsGramRate =0 and F.IsDiamond=0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate  " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                                " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,4 as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                                " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=1 and F.isLooseDiamond=0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),SaleDate,103) As SDate,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                                " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All " & _
                                " select CONVERT(VARCHAR(10),WDate,103) As SDate,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                                " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0 and Paytype=2" & _
                                " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),WDate,103) As SDate,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,4 as Type," & _
                                " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                                " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=1 and F.isLooseDiamond=0 and Paytype=2" & _
                                " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),WDate,103) As SDate,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                                " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0 and Paytype=2" & _
                                " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),ConsignDate,103) As SDate,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                                " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0" & _
                                " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),ConsignDate,103) As SDate,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,4 as Type," & _
                                " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                                " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID   and F.IsDiamond=1 and F.isLooseDiamond=0 " & _
                                " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                                " Union All" & _
                                " select CONVERT(VARCHAR(10),ConsignDate,103) As SDate,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                                " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0" & _
                                " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                                " ) as Sale Group by SDate,Type "


                DBComm = DB.GetSqlStringCommand(strCommandText)

                Dim FDate As DateTime = DateTime.Now.Date.AddDays(-30)
                Dim TDate As DateTime = DateTime.Now.Date

                DB.AddInParameter(DBComm, "@FromDate", DbType.DateTime, CDate(FDate.Date & " 00:00:00"))
                DB.AddInParameter(DBComm, "@ToDate", DbType.DateTime, CDate(TDate.Date & " 23:59:59"))
                DB.AddInParameter(DBComm, "@LocationID", DbType.String, Global_CurrentLocationID)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetDailySale : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetMonthlySale()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try


                'strCommandText = "  select SMonth,SYear,Sum(totalCash) as Cash,Sum(totalCredit) as Credit,sum(totalCash+totalCredit) as Total from(select Month(Sale.InvoiceDate) As SMonth,Year(Sale.InvoiceDate) As SYear,0 as totalCash,SUM(Sale.NetAmount) as totalCredit  from tbl_SaleInvoice Sale "
                'strCommandText += "  WHERE Sale.InvoiceDate>=@FromMonth AND Sale.InvoiceDate<@ToMonth  "
                'strCommandText += " and Sale.IsDeleted=0 AND Sale.IsSaleReturn= 0  and Sale.SaleType=1 Group by Sale.InvoiceDate Union all  select Month(Sale.InvoiceDate) As SMonth,Year(Sale.InvoiceDate) As SYear,SUM(Sale.NetAmount) as totalCredit , 0 as totalCredit from tbl_SaleInvoice Sale "
                'strCommandText += "  WHERE Sale.InvoiceDate>=@FromMonth AND Sale.InvoiceDate<@ToMonth  "
                'strCommandText += "  and Sale.IsDeleted=0  AND Sale.IsSaleReturn= 0  and Sale.SaleType=3 Group by Sale.InvoiceDate) As a where 1=1 group by SMonth,SYear "

                strCommandText = " Select SYear,SMonth,Type,SUM(TotalAmount) as TotalAmount,SUM(Cash) As Cash,SUM(Credit) as Credit,SUM(NetAmount) as NetAmount from( " & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))as NetAmount,1  as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (AllAdvanceAmount+OtherCashAmount) ELSE (H.PaidAmount+AllAdvanceAmount+OtherCashAmount) END AS Cash," & _
                                " CASE WHEN (IsAdvance=1 AND IsCancel=1) THEN 0 ELSE (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount+H.AllAdvanceAmount+H.OtherCashAmount)) END AS Credit " & _
                                " from tbl_SaleInvoiceHeader H Where LocationID=@LocationID and IsDelete=0 And saleDate Between @FromDate and @ToDate " & _
                                " UNION ALL" & _
                                " select Year(WDate) As SYear,Month(WDate) as SMonth,H.NetAmount as TotalAmount,((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt)) AS  NetAmount,1  as Type," & _
                                " H.PaidAmount AS Cash,(((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount)) as Credit" & _
                                " from tbl_WholeSaleInvoice H Where LocationID=@LocationID and IsDelete=0 And WDate Between @FromDate and @ToDate  and PayType=2" & _
                                " Union All " & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))as NetAmount,1  as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                                " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                                " from tbl_SaleLooseDiamondHeader H Where LocationID=@LocationID and IsDelete=0 And saleDate Between @FromDate and @ToDate " & _
                                " Union All " & _
                                " select Year(SDate) As SYear,Month(SDate) as SMonth,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))as NetAmount,1  as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                                " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                                " from tbl_SaleGems H Where LocationID=@LocationID and IsDelete=0 And Sdate Between @FromDate and @ToDate " & _
                                " Union All " & _
                                " select Year(ConsignDate) As SYear,Month(ConsignDate) as SMonth,H.NetAmount as TotalAmount,((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt)) as NetAmount,1  as Type," & _
                                " H.PaidAmount AS Cash,(((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount)) AS Credit " & _
                                " from tbl_ConsignmentSale H Where LocationID=@LocationID and IsDelete=0 And ConsignDate Between @FromDate and @ToDate " & _
                                " Union All" & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,H.TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt)) as NetAmount,1  as Type," & _
                                " H.PaidAmount AS Cash,(((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount))  AS Credit " & _
                                " from tbl_SalesVolume H Where LocationID=@LocationID and IsDelete=0 And SaleDate Between @FromDate and @ToDate " & _
                                " UNION ALL" & _
                                " select Year(SDate) As SYear,Month(SDate) as SMonth,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))as NetAmount,5  as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                                " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                                " from tbl_SaleGems H Where LocationID=@LocationID and IsDelete=0 And Sdate Between @FromDate and @ToDate " & _
                                " Union All " & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,Sum(D.TotalAmount+D.AddOrSub),Sum(D.TotalAmount+D.AddOrSub) as NetAmount,6  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleLooseDiamondHeader H" & _
                                " Inner join tbl_SaleLooseDiamondDetail D on H.SaleLooseDiamondID=D.SaleLooseDiamondID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.isdiamond=0 and F.IsLooseDiamond =1" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                                " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.isdiamond=0 and G.IsGramRate =1" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,4  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                                " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond =1" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                                " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and G.IsGramRate =0 and F.IsDiamond=0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate  " & _
                                " Union All" & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                                " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,4  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                                " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=1 and F.isLooseDiamond=0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select Year(SaleDate) As SYear,Month(SaleDate) as SMonth,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                                " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                                " select Year(WDate) As SYear,Month(WDate) as SMonth,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                                " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0 and Paytype=2" & _
                                " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                                " Union All" & _
                                " select Year(WDate) As SYear,Month(WDate) as SMonth,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,4  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                                " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=1 and F.isLooseDiamond=0 and Paytype=2" & _
                                " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                                " Union All" & _
                                " select Year(WDate) As SYear,Month(WDate) as SMonth,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                                " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0 and Paytype=2" & _
                                " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                                " Union All" & _
                                " select Year(ConsignDate) As SYear,Month(ConsignDate) as SMonth,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,3  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                                " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0" & _
                                " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                                " Union All" & _
                                " select Year(ConsignDate) As SYear,Month(ConsignDate) as SMonth,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,4  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                                " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=1 and F.isLooseDiamond=0 " & _
                                " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                                " Union All" & _
                                " select Year(ConsignDate) As SYear,Month(ConsignDate) as SMonth,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,2  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                                " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0" & _
                                " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                                " ) as Sale Group by SYear,SMonth,Type "



                DBComm = DB.GetSqlStringCommand(strCommandText)
                Dim FMonth As Date = Date.Today.AddMonths(-12)
                Dim TMonth As Date = DateTime.Now.Date

                DB.AddInParameter(DBComm, "@FromDate", DbType.DateTime, CDate(FMonth.Date & " 00:00:00"))
                DB.AddInParameter(DBComm, "@ToDate", DbType.DateTime, CDate(TMonth.Date & " 23:59:59"))
                DB.AddInParameter(DBComm, "@LocationID", DbType.String, Global_CurrentLocationID)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetMonthlySale : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetDebitAmount()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try


                'strCommandText = "   SELECT C.CustomerID AS CustomerID, C.CustomerCode AS [CustomerCode],C.CustomerName As CustomerName,C.ContactName AS ContactName,C.ContactAddress AS ContactAddress, (Convert(Decimal(18,1),CONVERT(VARBINARY(20),"
                'strCommandText += "  ((case when sum(isnull(main.balance,0))=0 then C.OpeningAmt-(isnull(E.PayAmount,0)) else C.OpeningAmt-(isnull(E.PayAmount,0))+ "
                'strCommandText += "  sum(isnull(main.balance,0)) end))))) As Balance, C.ContactPhone1 AS Phone,C.DuePeriod As DueDate from tbl_customer C   Inner join tbl_companyprofile CO on Co.CompanyID=C.CompanyID   "
                'strCommandText += " left join( SELECT Cus.CustomerID, Cus.CustomerCode AS [CustomerCode],Cus.CustomerName As [Customer Name],Cus.ContactName AS [Contact Name], "
                'strCommandText += " Cus.ContactAddress AS [Contact Address],  SUM(S.NetAmount-(S.PaidAmount+isnull(S.OtherPaymentAmount,0) +isnull(C.PayAmount ,0)+ "
                'strCommandText += " isnull(D.PayAmount ,0)+isnull(CR.ReturnAmount,0)))  As Balance,Cus.ContactPhone1 AS [Phone 1], Cus.Inactive AS [@Inactive], "
                'strCommandText += "  Cus.DuePeriod As DueDate,Cus.DiscPercent as CDiscPercent FROM tbl_SaleInvoice S     LEFT OUTER JOIN tbl_Customer Cus ON S.CustomerID = Cus.CustomerID   "
                'strCommandText += " LEFT OUTER JOIN(select CR.SaleInvoiceID, CASE WHEN SUM(CR.PayAmount) < 0 THEN 0 ELSE SUM(CR.PayAmount) END AS PayAmount from tbl_CashReceipt CR   INNER JOIN tbl_SaleInvoice SI ON CR.SaleInvoiceID = SI.SaleInvoiceID "
                'strCommandText += " WHERE CR.IsDeleted=0 and SI.IsDeleted=0 and    consignmentreturnid = '' GROUP BY CR.SaleInvoiceID) AS C ON C.SaleInvoiceID=S.SaleInvoiceID   LEFT OUTER JOIN(select CR.SaleInvoiceID,   "
                'strCommandText += " CASE WHEN SUM(CR.PayAmount) < 0 THEN 0 ELSE SUM(CR.PayAmount) END AS PayAmount  from tbl_CashReceipt CR INNER JOIN tbl_SaleInvoice SI ON CR.SaleInvoiceID = SI.CustomerID WHERE CR.IsDeleted=0 and SI.IsDeleted=0 "
                'strCommandText += "  and consignmentreturnid = ''   GROUP BY CR.SaleInvoiceID) AS D ON D.SaleInvoiceID=S.SaleInvoiceID LEFT OUTER JOIN(SELECT CR.InvoiceID,SUM(CR.ReturnAmount) AS ReturnAmount   from tbl_ConsignmentReturn CR   "
                'strCommandText += " INNER JOIN tbl_SaleInvoice SI ON CR.InvoiceID = SI.SaleInvoiceID  where CR.IsDeleted=0 and SI.IsDeleted=0 GROUP BY CR.InvoiceID) AS CR ON CR.InvoiceID = S.SaleInvoiceID  WHERE S.IsDeleted=0 and Cus.IsDeleted=0  and S.IsPaid = 0  "
                'strCommandText += " and S.IsSaleReturn=0  GROUP BY Cus.CustomerID,Cus.CustomerCode, Cus.ContactName,Cus.ContactAddress,S.NetAmount,Cus.ContactPhone1,Cus.Inactive,Cus.DuePeriod,Cus.CustomerName,Cus.OpeningAmt,Cus.DiscPercent )as main  on main.customerid = C.CustomerID  "
                'strCommandText += " LEFT OUTER JOIN(select CR.SaleInvoiceID, CASE WHEN SUM(CR.PayAmount) < 0 THEN 0 ELSE SUM(CR.PayAmount) END AS PayAmount from tbl_CashReceipt CR where CR.IsDeleted=0  GROUP BY CR.SaleInvoiceID)as E ON E.SaleInvoiceID = C.CustomerID "
                'strCommandText += " WHERE C.Inactive<>1 and C.IsDeleted=0  and Balance<>0 group by C.CustomerID ,C.CustomerCode,C.ContactName,C.CustomerName,C.ContactAddress,C.ContactPhone1,C.Inactive,C.DuePeriod,C.DiscPercent,C.CustomerName,C.OpeningAmt,E.PayAmount, CO.CompanyName order by CustomerCode "

                strCommandText = " Select sum(DebtAmount) AS Balance,CustomerId,CustomerCode as CustomerCode,CustomerName as CustomerName,ContactName,CustomerAddress,Phone from ( " & _
                                         " Select * from " & _
                                         " (select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((TotalAmount+AddOrSub)-(((TotalAmount*PromotionDiscount)/100)+DiscountAmount)) " & _
                                         " -(PaidAmount+PayAmount+PurchaseAmount+AllAdvanceAmount " & _
                                         " +OtherCashAmount+RedeemValue+MemberDiscountAmt)) as DebtAmount  from tbl_SaleInvoiceHeader I   left join tbl_Customer C on I.CustomerID=C.CustomerID  , " & _
                                         " (select VoucherNo,sum(PayAmount) as PayAmount from tbl_CashReceipt Where Type='SalesInvoice' and IsDelete=0 group by VoucherNo ) as Debt " & _
                                         " where I.SaleInvoiceHeaderID = Debt.VoucherNo AND I.IsDelete=0 And C.IsDelete=0 And  (((TotalAmount+AddOrSub) " & _
                                         " -(((TotalAmount*PromotionDiscount)/100)+DiscountAmount))-(PaidAmount+payAmount+PurchaseAmount+AllAdvanceAmount+OtherCashAmount+RedeemValue+MemberDiscountAmt)) > 0  " & _
                                         " And I.LocationID =" & Global_CurrentLocationID & _
                                         " union all" & _
                                         " select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((TotalAmount+AddOrSub)-(((TotalAmount*PromotionDiscount)/100) " & _
                                         " +DiscountAmount))-(PaidAmount+PurchaseAmount+AllAdvanceAmount+OtherCashAmount+RedeemValue+MemberDiscountAmt)) as DebtAmount  from tbl_SaleInvoiceHeader I " & _
                                         " left join tbl_Customer C on I.CustomerID=C.CustomerID  where I.IsDelete=0 AND C.IsDelete=0 AND (((TotalAmount+AddOrSub)" & _
                                         " -(((TotalAmount*PromotionDiscount)/100)+DiscountAmount))-(PaidAmount+PurchaseAmount+AllAdvanceAmount+OtherCashAmount+RedeemValue+MemberDiscountAmt)) <>0 AND IsCancel=0  " & _
                                         " And I.LocationID = " & Global_CurrentLocationID & " and SaleInvoiceHeaderID Not In  (Select VoucherNo from tbl_CashReceipt Where Type='SalesInvoice' and IsDelete=0 ))as E " & _
                                         " UNION ALL  " & _
                                         " Select * from " & _
                                         " (select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((TotalAmount+AddOrSub)-(((TotalAmount*PromotionDiscount)/100)+DiscountAmount)) " & _
                                         " -(PaidAmount+PayAmount+PurchaseAmount " & _
                                         " +OtherCashAmount+RedeemValue+MemberDiscountAmt)) as DebtAmount  from tbl_SaleLooseDiamondHeader I   left join tbl_Customer C on I.CustomerID=C.CustomerID  , " & _
                                         " (select VoucherNo,sum(PayAmount) as PayAmount from tbl_CashReceipt Where Type='SaleLooseDiamond' and IsDelete=0 group by VoucherNo ) as Debt " & _
                                         " where I.SaleLooseDiamondID = Debt.VoucherNo AND I.IsDelete=0 And C.IsDelete=0 And  (((TotalAmount+AddOrSub) " & _
                                         " -(((TotalAmount*PromotionDiscount)/100)+DiscountAmount+RedeemValue+MemberDiscountAmt))-(PaidAmount+payAmount+PurchaseAmount+OtherCashAmount)) > 0  " & _
                                         " And I.LocationID =" & Global_CurrentLocationID & _
                                         " union all" & _
                                         " select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((TotalAmount+AddOrSub)-(((TotalAmount*PromotionDiscount)/100) " & _
                                         " +DiscountAmount+RedeemValue+MemberDiscountAmt))-(PaidAmount+PurchaseAmount+OtherCashAmount)) as DebtAmount  from tbl_SaleLooseDiamondHeader I " & _
                                         " left join tbl_Customer C on I.CustomerID=C.CustomerID  where I.IsDelete=0 AND C.IsDelete=0 AND (((TotalAmount+AddOrSub)" & _
                                         " -(((TotalAmount*PromotionDiscount)/100)+DiscountAmount+RedeemValue+MemberDiscountAmt))-(PaidAmount+PurchaseAmount+OtherCashAmount)) <>0  " & _
                                         " And I.LocationID = " & Global_CurrentLocationID & " and SaleLooseDiamondID Not In  (Select VoucherNo from tbl_CashReceipt Where Type='SaleLooseDiamond' and IsDelete=0 ))as L " & _
                                         " UNION ALL  " & _
                                         " Select * from ( " & _
                                         " select  I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((NetAmount+AddOrSub)-(Discount))-(PaidAmount+PayAmount)) as DebtAmount  from tbl_WholeSaleInvoice I " & _
                                         " left join tbl_Customer C on I.CustomerID=C.CustomerID  ,   (select VoucherNo,sum(PayAmount) as PayAmount from tbl_CashReceipt  " & _
                                         " Where Type='WholeSalesInvoice' and IsDelete=0  group by VoucherNo ) as Debt  where I.WholeSaleInvoiceID = Debt.VoucherNo AND I.IsDelete=0  " & _
                                         " And C.IsDelete=0 And   (((NetAmount+AddOrSub)-(Discount+RedeemValue+MemberDiscountAmt))-(PaidAmount)) <> 0   And I.LocationID =" & Global_CurrentLocationID & _
                                         " union all select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((NetAmount+AddOrSub)-(Discount+RedeemValue+MemberDiscountAmt))-(PaidAmount)) as DebtAmount   from tbl_WholeSaleInvoice I   " & _
                                         " left join tbl_Customer C on I.CustomerID=C.CustomerID  where I.IsDelete=0 AND C.IsDelete=0 AND  (((NetAmount+AddOrSub)-(Discount+RedeemValue+MemberDiscountAmt))-(PaidAmount))  " & _
                                         " <>0  And I.LocationID =" & Global_CurrentLocationID & " AND PayType='2'  and WholeSaleInvoiceID Not In  (Select VoucherNo from tbl_CashReceipt  " & _
                                         " Where Type='WholeSalesInvoice'  and IsDelete=0 ))as W  UNION ALL " & _
                                         " Select * from ( select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone, (((NetAmount+AddOrSub)-(Discount+RedeemValue+MemberDiscountAmt))-(PaidAmount+PayAmount)) as DebtAmount   " & _
                                         " from tbl_ConsignmentSale I  left join  tbl_Customer C on I.CustomerID=C.CustomerID  ,   (select VoucherNo,sum(PayAmount) as PayAmount from tbl_CashReceipt  " & _
                                         " Where Type='ConsignmentSaleInvoice' and IsDelete=0  group by VoucherNo ) as Debt  where I.ConsignmentSaleID = Debt.VoucherNo  " & _
                                         " AND I.IsDelete=0 And C.IsDelete=0 And   (((NetAmount + AddOrSub) - (Discount+RedeemValue+MemberDiscountAmt)) - (PaidAmount)) <> 0   And I.LocationID = " & Global_CurrentLocationID & _
                                         " union all select  I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone, (((NetAmount+AddOrSub)-(Discount+RedeemValue+MemberDiscountAmt))-(PaidAmount)) as DebtAmount   from tbl_ConsignmentSale I   " & _
                                         " left join tbl_Customer C  on I.CustomerID=C.CustomerID  where I.IsDelete=0 AND C.IsDelete=0 AND  (((NetAmount + AddOrSub) - (Discount+RedeemValue+MemberDiscountAmt)) - (PaidAmount)) <> 0   " & _
                                         " And I.LocationID =" & Global_CurrentLocationID & " and ConsignmentSaleID Not In  (Select VoucherNo from tbl_CashReceipt Where Type='ConsignmentSaleInvoice'  " & _
                                         " and IsDelete=0 ))as S   UNION ALL  Select * from (  select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,((((H.AllTotalAmount+H.AllAddOrSub)-H.DiscountAmount)-H.AdvanceAmount) " & _
                                         " -(H.PaidAmount+PayAmount+H.FromGoldAmount)) AS DebtAmount  from tbl_OrderReturnHeader H  LEFT JOIN tbl_OrderInvoice I ON I.OrderInvoiceID=H.OrderInvoiceID  " & _
                                         " Left Join tbl_Customer C on C.CustomerID=I.CustomerID LEFT JOIN tbl_Location ON tbl_Location.LocationID=H.LocationID , (select VoucherNo,sum(PayAmount) as PayAmount  " & _
                                         " from tbl_CashReceipt Where Type='OrderInvoice'  and IsDelete=0 group by VoucherNo ) as Debt 	    where H.OrderInvoiceID = Debt.VoucherNo  " & _
                                         " And ((((H.AllTotalAmount + H.AllAddOrSub) - H.DiscountAmount)-H.AdvanceAmount) - (H.PaidAmount + H.FromGoldAmount))<>0 and IsRetrieved = 1   " & _
                                         " And I.LocationID =" & Global_CurrentLocationID & " AND H.IsDelete=0 And I.IsDelete=0 And C.IsDelete=0 AND H.OrderReturnHeaderID=(SELECT MAX(OrderReturnHeaderID)  " & _
                                         " FROM tbl_OrderReturnHeader R WHERE R.OrderInvoiceID=H.OrderInvoiceID AND R.IsDelete=0)  " & _
                                         " UNION ALL  select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,((((H.AllTotalAmount+H.AllAddOrSub)-H.DiscountAmount)-H.AdvanceAmount) " & _
                                         " -(H.PaidAmount+H.FromGoldAmount)) AS DebtAmount  from tbl_OrderReturnHeader H  LEFT JOIN  tbl_OrderInvoice I ON I.OrderInvoiceID=H.OrderInvoiceID  " & _
                                         " Left Join tbl_Customer C on C.CustomerID=I.CustomerID  LEFT JOIN tbl_Location  ON tbl_Location.LocationID=H.LocationID  where ((((H.AllTotalAmount+H.AllAddOrSub)-H.DiscountAmount)-H.AdvanceAmount) " & _
                                         " -(H.PaidAmount+H.FromGoldAmount))<>0   And I.LocationID =" & Global_CurrentLocationID & " and IsRetrieved = 1 and H.OrderInvoiceID  " & _
                                         " Not In (Select VoucherNo from tbl_CashReceipt Where Type='OrderInvoice' and IsDelete=0  ) AND H.IsDelete=0 And I.IsDelete=0 And C.IsDelete=0  " & _
                                         " And H.OrderReturnHeaderID=(SELECT MAX(OrderReturnHeaderID) FROM tbl_OrderReturnHeader R WHERE R.OrderInvoiceID=H.OrderInvoiceID  " & _
                                         " AND R.IsDelete=0)) AS A  UNION ALL  Select * from ( select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,((TotalAmount+AddOrSub)-((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount)) " & _
                                         " -(PaidAmount+PayAmount+isnull(I.PurchaseAmount,0)) as DebtAmount  from tbl_SaleGems 	I  LEFT JOIN tbl_Customer C ON C.CustomerID=I.CustomerID   " & _
                                         " LEFT JOIN tbl_Location ON tbl_Location.LocationID=I.LocationID , (select VoucherNo,sum(PayAmount) as PayAmount from tbl_CashReceipt  " & _
                                         " Where Type='SalesGems' and IsDelete=0  group by VoucherNo ) as Debt  where I.IsDelete=0 And C.IsDelete=0 And I.SaleGemsID=Debt.VoucherNo   and ((TotalAmount+AddOrSub) " & _
                                         " -((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount))-(PaidAmount+isnull(I.PurchaseAmount,0))<>0  And I.LocationID = " & Global_CurrentLocationID & "  " & _
                                         " union all  select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,((TotalAmount+AddOrSub)-((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount))-PaidAmount " & _
                                         " -isnull(I.PurchaseAmount,0) as DebtAmount from tbl_SaleGems I LEFT JOIN tbl_Customer C ON C.CustomerID=I.CustomerID   " & _
                                         " LEFT JOIN tbl_Location ON tbl_Location.LocationID=I.LocationID  where I.IsDelete=0 and C.IsDelete=0 And tbl_Location.IsDelete=0  " & _
                                         " and ((TotalAmount+AddOrSub)-((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount))-PaidAmount-isnull(I.PurchaseAmount,0)<>0   " & _
                                         " And I.LocationID = " & Global_CurrentLocationID & " and SaleGemsID Not In (Select VoucherNo from tbl_CashReceipt Where Type='SalesGems' and IsDelete=0 )) AS B   " & _
                                         " UNION ALL  Select * from ( select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((H.AllReturnTotalAmount+H.AllReturnAddOrSub)-H.ReturnDiscountAmount) " & _
                                         " -(H.ReturnPaidAmount+H.AdvanceAmount+PayAmount)) as DebtAmount   from tbl_ReturnRepairHeader H  LEFT JOIN tbl_RepairHeader I ON I.RepairID=H.RepairID  " & _
                                         " Left Join tbl_Customer C on C.CustomerID=I.CustomerID , (select VoucherNo,sum(PayAmount) as PayAmount from tbl_CashReceipt  " & _
                                         " Where Type='RepairReturn' and IsDelete=0  group by VoucherNo ) as Debt 	    where H.RepairID = Debt.VoucherNo  " & _
                                         " And (((H.AllReturnTotalAmount + H.AllReturnAddOrSub) - H.ReturnDiscountAmount) - (H.ReturnPaidAmount + H.AdvanceAmount)) <>0  " & _
                                         " and IsAllReturn = 1  And I.LocationID = " & Global_CurrentLocationID & " AND H.ReturnRepairID=(SELECT MAX(ReturnRepairID)  " & _
                                         " FROM tbl_ReturnRepairHeader R WHERE R.RepairID=H.RepairID AND IsDelete=0 )   " & _
                                         " UNION ALL select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((H.AllReturnTotalAmount+H.AllReturnAddOrSub)-H.ReturnDiscountAmount) " & _
                                         " -(H.ReturnPaidAmount+H.AdvanceAmount)) as DebtAmount  from tbl_ReturnRepairHeader H  LEFT JOIN  tbl_RepairHeader I ON I.RepairID=H.RepairID  " & _
                                         " Left Join tbl_Customer C on C.CustomerID=I.CustomerID   where H.IsDelete=0 AND I.IsDelete=0 And C.IsDelete=0  " & _
                                         " And (((H.AllReturnTotalAmount+H.AllReturnAddOrSub)-H.ReturnDiscountAmount)-(H.ReturnPaidAmount+H.AdvanceAmount)) <>0    " & _
                                         " And I.LocationID = " & Global_CurrentLocationID & " and IsAllReturn = 1 and H.RepairID Not In (Select VoucherNo from tbl_CashReceipt Where Type='RepairReturn'  " & _
                                         " and IsDelete=0  ) AND H.ReturnRepairID=(SELECT MAX(ReturnRepairID) FROM tbl_ReturnRepairHeader R WHERE R.RepairID=H.RepairID  " & _
                                         " and IsDelete=0))as C UNION ALL  Select * from ( select  I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((TotalAmount+AddOrSub)-((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount+RedeemValue+MemberDiscountAmt)) " & _
                                         " -(PaidAmount+PayAmount))  as DebtAmount  from tbl_SalesVolume I  left join tbl_Customer C on I.CustomerID=C.CustomerID  , (select VoucherNo,sum(PayAmount) as PayAmount from tbl_CashReceipt  " & _
                                         " Where Type='SalesInvoiceVolume' and IsDelete=0  group by VoucherNo ) as Debt where I.SalesVolumeID=Debt.VoucherNo and I.IsDelete=0  " & _
                                         " and C.IsDelete=0  and (((TotalAmount+AddOrSub)-((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount+RedeemValue+MemberDiscountAmt))-(PaidAmount)) <>0    " & _
                                         " And I.LocationID = " & Global_CurrentLocationID & " union all select I.CustomerID,CustomerCode as CustomerCode,CustomerName as CustomerName,CustomerName as ContactName,CustomerAddress,CustomerTel as Phone,(((TotalAmount+AddOrSub)-((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount+RedeemValue+MemberDiscountAmt))-PaidAmount) as DebtAmount  " & _
                                         " from tbl_SalesVolume I left join tbl_Customer C on I.CustomerID=C.CustomerID  where I.IsDelete=0 and C.IsDelete=0  " & _
                                         " And (((TotalAmount+AddOrSub)-((((TotalAmount+AddOrSub)*PromotionDiscount)/100)+DiscountAmount+RedeemValue+MemberDiscountAmt))-PaidAmount)<>0  And I.LocationID = " & Global_CurrentLocationID & " " & _
                                         " and SalesVolumeID Not In (Select VoucherNo from tbl_CashReceipt Where Type='SalesInvoiceVolume' And IsDelete=0 ))as D)as M  WHERE 1=1 and DebtAmount>0 group by CustomerId,CustomerName,CustomerCode,ContactName,CustomerAddress,Phone " & _
                                        "  order by Balance ASC"




                DBComm = DB.GetSqlStringCommand(strCommandText)

                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetDebitAmount : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Function GetYearlySale()
            Dim strCommandText As String
            Dim DBComm As DbCommand
            Dim dtResult As DataTable

            Try


                'strCommandText = " select SYear,Sum(totalCash) as Cash,Sum(totalCredit) as Credit,sum(totalCash+totalCredit) as Total from(select Year(Sale.InvoiceDate) As SYear,0 as totalCash,SUM(Sale.NetAmount) as totalCredit from tbl_SaleInvoice Sale  "
                'strCommandText += " WHERE Sale.InvoiceDate>=@FromYear AND Sale.InvoiceDate<=@ToYear  "
                'strCommandText += " and Sale.IsDeleted=0 AND Sale.IsSaleReturn= 0  and Sale.SaleType=1 Group by Year(Sale.InvoiceDate) Union all  select Year(Sale.InvoiceDate) As SYear,SUM(Sale.NetAmount) as totalCredit , 0 as totalCredit from tbl_SaleInvoice Sale "
                'strCommandText += " WHERE Sale.InvoiceDate>=@FromYear AND Sale.InvoiceDate<=@ToYear  "
                'strCommandText += "  and Sale.IsDeleted=0 AND Sale.IsSaleReturn= 0  and Sale.SaleType=3 Group by Year(Sale.InvoiceDate)) As a where 1=1 group by SYear "

                strCommandText = " Select SYear,Type,SUM(TotalAmount) as TotalAmount,SUM(Cash) As Cash,SUM(Credit) as Credit,SUM(NetAmount) as NetAmount from( " & _
                               " select Year(SaleDate) As SYear,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))as NetAmount,1  as Type," & _
                               " CASE WHEN H.PaidAmount<0 THEN (AllAdvanceAmount+OtherCashAmount) ELSE (H.PaidAmount+AllAdvanceAmount+OtherCashAmount) END AS Cash," & _
                               " CASE WHEN (IsAdvance=1 AND IsCancel=1) THEN 0 ELSE (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount+H.AllAdvanceAmount+H.OtherCashAmount)) END AS Credit " & _
                               " from tbl_SaleInvoiceHeader H Where LocationID=@LocationID and IsDelete=0 And saleDate Between @FromDate and @ToDate " & _
                               " UNION ALL" & _
                               " select Year(WDate) As SYear,H.NetAmount as TotalAmount,((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt)) AS  NetAmount,1  as Type," & _
                               " H.PaidAmount AS Cash,(((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount)) as Credit" & _
                               " from tbl_WholeSaleInvoice H Where LocationID=@LocationID and IsDelete=0 And WDate Between @FromDate and @ToDate  and PayType=2" & _
                               " Union All " & _
                               " select Year(SaleDate) As SYear,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))as NetAmount,1  as Type," & _
                               " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                               " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                               " from tbl_SaleLooseDiamondHeader H Where LocationID=@LocationID and IsDelete=0 And saleDate Between @FromDate and @ToDate " & _
                               " Union All " & _
                               " select Year(SDate) As SYear,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))as NetAmount,1  as Type," & _
                               " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                               " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                               " from tbl_SaleGems H Where LocationID=@LocationID and IsDelete=0 And Sdate Between @FromDate and @ToDate " & _
                               " Union All " & _
                               " select Year(ConsignDate) As SYear,H.NetAmount as TotalAmount,((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt)) as NetAmount,1  as Type," & _
                               " H.PaidAmount AS Cash,(((H.NetAmount+H.AddOrSub)-(H.Discount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount)) AS Credit " & _
                               " from tbl_ConsignmentSale H Where LocationID=@LocationID and IsDelete=0 And ConsignDate Between @FromDate and @ToDate " & _
                               " Union All" & _
                               " select Year(SaleDate) As SYear,H.TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt)) as NetAmount,1  as Type," & _
                               " H.PaidAmount AS Cash,(((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount+RedeemValue+MemberDiscountAmt))-(H.PaidAmount+H.PurchaseAmount))  AS Credit " & _
                               " from tbl_SalesVolume H Where LocationID=@LocationID and IsDelete=0 And SaleDate Between @FromDate and @ToDate " & _
                               " UNION ALL" & _
                               " select Year(SDate) As SYear,TotalAmount as TotalAmount,((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))as NetAmount,5  as Type," & _
                                " CASE WHEN H.PaidAmount<0 THEN (OtherCashAmount) ELSE (H.PaidAmount+OtherCashAmount) END AS Cash," & _
                                " (((H.TotalAmount+H.AddOrSub)-(((H.TotalAmount*PromotionDiscount)/100)+H.DiscountAmount))-(H.PaidAmount+H.PurchaseAmount+H.OtherCashAmount)) AS Credit " & _
                                " from tbl_SaleGems H Where LocationID=@LocationID and IsDelete=0 And Sdate Between @FromDate and @ToDate " & _
                                " Union All " & _
                                " select Year(SaleDate) As SYear,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,6  as Type," & _
                                " 0 as Cash,0 as Credit from tbl_SaleLooseDiamondHeader H" & _
                                " Inner join tbl_SaleLooseDiamondDetail D on H.SaleLooseDiamondID=D.SaleLooseDiamondID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                                " where H.isdelete=0 and H.LocationID=@LocationID and F.isdiamond=0 and F.IsLooseDiamond =1" & _
                                " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                                " Union All" & _
                               " select Year(SaleDate) As SYear,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,3  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                               " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID and F.isdiamond=0 and G.IsGramRate =1" & _
                               " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                               " Union All" & _
                               " select Year(SaleDate) As SYear,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,4  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                               " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond =1" & _
                               " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                               " Union All" & _
                               " select Year(SaleDate) As SYear,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,2  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_SaleInvoiceHeader H" & _
                               " Inner join tbl_SaleInvoiceDetail D on H.SaleInvoiceHeaderID=D.SaleInvoiceHeaderID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and G.IsGramRate =0 and F.IsDiamond=0" & _
                               " and H.saleDate Between @FromDate And @ToDate  group by SaleDate  " & _
                               " Union All" & _
                               " select Year(SaleDate) As SYear,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,3  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                               " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0" & _
                               " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                               " Union All" & _
                               " select Year(SaleDate) As SYear,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,4  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                               " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=1 and F.isLooseDiamond=0" & _
                               " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                               " Union All" & _
                               " select Year(SaleDate) As SYear,Sum(D.TotalAmount+D.AddOrSub) as TotalAmount,Sum(D.TotalAmount+D.AddOrSub) as NetAmount,2  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_SalesVolume H" & _
                               " Inner join tbl_SalesVolumeDetail D on H.SalesVolumeID=D.SalesVolumeID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0" & _
                               " and H.saleDate Between @FromDate And @ToDate  group by SaleDate " & _
                               " Union All" & _
                               " select Year(WDate) As SYear,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,3  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                               " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0 and Paytype=2" & _
                               " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                               " Union All" & _
                               " select Year(WDate) As SYear,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,4  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                               " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=1 and F.isLooseDiamond=0 and Paytype=2" & _
                               " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                               " Union All" & _
                               " select Year(WDate) As SYear,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,2  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_WholesaleInvoice H" & _
                               " Inner join tbl_WholesaleInvoiceItem D on H.WholesaleInvoiceID=D.WholesaleInvoiceID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0 and Paytype=2" & _
                               " and H.WDate Between @FromDate And @ToDate  group by WDate " & _
                               " Union All" & _
                               " select Year(ConsignDate) As SYear,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,3  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                               " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=0 and G.IsGramRate=1 and isLooseDiamond=0" & _
                               " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                               " Union All" & _
                               " select Year(ConsignDate) As SYear,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,4  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                               " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID  and F.IsDiamond=1 and F.isLooseDiamond=0 " & _
                               " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                               " Union All" & _
                               " select Year(ConsignDate) As SYear,sum(D.GoldPrice) as TotalAmount,Sum(D.GoldPrice) as NetAmount,2  as Type," & _
                               " 0 as Cash,0 as Credit from tbl_ConsignmentSale H" & _
                               " Inner join tbl_ConsignmentSaleItem D on H.ConsignmentSaleID=D.ConsignmentSaleID join tbl_forSale F on F.ForSaleID=D.ForSaleID " & _
                               " join tbl_GoldQuality G on G.GoldQualityID=F.GoldQualityID " & _
                               " where H.isdelete=0 and H.LocationID=@LocationID and F.IsDiamond=0 and F.isLooseDiamond=0 and G.IsGramRate =0" & _
                               " and H.ConsignDate Between @FromDate And @ToDate  group by ConsignDate " & _
                               " ) as Sale Group by SYear,Type "



                DBComm = DB.GetSqlStringCommand(strCommandText)
                Dim FYear As DateTime = DateTime.Now.AddYears(-6).Date
                Dim TYear As DateTime = DateTime.Now.Date

                DB.AddInParameter(DBComm, "@FromDate", DbType.DateTime, CDate(FYear.Date & " 00:00:00"))
                DB.AddInParameter(DBComm, "@ToDate", DbType.DateTime, CDate(TYear.Date & " 23:59:59"))
                DB.AddInParameter(DBComm, "@LocationID", DbType.String, Global_CurrentLocationID)
                dtResult = DB.ExecuteDataSet(DBComm).Tables(0)
                Return dtResult

            Catch ex As Exception
                WriteEventlogs("GetYearlySale : " & ex.Message)
                Return New DataTable
            End Try

        End Function
        Private Sub InsertDailySale(ByVal dtDailySale As DataTable, ByVal DatabasePath As String)

            'Dim Connstr As SQLiteConnection = New SQLiteConnection(Me.CreateSQliteConnectionString(DatabasePath, DBPassword))


            'Dim strCommandText As String = ""
            'Dim FailIDStr As String = ""
            'Connstr.Open()

            'Dim Command As SQLiteCommand

            'For i As Integer = 0 To dtDailySale.Rows.Count - 1
            '    Try
            '        strCommandText = "INSERT INTO tbl_DailySale(SDate,Cash,Credit,Total,Net,Type)"
            '        strCommandText += " VALUES (@SDate,@Cash,@Credit,@Total,@NetAmount,@Type)"


            '        Command = New SQLiteCommand(strCommandText, Connstr)
            '        Dim objParam1 As SQLiteParameter = Command.Parameters.Add("@SDate", DbType.String)
            '        objParam1.Value = dtDailySale.Rows(i).Item("SDate")
            '        Dim objParam2 As SQLiteParameter = Command.Parameters.Add("@Cash", DbType.Int32)
            '        objParam2.Value = dtDailySale.Rows(i).Item("Cash")
            '        Dim objParam3 As SQLiteParameter = Command.Parameters.Add("@Credit", DbType.Int32)
            '        objParam3.Value = dtDailySale.Rows(i).Item("Credit")
            '        Dim objParam4 As SQLiteParameter = Command.Parameters.Add("@Total", DbType.Int32)
            '        objParam4.Value = dtDailySale.Rows(i).Item("TotalAmount")
            '        Dim objParam5 As SQLiteParameter = Command.Parameters.Add("@NetAmount", DbType.Int32)
            '        objParam5.Value = dtDailySale.Rows(i).Item("NetAmount")
            '        Dim objParam6 As SQLiteParameter = Command.Parameters.Add("@Type", DbType.Int32)
            '        objParam6.Value = dtDailySale.Rows(i).Item("Type")

            '        Command.ExecuteNonQuery()

            '    Catch ex As Exception
            '        WriteEventlogs("InsertDailySale : " & ex.Message)
            '    End Try
            'Next
            'Connstr.Close()
        End Sub
        Private Sub InsertMonthlySale(ByVal dtMonthlySale As DataTable, ByVal DatabasePath As String)

            'Dim Connstr As SQLiteConnection = New SQLiteConnection(Me.CreateSQliteConnectionString(DatabasePath, DBPassword))


            'Dim strCommandText As String = ""
            'Dim FailIDStr As String = ""
            'Connstr.Open()

            'Dim Command As SQLiteCommand

            'For i As Integer = 0 To dtMonthlySale.Rows.Count - 1
            '    Try
            '        strCommandText = "INSERT INTO tbl_MonthlySale(SMonth,SYear,Cash,Credit,Total,Net,Type)"
            '        strCommandText += " VALUES (@SMonth,@SYear,@Cash,@Credit,@Total,@NetAmount,@Type)"


            '        Command = New SQLiteCommand(strCommandText, Connstr)
            '        Dim objParam1 As SQLiteParameter = Command.Parameters.Add("@SMonth", DbType.Int32)
            '        objParam1.Value = dtMonthlySale.Rows(i).Item("SMonth")
            '        Dim objParam2 As SQLiteParameter = Command.Parameters.Add("@SYear", DbType.Int32)
            '        objParam2.Value = dtMonthlySale.Rows(i).Item("SYear")
            '        Dim objParam3 As SQLiteParameter = Command.Parameters.Add("@Cash", DbType.Int32)
            '        objParam3.Value = dtMonthlySale.Rows(i).Item("Cash")
            '        Dim objParam4 As SQLiteParameter = Command.Parameters.Add("@Credit", DbType.Int32)
            '        objParam4.Value = dtMonthlySale.Rows(i).Item("Credit")
            '        Dim objParam5 As SQLiteParameter = Command.Parameters.Add("@Total", DbType.Int32)
            '        objParam5.Value = dtMonthlySale.Rows(i).Item("TotalAmount")
            '        Dim objParam6 As SQLiteParameter = Command.Parameters.Add("@NetAmount", DbType.Int32)
            '        objParam6.Value = dtMonthlySale.Rows(i).Item("NetAmount")
            '        Dim objParam7 As SQLiteParameter = Command.Parameters.Add("@Type", DbType.Int32)
            '        objParam7.Value = dtMonthlySale.Rows(i).Item("Type")

            '        Command.ExecuteNonQuery()

            '    Catch ex As Exception
            '        WriteEventlogs("InsertMonthlySale : " & ex.Message)
            '    End Try
            'Next
            'Connstr.Close()
        End Sub
        Private Sub InsertYearlySale(ByVal dtYearlySale As DataTable, ByVal DatabasePath As String)

            'Dim Connstr As SQLiteConnection = New SQLiteConnection(Me.CreateSQliteConnectionString(DatabasePath, DBPassword))


            'Dim strCommandText As String = ""
            'Dim FailIDStr As String = ""
            'Connstr.Open()

            'Dim Command As SQLiteCommand

            'For i As Integer = 0 To dtYearlySale.Rows.Count - 1
            '    Try
            '        strCommandText = "INSERT INTO tbl_YearlySale(SYear,Cash,Credit,Total,Net,Type)"
            '        strCommandText += " VALUES (@SYear,@Cash,@Credit,@Total,@NetAmount,@Type)"


            '        Command = New SQLiteCommand(strCommandText, Connstr)
            '        Dim objParam1 As SQLiteParameter = Command.Parameters.Add("@SYear", DbType.Int64)
            '        objParam1.Value = dtYearlySale.Rows(i).Item("SYear")
            '        Dim objParam2 As SQLiteParameter = Command.Parameters.Add("@Cash", DbType.Int64)
            '        objParam2.Value = dtYearlySale.Rows(i).Item("Cash")
            '        Dim objParam3 As SQLiteParameter = Command.Parameters.Add("@Credit", DbType.Int64)
            '        objParam3.Value = dtYearlySale.Rows(i).Item("Credit")
            '        Dim objParam4 As SQLiteParameter = Command.Parameters.Add("@Total", DbType.Int64)
            '        objParam4.Value = dtYearlySale.Rows(i).Item("TotalAmount")
            '        Dim objParam6 As SQLiteParameter = Command.Parameters.Add("@NetAmount", DbType.Int64)
            '        objParam6.Value = dtYearlySale.Rows(i).Item("NetAmount")
            '        Dim objParam7 As SQLiteParameter = Command.Parameters.Add("@Type", DbType.Int32)
            '        objParam7.Value = dtYearlySale.Rows(i).Item("Type")

            '        Command.ExecuteNonQuery()

            '    Catch ex As Exception
            '        WriteEventlogs("InsertYearlySale : " & ex.Message)
            '    End Try
            'Next
            'Connstr.Close()
        End Sub
        Private Sub InsertDebitAmt(ByVal dtDebitAmount As DataTable, ByVal DatabasePath As String)

            'Dim Connstr As SQLiteConnection = New SQLiteConnection(Me.CreateSQliteConnectionString(DatabasePath, DBPassword))


            'Dim strCommandText As String = ""
            'Dim FailIDStr As String = ""
            'Connstr.Open()

            'Dim Command As SQLiteCommand

            'For i As Integer = 0 To dtDebitAmount.Rows.Count - 1
            '    Try
            '        strCommandText = "INSERT INTO tbl_DebitAmount(CustomerID,CustomerCode,CustomerName,ContactName,ContactAddress,Balance,Phone)"
            '        strCommandText += " VALUES (@CustomerID,@CustomerCode,@CustomerName,@ContactName,@ContactAddress,@Balance,@Phone)"


            '        Command = New SQLiteCommand(strCommandText, Connstr)
            '        Dim objParam1 As SQLiteParameter = Command.Parameters.Add("@CustomerID", DbType.String)
            '        objParam1.Value = dtDebitAmount.Rows(i).Item("CustomerID")
            '        Dim objParam2 As SQLiteParameter = Command.Parameters.Add("@CustomerCode", DbType.String)
            '        objParam2.Value = dtDebitAmount.Rows(i).Item("CustomerCode")
            '        Dim objParam3 As SQLiteParameter = Command.Parameters.Add("@CustomerName", DbType.String)
            '        objParam3.Value = dtDebitAmount.Rows(i).Item("CustomerName")
            '        Dim objParam4 As SQLiteParameter = Command.Parameters.Add("@ContactName", DbType.String)
            '        objParam4.Value = dtDebitAmount.Rows(i).Item("ContactName")
            '        Dim objParam5 As SQLiteParameter = Command.Parameters.Add("@ContactAddress", DbType.String)
            '        objParam5.Value = dtDebitAmount.Rows(i).Item("CustomerAddress")
            '        Dim objParam6 As SQLiteParameter = Command.Parameters.Add("@Balance", DbType.Int32)
            '        objParam6.Value = dtDebitAmount.Rows(i).Item("Balance")
            '        Dim objParam7 As SQLiteParameter = Command.Parameters.Add("@Phone", DbType.String)
            '        objParam7.Value = dtDebitAmount.Rows(i).Item("Phone")

            '        Command.ExecuteNonQuery()

            '    Catch ex As Exception
            '        WriteEventlogs("InsertDebitAmt : " & ex.Message)
            '    End Try
            'Next
            'Connstr.Close()
        End Sub
    End Class

End Namespace
